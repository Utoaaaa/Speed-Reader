const staticAssets = {
  "/speedreader/AestheticFluidBg.min.js": {
    "content": "!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).Color4Bg={})}(this,(function(t){"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,r=Array(e);i<e;i++)r[i]=t[i];return r}function i(t,e,i){return e=h(e),l(t,u()?Reflect.construct(e,i||[],h(t).constructor):e.apply(t,i))}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function n(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,f(r.key),r)}}function s(t,e,i){return e&&n(t.prototype,e),i&&n(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}function a(){return a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,i){var r=function(t,e){for(;!{}.hasOwnProperty.call(t,e)&&null!==(t=h(t)););return t}(t,e);if(r){var n=Object.getOwnPropertyDescriptor(r,e);return n.get?n.get.call(arguments.length<3?t:i):n.value}},a.apply(null,arguments)}function h(t){return h=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},h(t)}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&c(t,e)}function u(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(u=function(){return!!t})()}function l(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function c(t,e){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},c(t,e)}function d(t){return function(t){if(Array.isArray(t))return e(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||v(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(t){var e=function(t,e){if("object"!=typeof t||!t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var r=i.call(t,e);if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t,"string");return"symbol"==typeof e?e:e+""}function g(t){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},g(t)}function v(t,i){if(t){if("string"==typeof t)return e(t,i);var r={}.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,i):void 0}}function p(t){var e="function"==typeof Map?new Map:void 0;return p=function(t){if(null===t||!function(t){try{return-1!==Function.toString.call(t).indexOf("[native code]")}catch(e){return"function"==typeof t}}(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,i)}function i(){return function(t,e,i){if(u())return Reflect.construct.apply(null,arguments);var r=[null];r.push.apply(r,e);var n=new(t.bind.apply(t,r));return i&&c(n,i.prototype),n}(t,arguments,h(this).constructor)}return i.prototype=Object.create(t.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),c(i,t)},p(t)}function m(t){var e=t[0],i=t[1],r=t[2];return Math.sqrt(e*e+i*i+r*r)}function y(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function _(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t}function b(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t}function x(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t}function E(t){var e=t[0],i=t[1],r=t[2];return e*e+i*i+r*r}function w(t,e){var i=e[0],r=e[1],n=e[2],s=i*i+r*r+n*n;return s>0&&(s=1/Math.sqrt(s)),t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function M(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function A(t,e,i){var r=e[0],n=e[1],s=e[2],a=i[0],h=i[1],o=i[2];return t[0]=n*o-s*h,t[1]=s*a-r*o,t[2]=r*h-n*a,t}var k,T,R=(k=[0,0,0],T=[0,0,0],function(t,e){y(k,t),y(T,e),w(k,k),w(T,T);var i=M(k,T);return i>1?0:i<-1?Math.PI:Math.acos(i)});var F=function(t){function e(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:n;return r(this,e),l(t=i(this,e,[n,s,a]),t)}return o(e,t),s(e,[{key:"x",get:function(){return this[0]},set:function(t){this[0]=t}},{key:"y",get:function(){return this[1]},set:function(t){this[1]=t}},{key:"z",get:function(){return this[2]},set:function(t){this[2]=t}},{key:"set",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t;return t.length?this.copy(t):(function(t,e,i,r){t[0]=e,t[1]=i,t[2]=r}(this,t,e,i),this)}},{key:"copy",value:function(t){return y(this,t),this}},{key:"add",value:function(t,e){return e?_(this,t,e):_(this,this,t),this}},{key:"sub",value:function(t,e){return e?b(this,t,e):b(this,this,t),this}},{key:"multiply",value:function(t){var e,i,r;return t.length?(i=this,r=t,(e=this)[0]=i[0]*r[0],e[1]=i[1]*r[1],e[2]=i[2]*r[2]):x(this,this,t),this}},{key:"divide",value:function(t){var e,i,r;return t.length?(i=this,r=t,(e=this)[0]=i[0]/r[0],e[1]=i[1]/r[1],e[2]=i[2]/r[2]):x(this,this,1/t),this}},{key:"inverse",value:function(){var t,e;return e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this,(t=this)[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],this}},{key:"len",value:function(){return m(this)}},{key:"distance",value:function(t){return t?(e=this,r=(i=t)[0]-e[0],n=i[1]-e[1],s=i[2]-e[2],Math.sqrt(r*r+n*n+s*s)):m(this);var e,i,r,n,s}},{key:"squaredLen",value:function(){return E(this)}},{key:"squaredDistance",value:function(t){return t?(e=this,r=(i=t)[0]-e[0],n=i[1]-e[1],s=i[2]-e[2],r*r+n*n+s*s):E(this);var e,i,r,n,s}},{key:"negate",value:function(){var t,e;return e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this,(t=this)[0]=-e[0],t[1]=-e[1],t[2]=-e[2],this}},{key:"cross",value:function(t,e){return e?A(this,t,e):A(this,this,t),this}},{key:"scale",value:function(t){return x(this,this,t),this}},{key:"normalize",value:function(){return w(this,this),this}},{key:"dot",value:function(t){return M(this,t)}},{key:"equals",value:function(t){return i=t,(e=this)[0]===i[0]&&e[1]===i[1]&&e[2]===i[2];var e,i}},{key:"applyMatrix3",value:function(t){var e,i,r,n,s,a;return e=this,r=t,n=(i=this)[0],s=i[1],a=i[2],e[0]=n*r[0]+s*r[3]+a*r[6],e[1]=n*r[1]+s*r[4]+a*r[7],e[2]=n*r[2]+s*r[5]+a*r[8],this}},{key:"applyMatrix4",value:function(t){var e,i,r,n,s,a,h;return e=this,r=t,n=(i=this)[0],s=i[1],a=i[2],h=(h=r[3]*n+r[7]*s+r[11]*a+r[15])||1,e[0]=(r[0]*n+r[4]*s+r[8]*a+r[12])/h,e[1]=(r[1]*n+r[5]*s+r[9]*a+r[13])/h,e[2]=(r[2]*n+r[6]*s+r[10]*a+r[14])/h,this}},{key:"scaleRotateMatrix4",value:function(t){var e,i,r,n,s,a,h;return e=this,r=t,n=(i=this)[0],s=i[1],a=i[2],h=(h=r[3]*n+r[7]*s+r[11]*a+r[15])||1,e[0]=(r[0]*n+r[4]*s+r[8]*a)/h,e[1]=(r[1]*n+r[5]*s+r[9]*a)/h,e[2]=(r[2]*n+r[6]*s+r[10]*a)/h,this}},{key:"applyQuaternion",value:function(t){return function(t,e,i){var r=e[0],n=e[1],s=e[2],a=i[0],h=i[1],o=i[2],u=h*s-o*n,l=o*r-a*s,c=a*n-h*r,d=h*c-o*l,f=o*u-a*c,g=a*l-h*u,v=2*i[3];u*=v,l*=v,c*=v,d*=2,f*=2,g*=2,t[0]=r+u+d,t[1]=n+l+f,t[2]=s+c+g}(this,this,t),this}},{key:"angle",value:function(t){return R(this,t)}},{key:"lerp",value:function(t,e){return function(t,e,i,r){var n=e[0],s=e[1],a=e[2];t[0]=n+r*(i[0]-n),t[1]=s+r*(i[1]-s),t[2]=a+r*(i[2]-a)}(this,this,t,e),this}},{key:"clone",value:function(){return new e(this[0],this[1],this[2])}},{key:"fromArray",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}},{key:"toArray",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}},{key:"transformDirection",value:function(t){var e=this[0],i=this[1],r=this[2];return this[0]=t[0]*e+t[4]*i+t[8]*r,this[1]=t[1]*e+t[5]*i+t[9]*r,this[2]=t[2]*e+t[6]*i+t[10]*r,this.normalize()}}])}(p(Array)),S=new F,C=1,P=1,B=!1,D=function(){return s((function t(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var n in r(this,t),e.canvas,this.gl=e,this.attributes=i,this.id=C++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state,i)this.addAttribute(n,i[n])}),[{key:"addAttribute",value:function(t,e){this.attributes[t]=e;var i=this;if(e.id=P++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.getX=function(t){return this.data[t*this.size]},e.getY=function(t){return this.data[t*this.size+1]},e.getZ=function(t){return this.data[t*this.size+2]},e.setXYZ=function(t,r,n,s){t*=this.size,this.data[t+0]=r,this.data[t+1]=n,this.data[t+2]=s,i.updateAttribute(e)},e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}},{key:"updateAttribute",value:function(t){var e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}},{key:"setIndex",value:function(t){this.addAttribute("index",t)}},{key:"setDrawRange",value:function(t,e){this.drawRange.start=t,this.drawRange.count=e}},{key:"setInstancedCount",value:function(t){this.instancedCount=t}},{key:"createVAO",value:function(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}},{key:"bindAttributes",value:function(t){var e=this;t.attributeLocations.forEach((function(t,i){var r=i.name,n=i.type;if(e.attributes[r]){var s=e.attributes[r];e.gl.bindBuffer(s.target,s.buffer),e.glState.boundBuffer=s.buffer;var a=1;35674===n&&(a=2),35675===n&&(a=3),35676===n&&(a=4);for(var h=s.size/a,o=1===a?0:a*a*4,u=1===a?0:4*a,l=0;l<a;l++)e.gl.vertexAttribPointer(t+l,h,s.type,s.normalized,s.stride+o,s.offset+l*u),e.gl.enableVertexAttribArray(t+l),e.gl.renderer.vertexAttribDivisor(t+l,s.divisor)}})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}},{key:"draw",value:function(t){var e,i=this,r=t.program,n=t.mode,s=void 0===n?this.gl.TRIANGLES:n;this.gl.renderer.currentGeometry!=="".concat(this.id,"_").concat(r.attributeOrder)&&(this.VAOs[r.attributeOrder]||this.createVAO(r),this.gl.renderer.bindVertexArray(this.VAOs[r.attributeOrder]),this.gl.renderer.currentGeometry="".concat(this.id,"_").concat(r.attributeOrder)),r.attributeLocations.forEach((function(t,e){var r=e.name,n=i.attributes[r];n.needsUpdate&&i.updateAttribute(n)}));var a=2;(null===(e=this.attributes.index)||void 0===e?void 0:e.type)===this.gl.UNSIGNED_INT&&(a=4),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(s,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*a,this.instancedCount):this.gl.renderer.drawArraysInstanced(s,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(s,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*a):this.gl.drawArrays(s,this.drawRange.start,this.drawRange.count)}},{key:"getPosition",value:function(){var t=this.attributes.position;return t.data?t:B?void 0:B=!0}},{key:"computeBoundingBox",value:function(t){t||(t=this.getPosition());var e=t.data,i=t.size;this.bounds||(this.bounds={min:new F,max:new F,center:new F,scale:new F,radius:1/0});var r=this.bounds.min,n=this.bounds.max,s=this.bounds.center,a=this.bounds.scale;r.set(1/0),n.set(-1/0);for(var h=0,o=e.length;h<o;h+=i){var u=e[h],l=e[h+1],c=e[h+2];r.x=Math.min(u,r.x),r.y=Math.min(l,r.y),r.z=Math.min(c,r.z),n.x=Math.max(u,n.x),n.y=Math.max(l,n.y),n.z=Math.max(c,n.z)}a.sub(n,r),s.add(r,n).divide(2)}},{key:"computeBoundingSphere",value:function(t){t||(t=this.getPosition());var e=t.data,i=t.size;this.bounds||this.computeBoundingBox(t);for(var r=0,n=0,s=e.length;n<s;n+=i)S.fromArray(e,n),r=Math.max(r,this.bounds.center.squaredDistance(S));this.bounds.radius=Math.sqrt(r)}},{key:"remove",value:function(){for(var t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(var e in this.attributes)this.gl.deleteBuffer(this.attributes[e].buffer),delete this.attributes[e]}}])}(),O=1,N={},U=function(){return s((function t(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=i.vertex,s=i.fragment,a=i.uniforms,h=void 0===a?{}:a,o=i.transparent,u=void 0!==o&&o,l=i.cullFace,c=void 0===l?e.BACK:l,d=i.frontFace,f=void 0===d?e.CCW:d,g=i.depthTest,v=void 0===g||g,p=i.depthWrite,m=void 0===p||p,y=i.depthFunc,_=void 0===y?e.LEQUAL:y;r(this,t),e.canvas,this.gl=e,this.uniforms=h,this.id=O++,this.transparent=u,this.cullFace=c,this.frontFace=f,this.depthTest=v,this.depthWrite=m,this.depthFunc=_,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA)),this.vertexShader=e.createShader(e.VERTEX_SHADER),this.fragmentShader=e.createShader(e.FRAGMENT_SHADER),this.program=e.createProgram(),e.attachShader(this.program,this.vertexShader),e.attachShader(this.program,this.fragmentShader),this.setShaders({vertex:n,fragment:s})}),[{key:"setShaders",value:function(t){var e=t.vertex,i=t.fragment;if(e&&(this.gl.shaderSource(this.vertexShader,e),this.gl.compileShader(this.vertexShader),this.gl.getShaderInfoLog(this.vertexShader)),i&&(this.gl.shaderSource(this.fragmentShader,i),this.gl.compileShader(this.fragmentShader),this.gl.getShaderInfoLog(this.fragmentShader)),this.gl.linkProgram(this.program),this.gl.getProgramParameter(this.program,this.gl.LINK_STATUS)){this.uniformLocations=new Map;for(var r=this.gl.getProgramParameter(this.program,this.gl.ACTIVE_UNIFORMS),n=0;n<r;n++){var s=this.gl.getActiveUniform(this.program,n);this.uniformLocations.set(s,this.gl.getUniformLocation(this.program,s.name));var a=s.name.match(/(\w+)/g);s.uniformName=a[0],s.nameComponents=a.slice(1)}this.attributeLocations=new Map;for(var h=[],o=this.gl.getProgramParameter(this.program,this.gl.ACTIVE_ATTRIBUTES),u=0;u<o;u++){var l=this.gl.getActiveAttrib(this.program,u),c=this.gl.getAttribLocation(this.program,l.name);-1!==c&&(h[c]=l.name,this.attributeLocations.set(l,c))}this.attributeOrder=h.join("")}}},{key:"setBlendFunc",value:function(t,e,i,r){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=i,this.blendFunc.dstAlpha=r,t&&(this.transparent=!0)}},{key:"setBlendEquation",value:function(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}},{key:"applyState",value:function(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}},{key:"use",value:function(){var t=this,e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).flipFaces,i=void 0!==e&&e,r=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach((function(e,i){var n,s=t.uniforms[i.uniformName],a=function(t,e){var i="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!i){if(Array.isArray(t)||(i=v(t))||e){i&&(t=i);var r=0,n=function(){};return{s:n,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,h=!1;return{s:function(){i=i.call(t)},n:function(){var t=i.next();return a=t.done,t},e:function(t){h=!0,s=t},f:function(){try{a||null==i.return||i.return()}finally{if(h)throw s}}}}(i.nameComponents);try{for(a.s();!(n=a.n()).done;){var h=n.value;if(!s)break;if(!(h in s)){if(Array.isArray(s.value))break;s=void 0;break}s=s[h]}}catch(t){a.e(t)}finally{a.f()}if(!s)return z("Active uniform ".concat(i.name," has not been supplied"));if(s&&void 0===s.value)return z("".concat(i.name," uniform is missing a value parameter"));if(s.value.texture)return r+=1,s.value.update(r),I(t.gl,i.type,e,r);if(s.value.length&&s.value[0].texture){var o=[];return s.value.forEach((function(t){r+=1,t.update(r),o.push(r)})),I(t.gl,i.type,e,o)}I(t.gl,i.type,e,s.value)})),this.applyState(),i&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}},{key:"remove",value:function(){this.gl.deleteProgram(this.program)}}])}();function I(t,e,i,r){r=r.length?function(t){var e=t.length,i=t[0].length;if(void 0===i)return t;var r=e*i,n=N[r];n||(N[r]=n=new Float32Array(r));for(var s=0;s<e;s++)n.set(t[s],s*i);return n}(r):r;var n=t.renderer.state.uniformLocations.get(i);if(r.length)if(void 0===n||n.length!==r.length)t.renderer.state.uniformLocations.set(i,r.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(var i=0,r=t.length;i<r;i++)if(t[i]!==e[i])return!1;return!0}(n,r))return;n.set?n.set(r):function(t,e){for(var i=0,r=t.length;i<r;i++)t[i]=e[i]}(n,r),t.renderer.state.uniformLocations.set(i,n)}else{if(n===r)return;t.renderer.state.uniformLocations.set(i,r)}switch(e){case 5126:return r.length?t.uniform1fv(i,r):t.uniform1f(i,r);case 35664:return t.uniform2fv(i,r);case 35665:return t.uniform3fv(i,r);case 35666:return t.uniform4fv(i,r);case 35670:case 5124:case 35678:case 35680:return r.length?t.uniform1iv(i,r):t.uniform1i(i,r);case 35671:case 35667:return t.uniform2iv(i,r);case 35672:case 35668:return t.uniform3iv(i,r);case 35673:case 35669:return t.uniform4iv(i,r);case 35674:return t.uniformMatrix2fv(i,!1,r);case 35675:return t.uniformMatrix3fv(i,!1,r);case 35676:return t.uniformMatrix4fv(i,!1,r)}}var L=0;function z(t){L>100||L++}var X=new F,j=1,G=function(){return s((function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=e.canvas,n=void 0===i?document.createElement("canvas"):i,s=e.width,a=void 0===s?300:s,h=e.height,o=void 0===h?150:h,u=e.dpr,l=void 0===u?1:u,c=e.alpha,d=void 0!==c&&c,f=e.depth,g=void 0===f||f,v=e.stencil,p=void 0!==v&&v,m=e.antialias,y=void 0===m||m,_=e.premultipliedAlpha,b=void 0!==_&&_,x=e.preserveDrawingBuffer,E=void 0===x||x,w=e.powerPreference,M=void 0===w?"default":w,A=e.autoClear,k=void 0===A||A,T=e.webgl,R=void 0===T?2:T;r(this,t);var F={alpha:d,depth:g,stencil:p,antialias:y,premultipliedAlpha:b,preserveDrawingBuffer:E,powerPreference:M};this.dpr=l,this.alpha=d,this.color=!0,this.depth=g,this.stencil=p,this.premultipliedAlpha=b,this.autoClear=k,this.id=j++,2===R&&(this.gl=n.getContext("webgl2",F)),this.isWebgl2=!!this.gl,this.gl||(this.gl=n.getContext("webgl",F)),this.gl,this.gl.renderer=this,this.setSize(a,o),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=!1,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LEQUAL,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}),[{key:"setSize",value:function(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,this.gl.canvas.style&&Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}},{key:"setViewport",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.state.viewport.x=i,this.state.viewport.y=r,this.gl.viewport(i,r,t,e))}},{key:"setScissor",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;this.gl.scissor(i,r,t,e)}},{key:"enable",value:function(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}},{key:"disable",value:function(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}},{key:"setBlendFunc",value:function(t,e,i,r){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===i&&this.state.blendFunc.dstAlpha===r||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=i,this.state.blendFunc.dstAlpha=r,void 0!==i?this.gl.blendFuncSeparate(t,e,i,r):this.gl.blendFunc(t,e))}},{key:"setBlendEquation",value:function(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}},{key:"setCullFace",value:function(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}},{key:"setFrontFace",value:function(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}},{key:"setDepthMask",value:function(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}},{key:"setDepthFunc",value:function(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}},{key:"activeTexture",value:function(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}},{key:"bindFramebuffer",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.target,i=void 0===e?this.gl.FRAMEBUFFER:e,r=t.buffer,n=void 0===r?null:r;this.state.framebuffer!==n&&(this.state.framebuffer=n,this.gl.bindFramebuffer(i,n))}},{key:"getExtension",value:function(t,e,i){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][i].bind(this.extensions[t]):null:this.extensions[t])}},{key:"sortOpaque",value:function(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}},{key:"sortTransparent",value:function(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}},{key:"sortUI",value:function(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}},{key:"getRenderList",value:function(t){var e=t.scene,i=t.camera,r=t.frustumCull,n=t.sort,s=[];if(i&&r&&i.updateFrustum(),e.traverse((function(t){if(!t.visible)return!0;t.draw&&(r&&t.frustumCulled&&i&&!i.frustumIntersectsMesh(t)||s.push(t))})),n){var a=[],h=[],o=[];s.forEach((function(t){t.program.transparent?t.program.depthTest?h.push(t):o.push(t):a.push(t),t.zDepth=0,0===t.renderOrder&&t.program.depthTest&&i&&(t.worldMatrix.getTranslation(X),X.applyMatrix4(i.projectionViewMatrix),t.zDepth=X.z)})),a.sort(this.sortOpaque),h.sort(this.sortTransparent),o.sort(this.sortUI),s=a.concat(h,o)}return s}},{key:"render",value:function(t){var e=t.scene,i=t.camera,r=t.target,n=void 0===r?null:r,s=t.update,a=void 0===s||s,h=t.sort,o=void 0===h||h,u=t.frustumCull,l=void 0===u||u,c=t.clear;null===n?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(n),this.setViewport(n.width,n.height)),(c||this.autoClear&&!1!==c)&&(!this.depth||n&&!n.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),a&&e.updateMatrixWorld(),i&&i.updateMatrixWorld(),this.getRenderList({scene:e,camera:i,frustumCull:l,sort:o}).forEach((function(t){t.draw({camera:i})}))}}])}();function q(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function W(t,e,i,r,n){return t[0]=e,t[1]=i,t[2]=r,t[3]=n,t}function V(t,e){var i=e[0],r=e[1],n=e[2],s=e[3],a=i*i+r*r+n*n+s*s;return a>0&&(a=1/Math.sqrt(a)),t[0]=i*a,t[1]=r*a,t[2]=n*a,t[3]=s*a,t}function Y(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function H(t,e,i){var r=e[0],n=e[1],s=e[2],a=e[3],h=i[0],o=i[1],u=i[2],l=i[3];return t[0]=r*l+a*h+n*u-s*o,t[1]=n*l+a*o+s*h-r*u,t[2]=s*l+a*u+r*o-n*h,t[3]=a*l-r*h-n*o-s*u,t}var Z=q,Q=W,K=Y,$=V,J=function(t){function e(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,h=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;r(this,e),(t=i(this,e,[n,s,a,h])).onChange=function(){},t._target=t;var o=["0","1","2","3"];return l(t,new Proxy(t,{set:function(t,e){var i=Reflect.set.apply(Reflect,arguments);return i&&o.includes(e)&&t.onChange(),i}}))}return o(e,t),s(e,[{key:"x",get:function(){return this[0]},set:function(t){this._target[0]=t,this.onChange()}},{key:"y",get:function(){return this[1]},set:function(t){this._target[1]=t,this.onChange()}},{key:"z",get:function(){return this[2]},set:function(t){this._target[2]=t,this.onChange()}},{key:"w",get:function(){return this[3]},set:function(t){this._target[3]=t,this.onChange()}},{key:"identity",value:function(){var t;return(t=this._target)[0]=0,t[1]=0,t[2]=0,t[3]=1,this.onChange(),this}},{key:"set",value:function(t,e,i,r){return t.length?this.copy(t):(Q(this._target,t,e,i,r),this.onChange(),this)}},{key:"rotateX",value:function(t){return function(t,e,i){i*=.5;var r=e[0],n=e[1],s=e[2],a=e[3],h=Math.sin(i),o=Math.cos(i);t[0]=r*o+a*h,t[1]=n*o+s*h,t[2]=s*o-n*h,t[3]=a*o-r*h}(this._target,this._target,t),this.onChange(),this}},{key:"rotateY",value:function(t){return function(t,e,i){i*=.5;var r=e[0],n=e[1],s=e[2],a=e[3],h=Math.sin(i),o=Math.cos(i);t[0]=r*o-s*h,t[1]=n*o+a*h,t[2]=s*o+r*h,t[3]=a*o-n*h}(this._target,this._target,t),this.onChange(),this}},{key:"rotateZ",value:function(t){return function(t,e,i){i*=.5;var r=e[0],n=e[1],s=e[2],a=e[3],h=Math.sin(i),o=Math.cos(i);t[0]=r*o+n*h,t[1]=n*o-r*h,t[2]=s*o+a*h,t[3]=a*o-s*h}(this._target,this._target,t),this.onChange(),this}},{key:"inverse",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._target;return function(t,e){var i=e[0],r=e[1],n=e[2],s=e[3],a=i*i+r*r+n*n+s*s,h=a?1/a:0;t[0]=-i*h,t[1]=-r*h,t[2]=-n*h,t[3]=s*h}(this._target,t),this.onChange(),this}},{key:"conjugate",value:function(){var t,e,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._target;return t=this._target,e=i,t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],this.onChange(),this}},{key:"copy",value:function(t){return Z(this._target,t),this.onChange(),this}},{key:"normalize",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._target;return $(this._target,t),this.onChange(),this}},{key:"multiply",value:function(t,e){return e?H(this._target,t,e):H(this._target,this._target,t),this.onChange(),this}},{key:"dot",value:function(t){return K(this._target,t)}},{key:"fromMatrix3",value:function(t){return function(t,e){var i,r=e[0]+e[4]+e[8];if(r>0)i=Math.sqrt(r+1),t[3]=.5*i,i=.5/i,t[0]=(e[5]-e[7])*i,t[1]=(e[6]-e[2])*i,t[2]=(e[1]-e[3])*i;else{var n=0;e[4]>e[0]&&(n=1),e[8]>e[3*n+n]&&(n=2);var s=(n+1)%3,a=(n+2)%3;i=Math.sqrt(e[3*n+n]-e[3*s+s]-e[3*a+a]+1),t[n]=.5*i,i=.5/i,t[3]=(e[3*s+a]-e[3*a+s])*i,t[s]=(e[3*s+n]+e[3*n+s])*i,t[a]=(e[3*a+n]+e[3*n+a])*i}}(this._target,t),this.onChange(),this}},{key:"fromEuler",value:function(t,e){return function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"YXZ",r=Math.sin(.5*e[0]),n=Math.cos(.5*e[0]),s=Math.sin(.5*e[1]),a=Math.cos(.5*e[1]),h=Math.sin(.5*e[2]),o=Math.cos(.5*e[2]);"XYZ"===i?(t[0]=r*a*o+n*s*h,t[1]=n*s*o-r*a*h,t[2]=n*a*h+r*s*o,t[3]=n*a*o-r*s*h):"YXZ"===i?(t[0]=r*a*o+n*s*h,t[1]=n*s*o-r*a*h,t[2]=n*a*h-r*s*o,t[3]=n*a*o+r*s*h):"ZXY"===i?(t[0]=r*a*o-n*s*h,t[1]=n*s*o+r*a*h,t[2]=n*a*h+r*s*o,t[3]=n*a*o-r*s*h):"ZYX"===i?(t[0]=r*a*o-n*s*h,t[1]=n*s*o+r*a*h,t[2]=n*a*h-r*s*o,t[3]=n*a*o+r*s*h):"YZX"===i?(t[0]=r*a*o+n*s*h,t[1]=n*s*o+r*a*h,t[2]=n*a*h-r*s*o,t[3]=n*a*o-r*s*h):"XZY"===i&&(t[0]=r*a*o-n*s*h,t[1]=n*s*o-r*a*h,t[2]=n*a*h+r*s*o,t[3]=n*a*o+r*s*h)}(this._target,t,t.order),e||this.onChange(),this}},{key:"fromAxisAngle",value:function(t,e){return function(t,e,i){i*=.5;var r=Math.sin(i);t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=Math.cos(i)}(this._target,t,e),this.onChange(),this}},{key:"slerp",value:function(t,e){return function(t,e,i,r){var n,s,a,h,o,u=e[0],l=e[1],c=e[2],d=e[3],f=i[0],g=i[1],v=i[2],p=i[3];(s=u*f+l*g+c*v+d*p)<0&&(s=-s,f=-f,g=-g,v=-v,p=-p),1-s>1e-6?(n=Math.acos(s),a=Math.sin(n),h=Math.sin((1-r)*n)/a,o=Math.sin(r*n)/a):(h=1-r,o=r),t[0]=h*u+o*f,t[1]=h*l+o*g,t[2]=h*c+o*v,t[3]=h*d+o*p}(this._target,this._target,t,e),this.onChange(),this}},{key:"fromArray",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return this._target[0]=t[e],this._target[1]=t[e+1],this._target[2]=t[e+2],this._target[3]=t[e+3],this.onChange(),this}},{key:"toArray",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}])}(p(Array));function tt(t){var e=t[0],i=t[1],r=t[2],n=t[3],s=t[4],a=t[5],h=t[6],o=t[7],u=t[8],l=t[9],c=t[10],d=t[11],f=t[12],g=t[13],v=t[14],p=t[15];return(e*a-i*s)*(c*p-d*v)-(e*h-r*s)*(l*p-d*g)+(e*o-n*s)*(l*v-c*g)+(i*h-r*a)*(u*p-d*f)-(i*o-n*a)*(u*v-c*f)+(r*o-n*h)*(u*g-l*f)}function et(t,e,i){var r=e[0],n=e[1],s=e[2],a=e[3],h=e[4],o=e[5],u=e[6],l=e[7],c=e[8],d=e[9],f=e[10],g=e[11],v=e[12],p=e[13],m=e[14],y=e[15],_=i[0],b=i[1],x=i[2],E=i[3];return t[0]=_*r+b*h+x*c+E*v,t[1]=_*n+b*o+x*d+E*p,t[2]=_*s+b*u+x*f+E*m,t[3]=_*a+b*l+x*g+E*y,_=i[4],b=i[5],x=i[6],E=i[7],t[4]=_*r+b*h+x*c+E*v,t[5]=_*n+b*o+x*d+E*p,t[6]=_*s+b*u+x*f+E*m,t[7]=_*a+b*l+x*g+E*y,_=i[8],b=i[9],x=i[10],E=i[11],t[8]=_*r+b*h+x*c+E*v,t[9]=_*n+b*o+x*d+E*p,t[10]=_*s+b*u+x*f+E*m,t[11]=_*a+b*l+x*g+E*y,_=i[12],b=i[13],x=i[14],E=i[15],t[12]=_*r+b*h+x*c+E*v,t[13]=_*n+b*o+x*d+E*p,t[14]=_*s+b*u+x*f+E*m,t[15]=_*a+b*l+x*g+E*y,t}function it(t,e){var i=e[0],r=e[1],n=e[2],s=e[4],a=e[5],h=e[6],o=e[8],u=e[9],l=e[10];return t[0]=Math.hypot(i,r,n),t[1]=Math.hypot(s,a,h),t[2]=Math.hypot(o,u,l),t}var rt,nt=(rt=[1,1,1],function(t,e){var i=rt;it(i,e);var r=1/i[0],n=1/i[1],s=1/i[2],a=e[0]*r,h=e[1]*n,o=e[2]*s,u=e[4]*r,l=e[5]*n,c=e[6]*s,d=e[8]*r,f=e[9]*n,g=e[10]*s,v=a+l+g,p=0;return v>0?(p=2*Math.sqrt(v+1),t[3]=.25*p,t[0]=(c-f)/p,t[1]=(d-o)/p,t[2]=(h-u)/p):a>l&&a>g?(p=2*Math.sqrt(1+a-l-g),t[3]=(c-f)/p,t[0]=.25*p,t[1]=(h+u)/p,t[2]=(d+o)/p):l>g?(p=2*Math.sqrt(1+l-a-g),t[3]=(d-o)/p,t[0]=(h+u)/p,t[1]=.25*p,t[2]=(c+f)/p):(p=2*Math.sqrt(1+g-a-l),t[3]=(h-u)/p,t[0]=(d+o)/p,t[1]=(c+f)/p,t[2]=.25*p),t});function st(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t[9]=e[9]+i[9],t[10]=e[10]+i[10],t[11]=e[11]+i[11],t[12]=e[12]+i[12],t[13]=e[13]+i[13],t[14]=e[14]+i[14],t[15]=e[15]+i[15],t}function at(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t[9]=e[9]-i[9],t[10]=e[10]-i[10],t[11]=e[11]-i[11],t[12]=e[12]-i[12],t[13]=e[13]-i[13],t[14]=e[14]-i[14],t[15]=e[15]-i[15],t}var ht=function(t){function e(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,h=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,d=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,f=arguments.length>8&&void 0!==arguments[8]?arguments[8]:0,g=arguments.length>9&&void 0!==arguments[9]?arguments[9]:0,v=arguments.length>10&&void 0!==arguments[10]?arguments[10]:1,p=arguments.length>11&&void 0!==arguments[11]?arguments[11]:0,m=arguments.length>12&&void 0!==arguments[12]?arguments[12]:0,y=arguments.length>13&&void 0!==arguments[13]?arguments[13]:0,_=arguments.length>14&&void 0!==arguments[14]?arguments[14]:0,b=arguments.length>15&&void 0!==arguments[15]?arguments[15]:1;return r(this,e),l(t=i(this,e,[n,s,a,h,o,u,c,d,f,g,v,p,m,y,_,b]),t)}return o(e,t),s(e,[{key:"x",get:function(){return this[12]},set:function(t){this[12]=t}},{key:"y",get:function(){return this[13]},set:function(t){this[13]=t}},{key:"z",get:function(){return this[14]},set:function(t){this[14]=t}},{key:"w",get:function(){return this[15]},set:function(t){this[15]=t}},{key:"set",value:function(t,e,i,r,n,s,a,h,o,u,l,c,d,f,g,v){return t.length?this.copy(t):(function(t,e,i,r,n,s,a,h,o,u,l,c,d,f,g,v,p){t[0]=e,t[1]=i,t[2]=r,t[3]=n,t[4]=s,t[5]=a,t[6]=h,t[7]=o,t[8]=u,t[9]=l,t[10]=c,t[11]=d,t[12]=f,t[13]=g,t[14]=v,t[15]=p}(this,t,e,i,r,n,s,a,h,o,u,l,c,d,f,g,v),this)}},{key:"translate",value:function(t){return function(t,e,i){var r,n,s,a,h,o,u,l,c,d,f,g,v=i[0],p=i[1],m=i[2];e===t?(t[12]=e[0]*v+e[4]*p+e[8]*m+e[12],t[13]=e[1]*v+e[5]*p+e[9]*m+e[13],t[14]=e[2]*v+e[6]*p+e[10]*m+e[14],t[15]=e[3]*v+e[7]*p+e[11]*m+e[15]):(r=e[0],n=e[1],s=e[2],a=e[3],h=e[4],o=e[5],u=e[6],l=e[7],c=e[8],d=e[9],f=e[10],g=e[11],t[0]=r,t[1]=n,t[2]=s,t[3]=a,t[4]=h,t[5]=o,t[6]=u,t[7]=l,t[8]=c,t[9]=d,t[10]=f,t[11]=g,t[12]=r*v+h*p+c*m+e[12],t[13]=n*v+o*p+d*m+e[13],t[14]=s*v+u*p+f*m+e[14],t[15]=a*v+l*p+g*m+e[15])}(this,arguments.length>1&&void 0!==arguments[1]?arguments[1]:this,t),this}},{key:"rotate",value:function(t,e){return function(t,e,i,r){var n,s,a,h,o,u,l,c,d,f,g,v,p,m,y,_,b,x,E,w,M,A,k,T,R=r[0],F=r[1],S=r[2],C=Math.hypot(R,F,S);Math.abs(C)<1e-6||(R*=C=1/C,F*=C,S*=C,n=Math.sin(i),a=1-(s=Math.cos(i)),h=e[0],o=e[1],u=e[2],l=e[3],c=e[4],d=e[5],f=e[6],g=e[7],v=e[8],p=e[9],m=e[10],y=e[11],_=R*R*a+s,b=F*R*a+S*n,x=S*R*a-F*n,E=R*F*a-S*n,w=F*F*a+s,M=S*F*a+R*n,A=R*S*a+F*n,k=F*S*a-R*n,T=S*S*a+s,t[0]=h*_+c*b+v*x,t[1]=o*_+d*b+p*x,t[2]=u*_+f*b+m*x,t[3]=l*_+g*b+y*x,t[4]=h*E+c*w+v*M,t[5]=o*E+d*w+p*M,t[6]=u*E+f*w+m*M,t[7]=l*E+g*w+y*M,t[8]=h*A+c*k+v*T,t[9]=o*A+d*k+p*T,t[10]=u*A+f*k+m*T,t[11]=l*A+g*k+y*T,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]))}(this,arguments.length>2&&void 0!==arguments[2]?arguments[2]:this,t,e),this}},{key:"scale",value:function(t){return function(t,e,i){var r=i[0],n=i[1],s=i[2];t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*s,t[9]=e[9]*s,t[10]=e[10]*s,t[11]=e[11]*s,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]}(this,arguments.length>1&&void 0!==arguments[1]?arguments[1]:this,"number"==typeof t?[t,t,t]:t),this}},{key:"add",value:function(t,e){return e?st(this,t,e):st(this,this,t),this}},{key:"sub",value:function(t,e){return e?at(this,t,e):at(this,this,t),this}},{key:"multiply",value:function(t,e){var i,r,n;return t.length?e?et(this,t,e):et(this,this,t):(r=this,n=t,(i=this)[0]=r[0]*n,i[1]=r[1]*n,i[2]=r[2]*n,i[3]=r[3]*n,i[4]=r[4]*n,i[5]=r[5]*n,i[6]=r[6]*n,i[7]=r[7]*n,i[8]=r[8]*n,i[9]=r[9]*n,i[10]=r[10]*n,i[11]=r[11]*n,i[12]=r[12]*n,i[13]=r[13]*n,i[14]=r[14]*n,i[15]=r[15]*n),this}},{key:"identity",value:function(){var t;return(t=this)[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}},{key:"copy",value:function(t){var e,i;return i=t,(e=this)[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this}},{key:"fromPerspective",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(t,e,i,r,n){var s=1/Math.tan(e/2),a=1/(r-n);t[0]=s/i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(n+r)*a,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*n*r*a,t[15]=0}(this,t.fov,t.aspect,t.near,t.far),this}},{key:"fromOrthogonal",value:function(t){return function(t,e,i,r,n,s,a){var h=1/(e-i),o=1/(r-n),u=1/(s-a);t[0]=-2*h,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*u,t[11]=0,t[12]=(e+i)*h,t[13]=(n+r)*o,t[14]=(a+s)*u,t[15]=1}(this,t.left,t.right,t.bottom,t.top,t.near,t.far),this}},{key:"fromQuaternion",value:function(t){return function(t,e){var i=e[0],r=e[1],n=e[2],s=e[3],a=i+i,h=r+r,o=n+n,u=i*a,l=r*a,c=r*h,d=n*a,f=n*h,g=n*o,v=s*a,p=s*h,m=s*o;t[0]=1-c-g,t[1]=l+m,t[2]=d-p,t[3]=0,t[4]=l-m,t[5]=1-u-g,t[6]=f+v,t[7]=0,t[8]=d+p,t[9]=f-v,t[10]=1-u-c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1}(this,t),this}},{key:"setPosition",value:function(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}},{key:"inverse",value:function(){var t,e,i,r,n,s,a,h,o,u,l,c,d,f,g,v,p,m,y,_,b,x,E,w,M,A,k,T,R,F,S;return t=this,i=(e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this)[0],r=e[1],n=e[2],s=e[3],a=e[4],h=e[5],o=e[6],u=e[7],l=e[8],c=e[9],d=e[10],f=e[11],g=e[12],v=e[13],p=e[14],m=e[15],(S=(y=i*h-r*a)*(F=d*m-f*p)-(_=i*o-n*a)*(R=c*m-f*v)+(b=i*u-s*a)*(T=c*p-d*v)+(x=r*o-n*h)*(k=l*m-f*g)-(E=r*u-s*h)*(A=l*p-d*g)+(w=n*u-s*o)*(M=l*v-c*g))&&(S=1/S,t[0]=(h*F-o*R+u*T)*S,t[1]=(n*R-r*F-s*T)*S,t[2]=(v*w-p*E+m*x)*S,t[3]=(d*E-c*w-f*x)*S,t[4]=(o*k-a*F-u*A)*S,t[5]=(i*F-n*k+s*A)*S,t[6]=(p*b-g*w-m*_)*S,t[7]=(l*w-d*b+f*_)*S,t[8]=(a*R-h*k+u*M)*S,t[9]=(r*k-i*R-s*M)*S,t[10]=(g*E-v*b+m*y)*S,t[11]=(c*b-l*E-f*y)*S,t[12]=(h*A-a*T-o*M)*S,t[13]=(i*T-r*A+n*M)*S,t[14]=(v*_-g*x-p*y)*S,t[15]=(l*x-c*_+d*y)*S),this}},{key:"compose",value:function(t,e,i){var r,n,s,a,h,o,u,l,c,d,f,g,v,p,m,y,_,b,x,E,w,M,A;return n=e,s=i,a=this,h=(r=t)[0],o=r[1],u=r[2],l=r[3],g=h*(c=h+h),v=h*(d=o+o),p=h*(f=u+u),m=o*d,y=o*f,_=u*f,b=l*c,x=l*d,E=l*f,w=s[0],M=s[1],A=s[2],a[0]=(1-(m+_))*w,a[1]=(v+E)*w,a[2]=(p-x)*w,a[3]=0,a[4]=(v-E)*M,a[5]=(1-(g+_))*M,a[6]=(y+b)*M,a[7]=0,a[8]=(p+x)*A,a[9]=(y-b)*A,a[10]=(1-(g+m))*A,a[11]=0,a[12]=n[0],a[13]=n[1],a[14]=n[2],a[15]=1,this}},{key:"decompose",value:function(t,e,i){return function(t,e,i,r){var n=m([t[0],t[1],t[2]]),s=m([t[4],t[5],t[6]]),a=m([t[8],t[9],t[10]]);tt(t)<0&&(n=-n),i[0]=t[12],i[1]=t[13],i[2]=t[14];var h=t.slice(),o=1/n,u=1/s,l=1/a;h[0]*=o,h[1]*=o,h[2]*=o,h[4]*=u,h[5]*=u,h[6]*=u,h[8]*=l,h[9]*=l,h[10]*=l,nt(e,h),r[0]=n,r[1]=s,r[2]=a}(this,t,e,i),this}},{key:"getRotation",value:function(t){return nt(t,this),this}},{key:"getTranslation",value:function(t){var e,i;return i=this,(e=t)[0]=i[12],e[1]=i[13],e[2]=i[14],this}},{key:"getScaling",value:function(t){return it(t,this),this}},{key:"getMaxScaleOnAxis",value:function(){return e=(t=this)[0],i=t[1],r=t[2],n=t[4],s=t[5],a=t[6],h=t[8],o=t[9],u=t[10],l=e*e+i*i+r*r,c=n*n+s*s+a*a,d=h*h+o*o+u*u,Math.sqrt(Math.max(l,c,d));var t,e,i,r,n,s,a,h,o,u,l,c,d}},{key:"lookAt",value:function(t,e,i){return function(t,e,i,r){var n=e[0],s=e[1],a=e[2],h=r[0],o=r[1],u=r[2],l=n-i[0],c=s-i[1],d=a-i[2],f=l*l+c*c+d*d;0===f?d=1:(l*=f=1/Math.sqrt(f),c*=f,d*=f);var g=o*d-u*c,v=u*l-h*d,p=h*c-o*l;0==(f=g*g+v*v+p*p)&&(u?h+=1e-6:o?u+=1e-6:o+=1e-6,f=(g=o*d-u*c)*g+(v=u*l-h*d)*v+(p=h*c-o*l)*p),g*=f=1/Math.sqrt(f),v*=f,p*=f,t[0]=g,t[1]=v,t[2]=p,t[3]=0,t[4]=c*p-d*v,t[5]=d*g-l*p,t[6]=l*v-c*g,t[7]=0,t[8]=l,t[9]=c,t[10]=d,t[11]=0,t[12]=n,t[13]=s,t[14]=a,t[15]=1}(this,t,e,i),this}},{key:"determinant",value:function(){return tt(this)}},{key:"fromArray",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}},{key:"toArray",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}])}(p(Array));var ot=new ht,ut=function(t){function e(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:n,h=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"YXZ";r(this,e),(t=i(this,e,[n,s,a])).order=h,t.onChange=function(){},t._target=t;var o=["0","1","2"];return l(t,new Proxy(t,{set:function(t,e){var i=Reflect.set.apply(Reflect,arguments);return i&&o.includes(e)&&t.onChange(),i}}))}return o(e,t),s(e,[{key:"x",get:function(){return this[0]},set:function(t){this._target[0]=t,this.onChange()}},{key:"y",get:function(){return this[1]},set:function(t){this._target[1]=t,this.onChange()}},{key:"z",get:function(){return this[2]},set:function(t){this._target[2]=t,this.onChange()}},{key:"set",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t;return t.length?this.copy(t):(this._target[0]=t,this._target[1]=e,this._target[2]=i,this.onChange(),this)}},{key:"copy",value:function(t){return this._target[0]=t[0],this._target[1]=t[1],this._target[2]=t[2],this.onChange(),this}},{key:"reorder",value:function(t){return this._target.order=t,this.onChange(),this}},{key:"fromRotationMatrix",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.order;return function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"YXZ";"XYZ"===i?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===i?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===i?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===i?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===i?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===i&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0))}(this._target,t,e),this.onChange(),this}},{key:"fromQuaternion",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.order,i=arguments.length>2?arguments[2]:void 0;return ot.fromQuaternion(t),this._target.fromRotationMatrix(ot,e),i||this.onChange(),this}},{key:"fromArray",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return this._target[0]=t[e],this._target[1]=t[e+1],this._target[2]=t[e+2],this}},{key:"toArray",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}])}(p(Array)),lt=function(){return s((function t(){var e=this;r(this,t),this.parent=null,this.children=[],this.visible=!0,this.matrix=new ht,this.worldMatrix=new ht,this.matrixAutoUpdate=!0,this.worldMatrixNeedsUpdate=!1,this.position=new F,this.quaternion=new J,this.scale=new F(1),this.rotation=new ut,this.up=new F(0,1,0),this.rotation._target.onChange=function(){return e.quaternion.fromEuler(e.rotation,!0)},this.quaternion._target.onChange=function(){return e.rotation.fromQuaternion(e.quaternion,void 0,!0)}}),[{key:"setParent",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}},{key:"addChild",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}},{key:"removeChild",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}},{key:"updateMatrixWorld",value:function(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(var e=0,i=this.children.length;e<i;e++)this.children[e].updateMatrixWorld(t)}},{key:"updateMatrix",value:function(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}},{key:"traverse",value:function(t){if(!t(this))for(var e=0,i=this.children.length;e<i;e++)this.children[e].traverse(t)}},{key:"decompose",value:function(){this.matrix.decompose(this.quaternion._target,this.position,this.scale),this.rotation.fromQuaternion(this.quaternion)}},{key:"lookAt",value:function(t){arguments.length>1&&void 0!==arguments[1]&&arguments[1]?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion._target),this.rotation.fromQuaternion(this.quaternion)}}])}(),ct=new ht,dt=new F,ft=new F,gt=function(t){function e(t){var n,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=s.near,h=void 0===a?.1:a,o=s.far,u=void 0===o?100:o,l=s.fov,c=void 0===l?45:l,d=s.aspect,f=void 0===d?1:d,g=s.left,v=s.right,p=s.bottom,m=s.top,y=s.zoom,_=void 0===y?1:y;return r(this,e),n=i(this,e),Object.assign(n,{near:h,far:u,fov:c,aspect:f,left:g,right:v,bottom:p,top:m,zoom:_}),n.projectionMatrix=new ht,n.viewMatrix=new ht,n.projectionViewMatrix=new ht,n.worldPosition=new F,n.type=g||v?"orthographic":"perspective","orthographic"===n.type?n.orthographic():n.perspective(),n}return o(e,t),s(e,[{key:"perspective",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.near,i=void 0===e?this.near:e,r=t.far,n=void 0===r?this.far:r,s=t.fov,a=void 0===s?this.fov:s,h=t.aspect,o=void 0===h?this.aspect:h;return Object.assign(this,{near:i,far:n,fov:a,aspect:o}),this.projectionMatrix.fromPerspective({fov:a*(Math.PI/180),aspect:o,near:i,far:n}),this.type="perspective",this}},{key:"orthographic",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.near,i=void 0===e?this.near:e,r=t.far,n=void 0===r?this.far:r,s=t.left,a=void 0===s?this.left||-1:s,h=t.right,o=void 0===h?this.right||1:h,u=t.bottom,l=void 0===u?this.bottom||-1:u,c=t.top,d=void 0===c?this.top||1:c,f=t.zoom,g=void 0===f?this.zoom:f;return Object.assign(this,{near:i,far:n,left:a,right:o,bottom:l,top:d,zoom:g}),a/=g,o/=g,l/=g,d/=g,this.projectionMatrix.fromOrthogonal({left:a,right:o,bottom:l,top:d,near:i,far:n}),this.type="orthographic",this}},{key:"updateMatrixWorld",value:function(){return a(h(e.prototype),"updateMatrixWorld",this).call(this),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}},{key:"lookAt",value:function(t){return a(h(e.prototype),"lookAt",this).call(this,t,!0),this}},{key:"project",value:function(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}},{key:"unproject",value:function(t){return t.applyMatrix4(ct.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}},{key:"updateFrustum",value:function(){this.frustum||(this.frustum=[new F,new F,new F,new F,new F,new F]);var t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(var e=0;e<6;e++){var i=1/this.frustum[e].distance();this.frustum[e].multiply(i),this.frustum[e].constant*=i}}},{key:"frustumIntersectsMesh",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.worldMatrix;if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;var i=dt;i.copy(t.geometry.bounds.center),i.applyMatrix4(e);var r=t.geometry.bounds.radius*e.getMaxScaleOnAxis();return this.frustumIntersectsSphere(i,r)}},{key:"frustumIntersectsSphere",value:function(t,e){for(var i=ft,r=0;r<6;r++){var n=this.frustum[r];if(i.copy(n).dot(t)+n.constant<-e)return!1}return!0}}])}(lt);function vt(t,e,i){var r=e[0],n=e[1],s=e[2],a=e[3],h=e[4],o=e[5],u=e[6],l=e[7],c=e[8],d=i[0],f=i[1],g=i[2],v=i[3],p=i[4],m=i[5],y=i[6],_=i[7],b=i[8];return t[0]=d*r+f*a+g*u,t[1]=d*n+f*h+g*l,t[2]=d*s+f*o+g*c,t[3]=v*r+p*a+m*u,t[4]=v*n+p*h+m*l,t[5]=v*s+p*o+m*c,t[6]=y*r+_*a+b*u,t[7]=y*n+_*h+b*l,t[8]=y*s+_*o+b*c,t}var pt=function(t){function e(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,h=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,d=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,f=arguments.length>8&&void 0!==arguments[8]?arguments[8]:1;return r(this,e),l(t=i(this,e,[n,s,a,h,o,u,c,d,f]),t)}return o(e,t),s(e,[{key:"set",value:function(t,e,i,r,n,s,a,h,o){return t.length?this.copy(t):(function(t,e,i,r,n,s,a,h,o,u){t[0]=e,t[1]=i,t[2]=r,t[3]=n,t[4]=s,t[5]=a,t[6]=h,t[7]=o,t[8]=u}(this,t,e,i,r,n,s,a,h,o),this)}},{key:"translate",value:function(t){return function(t,e,i){var r=e[0],n=e[1],s=e[2],a=e[3],h=e[4],o=e[5],u=e[6],l=e[7],c=e[8],d=i[0],f=i[1];t[0]=r,t[1]=n,t[2]=s,t[3]=a,t[4]=h,t[5]=o,t[6]=d*r+f*a+u,t[7]=d*n+f*h+l,t[8]=d*s+f*o+c}(this,arguments.length>1&&void 0!==arguments[1]?arguments[1]:this,t),this}},{key:"rotate",value:function(t){var e,i,r,n,s,a,h,o,u,l,c,d,f,g;return e=this,r=t,n=(i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this)[0],s=i[1],a=i[2],h=i[3],o=i[4],u=i[5],l=i[6],c=i[7],d=i[8],f=Math.sin(r),g=Math.cos(r),e[0]=g*n+f*h,e[1]=g*s+f*o,e[2]=g*a+f*u,e[3]=g*h-f*n,e[4]=g*o-f*s,e[5]=g*u-f*a,e[6]=l,e[7]=c,e[8]=d,this}},{key:"scale",value:function(t){return function(t,e,i){var r=i[0],n=i[1];t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=n*e[3],t[4]=n*e[4],t[5]=n*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8]}(this,arguments.length>1&&void 0!==arguments[1]?arguments[1]:this,t),this}},{key:"multiply",value:function(t,e){return e?vt(this,t,e):vt(this,this,t),this}},{key:"identity",value:function(){var t;return(t=this)[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,this}},{key:"copy",value:function(t){var e,i;return i=t,(e=this)[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this}},{key:"fromMatrix4",value:function(t){var e,i;return i=t,(e=this)[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[4],e[4]=i[5],e[5]=i[6],e[6]=i[8],e[7]=i[9],e[8]=i[10],this}},{key:"fromQuaternion",value:function(t){return function(t,e){var i=e[0],r=e[1],n=e[2],s=e[3],a=i+i,h=r+r,o=n+n,u=i*a,l=r*a,c=r*h,d=n*a,f=n*h,g=n*o,v=s*a,p=s*h,m=s*o;t[0]=1-c-g,t[3]=l-m,t[6]=d+p,t[1]=l+m,t[4]=1-u-g,t[7]=f-v,t[2]=d-p,t[5]=f+v,t[8]=1-u-c}(this,t),this}},{key:"fromBasis",value:function(t,e,i){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],i[0],i[1],i[2]),this}},{key:"inverse",value:function(){var t,e,i,r,n,s,a,h,o,u,l,c,d,f,g;return t=this,i=(e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this)[0],r=e[1],n=e[2],s=e[3],a=e[4],h=e[5],o=e[6],u=e[7],l=e[8],(g=i*(c=l*a-h*u)+r*(d=-l*s+h*o)+n*(f=u*s-a*o))&&(g=1/g,t[0]=c*g,t[1]=(-l*r+n*u)*g,t[2]=(h*r-n*a)*g,t[3]=d*g,t[4]=(l*i-n*o)*g,t[5]=(-h*i+n*s)*g,t[6]=f*g,t[7]=(-u*i+r*o)*g,t[8]=(a*i-r*s)*g),this}},{key:"getNormalMatrix",value:function(t){var e,i,r,n,s,a,h,o,u,l,c,d,f,g,v,p,m,y,_,b,x,E,w,M,A,k,T,R,F,S,C;return e=this,r=(i=t)[0],n=i[1],s=i[2],a=i[3],h=i[4],o=i[5],u=i[6],l=i[7],c=i[8],d=i[9],f=i[10],g=i[11],v=i[12],p=i[13],m=i[14],y=i[15],(C=(_=r*o-n*h)*(S=f*y-g*m)-(b=r*u-s*h)*(F=d*y-g*p)+(x=r*l-a*h)*(R=d*m-f*p)+(E=n*u-s*o)*(T=c*y-g*v)-(w=n*l-a*o)*(k=c*m-f*v)+(M=s*l-a*u)*(A=c*p-d*v))&&(C=1/C,e[0]=(o*S-u*F+l*R)*C,e[1]=(u*T-h*S-l*k)*C,e[2]=(h*F-o*T+l*A)*C,e[3]=(s*F-n*S-a*R)*C,e[4]=(r*S-s*T+a*k)*C,e[5]=(n*T-r*F-a*A)*C,e[6]=(p*M-m*w+y*E)*C,e[7]=(m*x-v*M-y*b)*C,e[8]=(v*w-p*x+y*_)*C),this}}])}(p(Array)),mt=0,yt=function(t){function e(t){var n,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=s.geometry,h=s.program,o=s.mode,u=void 0===o?t.TRIANGLES:o,l=s.frustumCulled,c=void 0===l||l,d=s.renderOrder,f=void 0===d?0:d;return r(this,e),n=i(this,e),t.canvas,n.gl=t,n.id=mt++,n.geometry=a,n.program=h,n.mode=u,n.frustumCulled=c,n.renderOrder=f,n.modelViewMatrix=new ht,n.normalMatrix=new pt,n.beforeRenderCallbacks=[],n.afterRenderCallbacks=[],n}return o(e,t),s(e,[{key:"onBeforeRender",value:function(t){return this.beforeRenderCallbacks.push(t),this}},{key:"onAfterRender",value:function(t){return this.afterRenderCallbacks.push(t),this}},{key:"draw",value:function(){var t=this,e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).camera;e&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=e.projectionMatrix,this.program.uniforms.cameraPosition.value=e.worldPosition,this.program.uniforms.viewMatrix.value=e.viewMatrix,this.modelViewMatrix.multiply(e.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix),this.beforeRenderCallbacks.forEach((function(i){return i&&i({mesh:t,camera:e})}));var i=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:i}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((function(i){return i&&i({mesh:t,camera:e})}))}}])}(lt),_t=new Uint8Array(4);function bt(t){return!(t&t-1)}var xt=1,Et=function(){return s((function t(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=i.image,s=i.target,a=void 0===s?e.TEXTURE_2D:s,h=i.type,o=void 0===h?e.UNSIGNED_BYTE:h,u=i.format,l=void 0===u?e.RGBA:u,c=i.internalFormat,d=void 0===c?l:c,f=i.wrapS,g=void 0===f?e.CLAMP_TO_EDGE:f,v=i.wrapT,p=void 0===v?e.CLAMP_TO_EDGE:v,m=i.generateMipmaps,y=void 0===m||m,_=i.minFilter,b=void 0===_?y?e.NEAREST_MIPMAP_LINEAR:e.LINEAR:_,x=i.magFilter,E=void 0===x?e.LINEAR:x,w=i.premultiplyAlpha,M=void 0!==w&&w,A=i.unpackAlignment,k=void 0===A?4:A,T=i.flipY,R=void 0===T?a==e.TEXTURE_2D:T,F=i.anisotropy,S=void 0===F?0:F,C=i.level,P=void 0===C?0:C,B=i.width,D=i.height,O=void 0===D?B:D;r(this,t),this.gl=e,this.id=xt++,this.image=n,this.target=a,this.type=o,this.format=l,this.internalFormat=d,this.minFilter=b,this.magFilter=E,this.wrapS=g,this.wrapT=p,this.generateMipmaps=y,this.premultiplyAlpha=M,this.unpackAlignment=k,this.flipY=R,this.anisotropy=Math.min(S,this.gl.renderer.parameters.maxAnisotropy),this.level=P,this.width=B,this.height=O,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}),[{key:"bind",value:function(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}},{key:"update",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(var i=0;i<6;i++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,this.level,this.internalFormat,this.format,this.type,this.image[i]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(var r=0;r<this.image.length;r++)this.gl.compressedTexImage2D(this.target,r,this.internalFormat,this.image[r].width,this.image[r].height,0,this.image[r].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||bt(this.image.width)&&bt(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(var n=0;n<6;n++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,_t);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,_t);this.store.image=this.image}}}])}(),wt=function(){return s((function t(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=i.width,s=void 0===n?e.canvas.width:n,a=i.height,h=void 0===a?e.canvas.height:a,o=i.target,u=void 0===o?e.FRAMEBUFFER:o,l=i.color,c=void 0===l?1:l,d=i.depth,f=void 0===d||d,g=i.stencil,v=void 0!==g&&g,p=i.depthTexture,m=void 0!==p&&p,y=i.wrapS,_=void 0===y?e.CLAMP_TO_EDGE:y,b=i.wrapT,x=void 0===b?e.CLAMP_TO_EDGE:b,E=i.minFilter,w=void 0===E?e.LINEAR:E,M=i.magFilter,A=void 0===M?w:M,k=i.type,T=void 0===k?e.UNSIGNED_BYTE:k,R=i.format,F=void 0===R?e.RGBA:R,S=i.internalFormat,C=void 0===S?F:S,P=i.unpackAlignment,B=i.premultiplyAlpha;r(this,t),this.gl=e,this.width=s,this.height=h,this.depth=f,this.buffer=this.gl.createFramebuffer(),this.target=u,this.gl.renderer.bindFramebuffer(this),this.textures=[];for(var D=[],O=0;O<c;O++)this.textures.push(new Et(e,{width:s,height:h,wrapS:_,wrapT:x,minFilter:w,magFilter:A,type:T,format:F,internalFormat:C,unpackAlignment:P,premultiplyAlpha:B,flipY:!1,generateMipmaps:!1})),this.textures[O].update(),this.gl.framebufferTexture2D(this.target,this.gl.COLOR_ATTACHMENT0+O,this.gl.TEXTURE_2D,this.textures[O].texture,0),D.push(this.gl.COLOR_ATTACHMENT0+O);D.length>1&&this.gl.renderer.drawBuffers(D),this.texture=this.textures[0],m&&(this.gl.renderer.isWebgl2||this.gl.renderer.getExtension("WEBGL_depth_texture"))?(this.depthTexture=new Et(e,{width:s,height:h,minFilter:this.gl.NEAREST,magFilter:this.gl.NEAREST,format:this.gl.DEPTH_COMPONENT,internalFormat:e.renderer.isWebgl2?this.gl.DEPTH_COMPONENT16:this.gl.DEPTH_COMPONENT,type:this.gl.UNSIGNED_INT}),this.depthTexture.update(),this.gl.framebufferTexture2D(this.target,this.gl.DEPTH_ATTACHMENT,this.gl.TEXTURE_2D,this.depthTexture.texture,0)):(f&&!v&&(this.depthBuffer=this.gl.createRenderbuffer(),this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.depthBuffer),this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_COMPONENT16,s,h),this.gl.framebufferRenderbuffer(this.target,this.gl.DEPTH_ATTACHMENT,this.gl.RENDERBUFFER,this.depthBuffer)),v&&!f&&(this.stencilBuffer=this.gl.createRenderbuffer(),this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.stencilBuffer),this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.STENCIL_INDEX8,s,h),this.gl.framebufferRenderbuffer(this.target,this.gl.STENCIL_ATTACHMENT,this.gl.RENDERBUFFER,this.stencilBuffer)),f&&v&&(this.depthStencilBuffer=this.gl.createRenderbuffer(),this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.depthStencilBuffer),this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,s,h),this.gl.framebufferRenderbuffer(this.target,this.gl.DEPTH_STENCIL_ATTACHMENT,this.gl.RENDERBUFFER,this.depthStencilBuffer))),this.gl.renderer.bindFramebuffer({target:this.target})}),[{key:"setSize",value:function(t,e){if(this.width!==t||this.height!==e){this.width=t,this.height=e,this.gl.renderer.bindFramebuffer(this);for(var i=0;i<this.textures.length;i++)this.textures[i].width=t,this.textures[i].height=e,this.textures[i].needsUpdate=!0,this.textures[i].update(),this.gl.framebufferTexture2D(this.target,this.gl.COLOR_ATTACHMENT0+i,this.gl.TEXTURE_2D,this.textures[i].texture,0);this.depthTexture?(this.depthTexture.width=t,this.depthTexture.height=e,this.depthTexture.needsUpdate=!0,this.depthTexture.update(),this.gl.framebufferTexture2D(this.target,this.gl.DEPTH_ATTACHMENT,this.gl.TEXTURE_2D,this.depthTexture.texture,0)):(this.depthBuffer&&(this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.depthBuffer),this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_COMPONENT16,t,e)),this.stencilBuffer&&(this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.stencilBuffer),this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.STENCIL_INDEX8,t,e)),this.depthStencilBuffer&&(this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.depthStencilBuffer),this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,t,e))),this.gl.renderer.bindFramebuffer({target:this.target})}}}])}(),Mt={black:"#000000",white:"#ffffff",red:"#ff0000",green:"#00ff00",blue:"#0000ff",fuchsia:"#ff00ff",cyan:"#00ffff",yellow:"#ffff00",orange:"#ff8000"};function At(t){4===t.length&&(t=t[0]+t[1]+t[1]+t[2]+t[2]+t[3]+t[3]);var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return[parseInt(e[1],16)/255,parseInt(e[2],16)/255,parseInt(e[3],16)/255]}function kt(t){return[((t=parseInt(t))>>16&255)/255,(t>>8&255)/255,(255&t)/255]}function Tt(t){return void 0===t?[0,0,0]:3===arguments.length?arguments:isNaN(t)?"#"===t[0]?At(t):Mt[t.toLowerCase()]?At(Mt[t.toLowerCase()]):[0,0,0]:kt(t)}var Rt=Object.freeze({__proto__:null,hexToRGB:At,numberToRGB:kt,parseColor:Tt}),Ft=function(t){function e(t){var n;return r(this,e),Array.isArray(t)?l(n,n=i(this,e,d(t))):l(n,n=i(this,e,d(Tt.apply(Rt,arguments))))}return o(e,t),s(e,[{key:"r",get:function(){return this[0]},set:function(t){this[0]=t}},{key:"g",get:function(){return this[1]},set:function(t){this[1]=t}},{key:"b",get:function(){return this[2]},set:function(t){this[2]=t}},{key:"set",value:function(t){return Array.isArray(t)?this.copy(t):this.copy(Tt.apply(Rt,arguments))}},{key:"copy",value:function(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this}}])}(p(Array));function St(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t}function Ct(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t}function Pt(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t}function Bt(t){var e=t[0],i=t[1];return Math.sqrt(e*e+i*i)}function Dt(t,e){return t[0]*e[1]-t[1]*e[0]}var Ot=function(t){function e(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n;return r(this,e),l(t=i(this,e,[n,s]),t)}return o(e,t),s(e,[{key:"x",get:function(){return this[0]},set:function(t){this[0]=t}},{key:"y",get:function(){return this[1]},set:function(t){this[1]=t}},{key:"set",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t;return t.length?this.copy(t):(function(t,e,i){t[0]=e,t[1]=i}(this,t,e),this)}},{key:"copy",value:function(t){var e,i;return i=t,(e=this)[0]=i[0],e[1]=i[1],this}},{key:"add",value:function(t,e){return e?St(this,t,e):St(this,this,t),this}},{key:"sub",value:function(t,e){return e?Ct(this,t,e):Ct(this,this,t),this}},{key:"multiply",value:function(t){var e,i,r;return t.length?(i=this,r=t,(e=this)[0]=i[0]*r[0],e[1]=i[1]*r[1]):Pt(this,this,t),this}},{key:"divide",value:function(t){var e,i,r;return t.length?(i=this,r=t,(e=this)[0]=i[0]/r[0],e[1]=i[1]/r[1]):Pt(this,this,1/t),this}},{key:"inverse",value:function(){var t,e;return e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this,(t=this)[0]=1/e[0],t[1]=1/e[1],this}},{key:"len",value:function(){return Bt(this)}},{key:"distance",value:function(t){return t?(e=this,r=(i=t)[0]-e[0],n=i[1]-e[1],Math.sqrt(r*r+n*n)):Bt(this);var e,i,r,n}},{key:"squaredLen",value:function(){return this.squaredDistance()}},{key:"squaredDistance",value:function(t){return t?(e=this,r=(i=t)[0]-e[0],n=i[1]-e[1],r*r+n*n):function(t){var e=t[0],i=t[1];return e*e+i*i}(this);var e,i,r,n}},{key:"negate",value:function(){var t,e;return e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this,(t=this)[0]=-e[0],t[1]=-e[1],this}},{key:"cross",value:function(t,e){return e?Dt(t,e):Dt(this,t)}},{key:"scale",value:function(t){return Pt(this,this,t),this}},{key:"normalize",value:function(){var t,e,i,r,n;return t=this,i=(e=this)[0],r=e[1],(n=i*i+r*r)>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,this}},{key:"dot",value:function(t){return i=t,(e=this)[0]*i[0]+e[1]*i[1];var e,i}},{key:"equals",value:function(t){return i=t,(e=this)[0]===i[0]&&e[1]===i[1];var e,i}},{key:"applyMatrix3",value:function(t){var e,i,r,n,s;return e=this,r=t,n=(i=this)[0],s=i[1],e[0]=r[0]*n+r[3]*s+r[6],e[1]=r[1]*n+r[4]*s+r[7],this}},{key:"applyMatrix4",value:function(t){var e,i,r,n,s;return e=this,r=t,n=(i=this)[0],s=i[1],e[0]=r[0]*n+r[4]*s+r[12],e[1]=r[1]*n+r[5]*s+r[13],this}},{key:"lerp",value:function(t,e){return function(t,e,i,r){var n=e[0],s=e[1];t[0]=n+r*(i[0]-n),t[1]=s+r*(i[1]-s)}(this,this,t,e),this}},{key:"clone",value:function(){return new e(this[0],this[1])}},{key:"fromArray",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return this[0]=t[e],this[1]=t[e+1],this}},{key:"toArray",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return t[e]=this[0],t[e+1]=this[1],t}}])}(p(Array)),Nt=function(t){function e(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:n,h=arguments.length>3&&void 0!==arguments[3]?arguments[3]:n;return r(this,e),l(t=i(this,e,[n,s,a,h]),t)}return o(e,t),s(e,[{key:"x",get:function(){return this[0]},set:function(t){this[0]=t}},{key:"y",get:function(){return this[1]},set:function(t){this[1]=t}},{key:"z",get:function(){return this[2]},set:function(t){this[2]=t}},{key:"w",get:function(){return this[3]},set:function(t){this[3]=t}},{key:"set",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t;return t.length?this.copy(t):(W(this,t,e,i,r),this)}},{key:"copy",value:function(t){return q(this,t),this}},{key:"normalize",value:function(){return V(this,this),this}},{key:"multiply",value:function(t){var e,i,r;return i=this,r=t,(e=this)[0]=i[0]*r,e[1]=i[1]*r,e[2]=i[2]*r,e[3]=i[3]*r,this}},{key:"dot",value:function(t){return Y(this,t)}},{key:"fromArray",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this}},{key:"toArray",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}])}(p(Array)),Ut=function(t){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=n.width,a=void 0===s?1:s,h=n.height,o=void 0===h?1:h,u=n.widthSegments,l=void 0===u?1:u,c=n.heightSegments,d=void 0===c?1:c,f=n.attributes,g=void 0===f?{}:f;r(this,e);var v=l,p=d,m=(v+1)*(p+1),y=v*p*6,_=new Float32Array(3*m),b=new Float32Array(3*m),x=new Float32Array(2*m),E=y>65536?new Uint32Array(y):new Uint16Array(y);return e.buildPlane(_,b,x,E,a,o,0,v,p),Object.assign(g,{position:{size:3,data:_},normal:{size:3,data:b},uv:{size:2,data:x},index:{data:E}}),i(this,e,[t,g])}return o(e,t),s(e,null,[{key:"buildPlane",value:function(t,e,i,r,n,s,a,h,o){for(var u=arguments.length>9&&void 0!==arguments[9]?arguments[9]:0,l=arguments.length>10&&void 0!==arguments[10]?arguments[10]:1,c=arguments.length>11&&void 0!==arguments[11]?arguments[11]:2,d=arguments.length>12&&void 0!==arguments[12]?arguments[12]:1,f=arguments.length>13&&void 0!==arguments[13]?arguments[13]:-1,g=arguments.length>14&&void 0!==arguments[14]?arguments[14]:0,v=arguments.length>15&&void 0!==arguments[15]?arguments[15]:0,p=g,m=n/h,y=s/o,_=0;_<=o;_++)for(var b=_*y-s/2,x=0;x<=h;x++,g++){var E=x*m-n/2;if(t[3*g+u]=E*d,t[3*g+l]=b*f,t[3*g+c]=a/2,e[3*g+u]=0,e[3*g+l]=0,e[3*g+c]=a>=0?1:-1,i[2*g]=x/h,i[2*g+1]=1-_/o,_!==o&&x!==h){var w=p+x+_*(h+1),M=p+x+(_+1)*(h+1),A=p+x+(_+1)*(h+1)+1,k=p+x+_*(h+1)+1;r[6*v]=w,r[6*v+1]=M,r[6*v+2]=k,r[6*v+3]=M,r[6*v+4]=A,r[6*v+5]=k,v++}}}}])}(D);!function(){!function(t,e,i){var r,n=256,s="random",a=i.pow(n,6),h=i.pow(2,52),o=2*h,u=n-1;function l(u,l,g){var m=[],y=v(f((l=1==l?{entropy:!0}:l||{}).entropy?[u,p(e)]:null==u?function(){try{var i;return r&&(i=r.randomBytes)?i=i(n):(i=new Uint8Array(n),(t.crypto||t.msCrypto).getRandomValues(i)),p(i)}catch(i){var s=t.navigator,a=s&&s.plugins;return[+new Date,t,a,t.screen,p(e)]}}():u,3),m),_=new c(m),b=function(){for(var t=_.g(6),e=a,i=0;t<h;)t=(t+i)*n,e*=n,i=_.g(1);for(;t>=o;)t/=2,e/=2,i>>>=1;return(t+i)/e};return b.int32=function(){return 0|_.g(4)},b.quick=function(){return _.g(4)/4294967296},b.double=b,v(p(_.S),e),(l.pass||g||function(t,e,r,n){return n&&(n.S&&d(n,_),t.state=function(){return d(_,{})}),r?(i[s]=t,e):t})(b,y,"global"in l?l.global:this==i,l.state)}function c(t){var e,i=t.length,r=this,s=0,a=r.i=r.j=0,h=r.S=[];for(i||(t=[i++]);s<n;)h[s]=s++;for(s=0;s<n;s++)h[s]=h[a=u&a+t[s%i]+(e=h[s])],h[a]=e;(r.g=function(t){for(var e,i=0,s=r.i,a=r.j,h=r.S;t--;)e=h[s=u&s+1],i=i*n+h[u&(h[s]=h[a=u&a+e])+(h[a]=e)];return r.i=s,r.j=a,i})(n)}function d(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function f(t,e){var i,r=[],n=g(t);if(e&&"object"==n)for(i in t)try{r.push(f(t[i],e-1))}catch(t){}return r.length?r:"string"==n?t:t+"\0"}function v(t,e){for(var i,r=t+"",n=0;n<r.length;)e[u&n]=u&(i^=19*e[u&n])+r.charCodeAt(n++);return p(e)}function p(t){return String.fromCharCode.apply(0,t)}if(v(i.random(),e),"object"==("undefined"==typeof module?"undefined":g(module))&&module.exports){module.exports=l;try{r=require("crypto")}catch(t){}}else"function"==typeof define&&define.amd?define((function(){return l})):i["seed"+s]=l}("undefined"!=typeof self?self:this,[],Math)}();var It=function(){return s((function t(){var e,i,n,s=this,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},h=arguments.length>1?arguments[1]:void 0;r(this,t),e=this,n=function(){requestAnimationFrame(s._update),s.loop&&(s.frame++,s._animate()),s.gl.clearColor(0,0,0,1),s.renderer.render({scene:s.scene,camera:s.camera}),s.isRenderTarget&&(s.gl.clearColor(0,0,0,1),s.renderer.render({scene:s.rttPlane,camera:s.rttCamera,target:s.rtt}))},(i=f(i="_update"))in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n,this.params=a,this.options={},this.loop=a.loop||!1,this.colors_num=h,this.colors_init=a.colors||[],this.palette=[],this.colors(this.colors_init),this.seed=a.seed||1e3,this.rng=new Math.seedrandom(this.seed),this.frame=0,this.parentDom=a.dom?document.getElementById(a.dom):document.body,"static"===window.getComputedStyle(this.parentDom).position&&(this.parentDom.style.position="relative");var o=this._getParentRect(this.parentDom);this.canvasW=this.originW=o.w,this.canvasH=this.originH=o.h,this.originRatio=this.originW/this.originH,this.resize_mode=a.resize_mode,this.renderer=new G,this.renderer.setSize(this.canvasW,this.canvasH),this.gl=this.renderer.gl,this.gl.canvas.id="colorbgcanvas",this.gl.canvas.style.position="absolute",this.gl.canvas.style.top=0,this.gl.canvas.style.left=0,this.gl.canvas.style.zIndex=0,this.parentDom.appendChild(this.gl.canvas),this.camera=new gt(this.gl,{near:.1,far:10001,left:-this.canvasW/2,right:this.canvasW/2,bottom:-this.canvasH/2,top:this.canvasH/2,zoom:1}),this.camera.position.z=8e3,this.isRenderTarget=!1,this.scene=new lt,window.addEventListener("resize",(function(){s.resize()}))}),[{key:"_getParentRect",value:function(t){var e=t;return{w:e.getBoundingClientRect().width,h:e.getBoundingClientRect().height}}},{key:"colors",value:function(t){var e=!!this.palette.length;if(this.palette=[],0==t.length)this.palette=["#F00911","#F3AA00","#F6EE0B","#39E90D","#195ED2","#F00911"];else if(t.length<this.colors_num){for(var i=d(t),r=i.length;r<6;r++){var n=r%i.length;t.push(i[n])}this.palette=t}else for(var s=0;s<this.colors_num;s++)this.palette.push(t[s]);e&&this._resetColors()}},{key:"start",value:function(){this._size(),this._initRtt(),this._resetSeed(),this._makeMaterial(),this._make(),requestAnimationFrame(this._update)}},{key:"resize",value:function(){var t=this._getParentRect(this.parentDom);this.canvasW=t.w,this.canvasH=t.h,this.canvasRatio=this.canvasW/this.canvasH,this.renderer.setSize(this.canvasW,this.canvasH);var e=1,i=this.canvasW/this.canvasH;i>this.originRatio?this.canvasW>this.originW&&(e=this.canvasW/this.originW):i<this.originRatio&&this.canvasH>this.originH&&(e=this.canvasH/this.originH),this.camera.orthographic({near:.1,far:10001,left:-this.canvasW/2,right:this.canvasW/2,bottom:-this.canvasH/2,top:this.canvasH/2,zoom:e})}},{key:"reset",value:function(t){this.seed=t||this.seed,this.rng=new Math.seedrandom(this.seed),this._delete(),this._resetSeed(),this._make()}},{key:"_delete",value:function(){for(var t=this.scene.children.length-1;t>=0;t--)this.scene.removeChild(this.scene.children[t])}},{key:"_size",value:function(){}},{key:"_initRtt",value:function(){}},{key:"_resetSeed",value:function(){}},{key:"_animate",value:function(){}},{key:"destroy",value:function(){this._delete(),this.parentDom.removeChild(this.gl.canvas)}}])}();function Lt(t,e,i,r){this.anchor=new F(t,e,i),this.effectradius=r,this.map=new Map,this.posAttribute=null,this.surround=function(t){var e;this.posAttribute=t.getPosition();for(var i=0,r=this.posAttribute.count;i<r;i++){var n=i%100;if(!(0==n||99==n||i<100||i>9900&&i<1e4)){var s=new F(this.posAttribute.getX(i),this.posAttribute.getY(i),this.posAttribute.getZ(i));if((e=s.distance(this.anchor))<this.effectradius){var a=new F(this.posAttribute.getX(n),this.posAttribute.getY(n),this.posAttribute.getZ(n)),h=new F(this.posAttribute.getX(n+9900),this.posAttribute.getY(n+9900),this.posAttribute.getZ(n+9900)),o=s.distance(a),u=s.distance(h),l=5/Math.min(o,u),c=e/this.effectradius,d=1/(.25*Math.sqrt(6.28))*Math.exp(-c*c/.125)/1.6;d-=l,this.map.set(i,d)}}}},this.moveTo=function(t,e,i){var r=this.posAttribute;if(this.anchor.x!==t||this.anchor.y!==e||this.anchor.z!==i){var n=t-this.anchor.x,s=e-this.anchor.y,a=i-this.anchor.z;this.map.forEach((function(t,e,i){var h=r.getX(e),o=r.getY(e),u=r.getZ(e);t>.001&&r.setXYZ(e,h+n*t,o+s*t,u+a*t)})),this.anchor.set(t,e,i)}}}var zt=function(t){function e(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return r(this,e),(t=i(this,e,[n,6])).name="aesthetic-fluid",t.options.radius_inner=n.radius_inner||.1,t.options.radius_outer=n.radius_outer||.3,t.morphdata={1:{anchorX:240,anchorY:-200,anchorZ:0,anchorRadius:900,moveToX:260,moveToY:160,moveToZ:400},2:{anchorX:-240,anchorY:200,anchorZ:0,anchorRadius:900,moveToX:-260,moveToY:-160,moveToZ:400}},t.start(),t}return o(e,t),s(e,[{key:"_size",value:function(){this.size=this.canvasW>this.canvasH?this.canvasW:this.canvasH}},{key:"_initRtt",value:function(){this.rtt=new wt(this.gl,{width:512,height:512}),this.rttCamera=new gt(this.gl,{left:-.5,right:.5,bottom:-.5,top:.5,zoom:1}),this.rttCamera.position.z=1,this.rttPlaneGeo=new Ut(this.gl,{}),this.rttProgram=new U(this.gl,{vertex:"\n\t\t\t\tattribute vec3 position;\n\t\t\t\tattribute vec2 uv;\n\t\t\t\tuniform mat4 modelViewMatrix;\n\t\t\t\tuniform mat4 projectionMatrix;\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\t\t}\n\t\t\t",fragment:"\n\t\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t\t#endif\n\n\t\t\t\t#define TWO_PI 6.28318530718\n\n\t\t\t\tuniform vec2 u_resolution;\n\t\t\t\tuniform float u_time;\n\n\t\t\t\tuniform vec3 u_color_0;\n\t\t\t\tuniform vec3 u_color_1;\n\t\t\t\tuniform vec3 u_color_2;\n\t\t\t\tuniform vec3 u_color_3;\n\t\t\t\tuniform vec3 u_color_4;\n\t\t\t\tuniform vec3 u_color_5;\n\t\t\t\tuniform vec4 u_dye_0;\n\t\t\t\tuniform vec4 u_dye_1;\n\t\t\t\tuniform vec4 u_dye_2;\n\t\t\t\tuniform vec4 u_dye_3;\n\t\t\t\tuniform vec4 u_dye_4;\n\t\t\t\tuniform vec4 u_dye_5;\n\n\t\t\t\tvec4 blurDot ( vec3 color, vec2 st, vec2 pos, float inner, float outer ) {\n\t\t\t\t\tfloat pct = distance( st, pos );   \n\t\t\t\t\tvec2 dist = st - pos;\n\t\t\t\t\tfloat alpha = 1. - smoothstep( inner, outer, pct );\n\t\t\t\t\t\t\n\t\t\t\t\treturn vec4( color.rgb, alpha );\n\t\t\t\t}\n\n\t\t\t\tvoid main(){\n\t\t\t\t\tvec2 st = gl_FragCoord.xy/u_resolution;\n\t\t\t\t\tvec3 color = vec3(1.0);        \n\n\t\t\t\t\tvec4 dot_0 = blurDot( u_color_0, st, u_dye_0.xy, u_dye_0[2], u_dye_0[3] );\n\t\t\t\t\tvec4 dot_1 = blurDot( u_color_1, st, u_dye_1.xy, u_dye_1[2], u_dye_1[3] );\n\t\t\t\t\tvec4 dot_2 = blurDot( u_color_2, st, u_dye_2.xy, u_dye_2[2], u_dye_2[3] );\n\t\t\t\t\tvec4 dot_3 = blurDot( u_color_3, st, u_dye_3.xy, u_dye_3[2], u_dye_3[3] );\n\t\t\t\t\tvec4 dot_4 = blurDot( u_color_4, st, u_dye_4.xy, u_dye_4[2], u_dye_4[3] );\n\t\t\t\t\tvec4 dot_5 = blurDot( u_color_5, st, u_dye_5.xy, u_dye_5[2], u_dye_5[3] );\n\t\t\t\t\t\n\n\t\t\t\t\tcolor = mix( u_color_0, u_color_1, st.x );    \n\t\t\t\t\tcolor = mix( color, u_color_2, st.x*st.x + -0.040 );\n\n\t\t\t\t\tcolor = mix( color, dot_0.rgb, dot_0.a );\n\t\t\t\t\tcolor = mix( color, dot_1.rgb, dot_1.a );\n\t\t\t\t\tcolor = mix( color, dot_2.rgb, dot_2.a );\n\t\t\t\t\tcolor = mix( color, dot_3.rgb, dot_3.a );\n\t\t\t\t\tcolor = mix( color, dot_4.rgb, dot_4.a );\n\t\t\t\t\tcolor = mix( color, dot_5.rgb, dot_5.a );\n\n\t\t\t\t\tgl_FragColor = vec4(color,1.0);\n\t\t\t\t}\n\t\t\t",uniforms:{u_time:{value:0},u_resolution:{value:new Ot(512,512)},u_color_0:{value:new Ft(this.palette[0])},u_color_1:{value:new Ft(this.palette[1])},u_color_2:{value:new Ft(this.palette[2])},u_color_3:{value:new Ft(this.palette[3])},u_color_4:{value:new Ft(this.palette[4])},u_color_5:{value:new Ft(this.palette[5])},u_dye_0:{value:new Nt(.3,.8,.1,.7)},u_dye_1:{value:new Nt(.7,.8,.1,.7)},u_dye_2:{value:new Nt(.7,.2,.1,.7)},u_dye_3:{value:new Nt(.3,.2,.1,.7)},u_dye_4:{value:new Nt(.1,.5,.1,.45)},u_dye_5:{value:new Nt(.9,.5,.1,.45)}}}),this.rttPlane=new yt(this.gl,{geometry:this.rttPlaneGeo,program:this.rttProgram}),this.isRenderTarget=!0}},{key:"_resetSeed",value:function(){for(var t=0;t<6;t++){var e=this.rng(),i=this.rng(),r=this.rng()*this.options.radius_inner+this.options.radius_inner,n=this.rng()*this.options.radius_outer+this.options.radius_outer,s=new Nt(e,i,r,n);this.rttProgram.uniforms["u_dye_"+t]={value:s}}}},{key:"_makeMaterial",value:function(){this.planeShader=new U(this.gl,{vertex:"\n                attribute vec3 position;\n                attribute vec2 uv;\n\n                uniform mat4 modelViewMatrix;\n                uniform mat4 projectionMatrix;\n                varying vec2 vUv;\n\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                }\n            ",fragment:"\n\t\t\t\tprecision highp float;\n\t\t\t\tuniform sampler2D tMap;\n\t\t\t\tuniform float uTime;\n\t\t\t\tuniform float uMagnitude;\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\t\n\t\t\t\tconst float speed = 15.0;\n\t\t\t\t\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 wavyCoord;\n\t\t\t\t\twavyCoord.s = vUv.s + (sin(uTime+vUv.t*speed) * uMagnitude);\n\t\t\t\t\twavyCoord.t = vUv.t + (cos(uTime+vUv.s*speed) * uMagnitude);\n\t\t\t\t\tvec4 frameColor = texture2D(tMap, wavyCoord);\n\t\t\t\t\tgl_FragColor = frameColor;\n\t\t\t\t}\n            ",uniforms:{tMap:{value:this.rtt.texture},uTime:{value:0},uMagnitude:{value:.15}}})}},{key:"_make",value:function(){var t=new Ut(this.gl,{width:this.size,height:this.size,widthSegments:99,heightSegments:99});new yt(this.gl,{geometry:t,program:this.planeShader}).setParent(this.scene);var e=this.morphdata;for(var i in e){var r=e[i],n=r.anchorX,s=r.anchorY,a=r.anchorRadius,h=r.moveToX,o=r.moveToY,u=new Lt(n,s,0,a);u.surround(t),u.moveTo(h,o,400)}}},{key:"_resetColors",value:function(){this.rttProgram.uniforms.u_color_0.value=new Ft(this.palette[0]),this.rttProgram.uniforms.u_color_1.value=new Ft(this.palette[1]),this.rttProgram.uniforms.u_color_2.value=new Ft(this.palette[2]),this.rttProgram.uniforms.u_color_3.value=new Ft(this.palette[3]),this.rttProgram.uniforms.u_color_4.value=new Ft(this.palette[4]),this.rttProgram.uniforms.u_color_5.value=new Ft(this.palette[5])}},{key:"_animate",value:function(){this.planeShader.uniforms.uTime.value=this.frame/50}},{key:"update",value:function(t,e){if("scale"===t)this.planeShader.uniforms.uMagnitude.value=parseFloat(e)}}])}(It);t.AestheticFluidBg=zt}));
",
    "mimeType": "application/javascript; charset=utf-8"
  },
  "/speedreader/bundle.js": {
    "content": "(() => {
  // node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs
  function __decorate(decorators, target, key, desc) {
    var c5 = arguments.length, r7 = c5 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r7 = Reflect.decorate(decorators, target, key, desc);
    else for (var i8 = decorators.length - 1; i8 >= 0; i8--) if (d3 = decorators[i8]) r7 = (c5 < 3 ? d3(r7) : c5 > 3 ? d3(target, key, r7) : d3(target, key)) || r7;
    return c5 > 3 && r7 && Object.defineProperty(target, key, r7), r7;
  }

  // node_modules/.pnpm/@lit+reactive-element@2.1.0/node_modules/@lit/reactive-element/decorators/custom-element.js
  var t = (t6) => (e8, o10) => {
    void 0 !== o10 ? o10.addInitializer(() => {
      customElements.define(t6, e8);
    }) : customElements.define(t6, e8);
  };

  // node_modules/.pnpm/@lit+reactive-element@2.1.0/node_modules/@lit/reactive-element/css-tag.js
  var t2 = globalThis;
  var e = t2.ShadowRoot && (void 0 === t2.ShadyCSS || t2.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
  var s = Symbol();
  var o = /* @__PURE__ */ new WeakMap();
  var n = class {
    constructor(t6, e8, o10) {
      if (this._$cssResult$ = true, o10 !== s) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
      this.cssText = t6, this.t = e8;
    }
    get styleSheet() {
      let t6 = this.o;
      const s4 = this.t;
      if (e && void 0 === t6) {
        const e8 = void 0 !== s4 && 1 === s4.length;
        e8 && (t6 = o.get(s4)), void 0 === t6 && ((this.o = t6 = new CSSStyleSheet()).replaceSync(this.cssText), e8 && o.set(s4, t6));
      }
      return t6;
    }
    toString() {
      return this.cssText;
    }
  };
  var r = (t6) => new n("string" == typeof t6 ? t6 : t6 + "", void 0, s);
  var i = (t6, ...e8) => {
    const o10 = 1 === t6.length ? t6[0] : e8.reduce((e9, s4, o11) => e9 + ((t7) => {
      if (true === t7._$cssResult$) return t7.cssText;
      if ("number" == typeof t7) return t7;
      throw Error("Value passed to 'css' function must be a 'css' function result: " + t7 + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
    })(s4) + t6[o11 + 1], t6[0]);
    return new n(o10, t6, s);
  };
  var S = (s4, o10) => {
    if (e) s4.adoptedStyleSheets = o10.map((t6) => t6 instanceof CSSStyleSheet ? t6 : t6.styleSheet);
    else for (const e8 of o10) {
      const o11 = document.createElement("style"), n8 = t2.litNonce;
      void 0 !== n8 && o11.setAttribute("nonce", n8), o11.textContent = e8.cssText, s4.appendChild(o11);
    }
  };
  var c = e ? (t6) => t6 : (t6) => t6 instanceof CSSStyleSheet ? ((t7) => {
    let e8 = "";
    for (const s4 of t7.cssRules) e8 += s4.cssText;
    return r(e8);
  })(t6) : t6;

  // node_modules/.pnpm/@lit+reactive-element@2.1.0/node_modules/@lit/reactive-element/reactive-element.js
  var { is: i2, defineProperty: e2, getOwnPropertyDescriptor: h, getOwnPropertyNames: r2, getOwnPropertySymbols: o2, getPrototypeOf: n2 } = Object;
  var a = globalThis;
  var c2 = a.trustedTypes;
  var l = c2 ? c2.emptyScript : "";
  var p = a.reactiveElementPolyfillSupport;
  var d = (t6, s4) => t6;
  var u = { toAttribute(t6, s4) {
    switch (s4) {
      case Boolean:
        t6 = t6 ? l : null;
        break;
      case Object:
      case Array:
        t6 = null == t6 ? t6 : JSON.stringify(t6);
    }
    return t6;
  }, fromAttribute(t6, s4) {
    let i8 = t6;
    switch (s4) {
      case Boolean:
        i8 = null !== t6;
        break;
      case Number:
        i8 = null === t6 ? null : Number(t6);
        break;
      case Object:
      case Array:
        try {
          i8 = JSON.parse(t6);
        } catch (t7) {
          i8 = null;
        }
    }
    return i8;
  } };
  var f = (t6, s4) => !i2(t6, s4);
  var b = { attribute: true, type: String, converter: u, reflect: false, useDefault: false, hasChanged: f };
  Symbol.metadata ??= Symbol("metadata"), a.litPropertyMetadata ??= /* @__PURE__ */ new WeakMap();
  var y = class extends HTMLElement {
    static addInitializer(t6) {
      this._$Ei(), (this.l ??= []).push(t6);
    }
    static get observedAttributes() {
      return this.finalize(), this._$Eh && [...this._$Eh.keys()];
    }
    static createProperty(t6, s4 = b) {
      if (s4.state && (s4.attribute = false), this._$Ei(), this.prototype.hasOwnProperty(t6) && ((s4 = Object.create(s4)).wrapped = true), this.elementProperties.set(t6, s4), !s4.noAccessor) {
        const i8 = Symbol(), h3 = this.getPropertyDescriptor(t6, i8, s4);
        void 0 !== h3 && e2(this.prototype, t6, h3);
      }
    }
    static getPropertyDescriptor(t6, s4, i8) {
      const { get: e8, set: r7 } = h(this.prototype, t6) ?? { get() {
        return this[s4];
      }, set(t7) {
        this[s4] = t7;
      } };
      return { get: e8, set(s5) {
        const h3 = e8?.call(this);
        r7?.call(this, s5), this.requestUpdate(t6, h3, i8);
      }, configurable: true, enumerable: true };
    }
    static getPropertyOptions(t6) {
      return this.elementProperties.get(t6) ?? b;
    }
    static _$Ei() {
      if (this.hasOwnProperty(d("elementProperties"))) return;
      const t6 = n2(this);
      t6.finalize(), void 0 !== t6.l && (this.l = [...t6.l]), this.elementProperties = new Map(t6.elementProperties);
    }
    static finalize() {
      if (this.hasOwnProperty(d("finalized"))) return;
      if (this.finalized = true, this._$Ei(), this.hasOwnProperty(d("properties"))) {
        const t7 = this.properties, s4 = [...r2(t7), ...o2(t7)];
        for (const i8 of s4) this.createProperty(i8, t7[i8]);
      }
      const t6 = this[Symbol.metadata];
      if (null !== t6) {
        const s4 = litPropertyMetadata.get(t6);
        if (void 0 !== s4) for (const [t7, i8] of s4) this.elementProperties.set(t7, i8);
      }
      this._$Eh = /* @__PURE__ */ new Map();
      for (const [t7, s4] of this.elementProperties) {
        const i8 = this._$Eu(t7, s4);
        void 0 !== i8 && this._$Eh.set(i8, t7);
      }
      this.elementStyles = this.finalizeStyles(this.styles);
    }
    static finalizeStyles(s4) {
      const i8 = [];
      if (Array.isArray(s4)) {
        const e8 = new Set(s4.flat(1 / 0).reverse());
        for (const s5 of e8) i8.unshift(c(s5));
      } else void 0 !== s4 && i8.push(c(s4));
      return i8;
    }
    static _$Eu(t6, s4) {
      const i8 = s4.attribute;
      return false === i8 ? void 0 : "string" == typeof i8 ? i8 : "string" == typeof t6 ? t6.toLowerCase() : void 0;
    }
    constructor() {
      super(), this._$Ep = void 0, this.isUpdatePending = false, this.hasUpdated = false, this._$Em = null, this._$Ev();
    }
    _$Ev() {
      this._$ES = new Promise((t6) => this.enableUpdating = t6), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), this.constructor.l?.forEach((t6) => t6(this));
    }
    addController(t6) {
      (this._$EO ??= /* @__PURE__ */ new Set()).add(t6), void 0 !== this.renderRoot && this.isConnected && t6.hostConnected?.();
    }
    removeController(t6) {
      this._$EO?.delete(t6);
    }
    _$E_() {
      const t6 = /* @__PURE__ */ new Map(), s4 = this.constructor.elementProperties;
      for (const i8 of s4.keys()) this.hasOwnProperty(i8) && (t6.set(i8, this[i8]), delete this[i8]);
      t6.size > 0 && (this._$Ep = t6);
    }
    createRenderRoot() {
      const t6 = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
      return S(t6, this.constructor.elementStyles), t6;
    }
    connectedCallback() {
      this.renderRoot ??= this.createRenderRoot(), this.enableUpdating(true), this._$EO?.forEach((t6) => t6.hostConnected?.());
    }
    enableUpdating(t6) {
    }
    disconnectedCallback() {
      this._$EO?.forEach((t6) => t6.hostDisconnected?.());
    }
    attributeChangedCallback(t6, s4, i8) {
      this._$AK(t6, i8);
    }
    _$ET(t6, s4) {
      const i8 = this.constructor.elementProperties.get(t6), e8 = this.constructor._$Eu(t6, i8);
      if (void 0 !== e8 && true === i8.reflect) {
        const h3 = (void 0 !== i8.converter?.toAttribute ? i8.converter : u).toAttribute(s4, i8.type);
        this._$Em = t6, null == h3 ? this.removeAttribute(e8) : this.setAttribute(e8, h3), this._$Em = null;
      }
    }
    _$AK(t6, s4) {
      const i8 = this.constructor, e8 = i8._$Eh.get(t6);
      if (void 0 !== e8 && this._$Em !== e8) {
        const t7 = i8.getPropertyOptions(e8), h3 = "function" == typeof t7.converter ? { fromAttribute: t7.converter } : void 0 !== t7.converter?.fromAttribute ? t7.converter : u;
        this._$Em = e8, this[e8] = h3.fromAttribute(s4, t7.type) ?? this._$Ej?.get(e8) ?? null, this._$Em = null;
      }
    }
    requestUpdate(t6, s4, i8) {
      if (void 0 !== t6) {
        const e8 = this.constructor, h3 = this[t6];
        if (i8 ??= e8.getPropertyOptions(t6), !((i8.hasChanged ?? f)(h3, s4) || i8.useDefault && i8.reflect && h3 === this._$Ej?.get(t6) && !this.hasAttribute(e8._$Eu(t6, i8)))) return;
        this.C(t6, s4, i8);
      }
      false === this.isUpdatePending && (this._$ES = this._$EP());
    }
    C(t6, s4, { useDefault: i8, reflect: e8, wrapped: h3 }, r7) {
      i8 && !(this._$Ej ??= /* @__PURE__ */ new Map()).has(t6) && (this._$Ej.set(t6, r7 ?? s4 ?? this[t6]), true !== h3 || void 0 !== r7) || (this._$AL.has(t6) || (this.hasUpdated || i8 || (s4 = void 0), this._$AL.set(t6, s4)), true === e8 && this._$Em !== t6 && (this._$Eq ??= /* @__PURE__ */ new Set()).add(t6));
    }
    async _$EP() {
      this.isUpdatePending = true;
      try {
        await this._$ES;
      } catch (t7) {
        Promise.reject(t7);
      }
      const t6 = this.scheduleUpdate();
      return null != t6 && await t6, !this.isUpdatePending;
    }
    scheduleUpdate() {
      return this.performUpdate();
    }
    performUpdate() {
      if (!this.isUpdatePending) return;
      if (!this.hasUpdated) {
        if (this.renderRoot ??= this.createRenderRoot(), this._$Ep) {
          for (const [t8, s5] of this._$Ep) this[t8] = s5;
          this._$Ep = void 0;
        }
        const t7 = this.constructor.elementProperties;
        if (t7.size > 0) for (const [s5, i8] of t7) {
          const { wrapped: t8 } = i8, e8 = this[s5];
          true !== t8 || this._$AL.has(s5) || void 0 === e8 || this.C(s5, void 0, i8, e8);
        }
      }
      let t6 = false;
      const s4 = this._$AL;
      try {
        t6 = this.shouldUpdate(s4), t6 ? (this.willUpdate(s4), this._$EO?.forEach((t7) => t7.hostUpdate?.()), this.update(s4)) : this._$EM();
      } catch (s5) {
        throw t6 = false, this._$EM(), s5;
      }
      t6 && this._$AE(s4);
    }
    willUpdate(t6) {
    }
    _$AE(t6) {
      this._$EO?.forEach((t7) => t7.hostUpdated?.()), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t6)), this.updated(t6);
    }
    _$EM() {
      this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
    }
    get updateComplete() {
      return this.getUpdateComplete();
    }
    getUpdateComplete() {
      return this._$ES;
    }
    shouldUpdate(t6) {
      return true;
    }
    update(t6) {
      this._$Eq &&= this._$Eq.forEach((t7) => this._$ET(t7, this[t7])), this._$EM();
    }
    updated(t6) {
    }
    firstUpdated(t6) {
    }
  };
  y.elementStyles = [], y.shadowRootOptions = { mode: "open" }, y[d("elementProperties")] = /* @__PURE__ */ new Map(), y[d("finalized")] = /* @__PURE__ */ new Map(), p?.({ ReactiveElement: y }), (a.reactiveElementVersions ??= []).push("2.1.0");

  // node_modules/.pnpm/@lit+reactive-element@2.1.0/node_modules/@lit/reactive-element/decorators/property.js
  var o3 = { attribute: true, type: String, converter: u, reflect: false, hasChanged: f };
  var r3 = (t6 = o3, e8, r7) => {
    const { kind: n8, metadata: i8 } = r7;
    let s4 = globalThis.litPropertyMetadata.get(i8);
    if (void 0 === s4 && globalThis.litPropertyMetadata.set(i8, s4 = /* @__PURE__ */ new Map()), "setter" === n8 && ((t6 = Object.create(t6)).wrapped = true), s4.set(r7.name, t6), "accessor" === n8) {
      const { name: o10 } = r7;
      return { set(r8) {
        const n9 = e8.get.call(this);
        e8.set.call(this, r8), this.requestUpdate(o10, n9, t6);
      }, init(e9) {
        return void 0 !== e9 && this.C(o10, void 0, t6, e9), e9;
      } };
    }
    if ("setter" === n8) {
      const { name: o10 } = r7;
      return function(r8) {
        const n9 = this[o10];
        e8.call(this, r8), this.requestUpdate(o10, n9, t6);
      };
    }
    throw Error("Unsupported decorator location: " + n8);
  };
  function n3(t6) {
    return (e8, o10) => "object" == typeof o10 ? r3(t6, e8, o10) : ((t7, e9, o11) => {
      const r7 = e9.hasOwnProperty(o11);
      return e9.constructor.createProperty(o11, t7), r7 ? Object.getOwnPropertyDescriptor(e9, o11) : void 0;
    })(t6, e8, o10);
  }

  // node_modules/.pnpm/@lit+reactive-element@2.1.0/node_modules/@lit/reactive-element/decorators/state.js
  function r4(r7) {
    return n3({ ...r7, state: true, attribute: false });
  }

  // node_modules/.pnpm/@lit+reactive-element@2.1.0/node_modules/@lit/reactive-element/decorators/base.js
  var e3 = (e8, t6, c5) => (c5.configurable = true, c5.enumerable = true, Reflect.decorate && "object" != typeof t6 && Object.defineProperty(e8, t6, c5), c5);

  // node_modules/.pnpm/@lit+reactive-element@2.1.0/node_modules/@lit/reactive-element/decorators/query.js
  function e4(e8, r7) {
    return (n8, s4, i8) => {
      const o10 = (t6) => t6.renderRoot?.querySelector(e8) ?? null;
      if (r7) {
        const { get: e9, set: r8 } = "object" == typeof s4 ? n8 : i8 ?? (() => {
          const t6 = Symbol();
          return { get() {
            return this[t6];
          }, set(e10) {
            this[t6] = e10;
          } };
        })();
        return e3(n8, s4, { get() {
          let t6 = e9.call(this);
          return void 0 === t6 && (t6 = o10(this), (null !== t6 || this.hasUpdated) && r8.call(this, t6)), t6;
        } });
      }
      return e3(n8, s4, { get() {
        return o10(this);
      } });
    };
  }

  // node_modules/.pnpm/@lit+reactive-element@2.1.0/node_modules/@lit/reactive-element/decorators/query-async.js
  function r5(r7) {
    return (n8, e8) => e3(n8, e8, { async get() {
      return await this.updateComplete, this.renderRoot?.querySelector(r7) ?? null;
    } });
  }

  // node_modules/.pnpm/@lit+reactive-element@2.1.0/node_modules/@lit/reactive-element/decorators/query-assigned-elements.js
  function o4(o10) {
    return (e8, n8) => {
      const { slot: r7, selector: s4 } = o10 ?? {}, c5 = "slot" + (r7 ? `[name=${r7}]` : ":not([name])");
      return e3(e8, n8, { get() {
        const t6 = this.renderRoot?.querySelector(c5), e9 = t6?.assignedElements(o10) ?? [];
        return void 0 === s4 ? e9 : e9.filter((t7) => t7.matches(s4));
      } });
    };
  }

  // node_modules/.pnpm/lit-html@3.3.0/node_modules/lit-html/lit-html.js
  var t3 = globalThis;
  var i3 = t3.trustedTypes;
  var s2 = i3 ? i3.createPolicy("lit-html", { createHTML: (t6) => t6 }) : void 0;
  var e5 = "$lit$";
  var h2 = `lit$${Math.random().toFixed(9).slice(2)}$`;
  var o5 = "?" + h2;
  var n4 = `<${o5}>`;
  var r6 = document;
  var l2 = () => r6.createComment("");
  var c3 = (t6) => null === t6 || "object" != typeof t6 && "function" != typeof t6;
  var a2 = Array.isArray;
  var u2 = (t6) => a2(t6) || "function" == typeof t6?.[Symbol.iterator];
  var d2 = "[ 	\n\f\r]";
  var f2 = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
  var v = /-->/g;
  var _ = />/g;
  var m = RegExp(`>|${d2}(?:([^\\s"'>=/]+)(${d2}*=${d2}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
  var p2 = /'/g;
  var g = /"/g;
  var $ = /^(?:script|style|textarea|title)$/i;
  var y2 = (t6) => (i8, ...s4) => ({ _$litType$: t6, strings: i8, values: s4 });
  var x = y2(1);
  var b2 = y2(2);
  var w = y2(3);
  var T = Symbol.for("lit-noChange");
  var E = Symbol.for("lit-nothing");
  var A = /* @__PURE__ */ new WeakMap();
  var C = r6.createTreeWalker(r6, 129);
  function P(t6, i8) {
    if (!a2(t6) || !t6.hasOwnProperty("raw")) throw Error("invalid template strings array");
    return void 0 !== s2 ? s2.createHTML(i8) : i8;
  }
  var V = (t6, i8) => {
    const s4 = t6.length - 1, o10 = [];
    let r7, l5 = 2 === i8 ? "<svg>" : 3 === i8 ? "<math>" : "", c5 = f2;
    for (let i9 = 0; i9 < s4; i9++) {
      const s5 = t6[i9];
      let a4, u5, d3 = -1, y3 = 0;
      for (; y3 < s5.length && (c5.lastIndex = y3, u5 = c5.exec(s5), null !== u5); ) y3 = c5.lastIndex, c5 === f2 ? "!--" === u5[1] ? c5 = v : void 0 !== u5[1] ? c5 = _ : void 0 !== u5[2] ? ($.test(u5[2]) && (r7 = RegExp("</" + u5[2], "g")), c5 = m) : void 0 !== u5[3] && (c5 = m) : c5 === m ? ">" === u5[0] ? (c5 = r7 ?? f2, d3 = -1) : void 0 === u5[1] ? d3 = -2 : (d3 = c5.lastIndex - u5[2].length, a4 = u5[1], c5 = void 0 === u5[3] ? m : '"' === u5[3] ? g : p2) : c5 === g || c5 === p2 ? c5 = m : c5 === v || c5 === _ ? c5 = f2 : (c5 = m, r7 = void 0);
      const x2 = c5 === m && t6[i9 + 1].startsWith("/>") ? " " : "";
      l5 += c5 === f2 ? s5 + n4 : d3 >= 0 ? (o10.push(a4), s5.slice(0, d3) + e5 + s5.slice(d3) + h2 + x2) : s5 + h2 + (-2 === d3 ? i9 : x2);
    }
    return [P(t6, l5 + (t6[s4] || "<?>") + (2 === i8 ? "</svg>" : 3 === i8 ? "</math>" : "")), o10];
  };
  var N = class _N {
    constructor({ strings: t6, _$litType$: s4 }, n8) {
      let r7;
      this.parts = [];
      let c5 = 0, a4 = 0;
      const u5 = t6.length - 1, d3 = this.parts, [f4, v2] = V(t6, s4);
      if (this.el = _N.createElement(f4, n8), C.currentNode = this.el.content, 2 === s4 || 3 === s4) {
        const t7 = this.el.content.firstChild;
        t7.replaceWith(...t7.childNodes);
      }
      for (; null !== (r7 = C.nextNode()) && d3.length < u5; ) {
        if (1 === r7.nodeType) {
          if (r7.hasAttributes()) for (const t7 of r7.getAttributeNames()) if (t7.endsWith(e5)) {
            const i8 = v2[a4++], s5 = r7.getAttribute(t7).split(h2), e8 = /([.?@])?(.*)/.exec(i8);
            d3.push({ type: 1, index: c5, name: e8[2], strings: s5, ctor: "." === e8[1] ? H : "?" === e8[1] ? I : "@" === e8[1] ? L : k }), r7.removeAttribute(t7);
          } else t7.startsWith(h2) && (d3.push({ type: 6, index: c5 }), r7.removeAttribute(t7));
          if ($.test(r7.tagName)) {
            const t7 = r7.textContent.split(h2), s5 = t7.length - 1;
            if (s5 > 0) {
              r7.textContent = i3 ? i3.emptyScript : "";
              for (let i8 = 0; i8 < s5; i8++) r7.append(t7[i8], l2()), C.nextNode(), d3.push({ type: 2, index: ++c5 });
              r7.append(t7[s5], l2());
            }
          }
        } else if (8 === r7.nodeType) if (r7.data === o5) d3.push({ type: 2, index: c5 });
        else {
          let t7 = -1;
          for (; -1 !== (t7 = r7.data.indexOf(h2, t7 + 1)); ) d3.push({ type: 7, index: c5 }), t7 += h2.length - 1;
        }
        c5++;
      }
    }
    static createElement(t6, i8) {
      const s4 = r6.createElement("template");
      return s4.innerHTML = t6, s4;
    }
  };
  function S2(t6, i8, s4 = t6, e8) {
    if (i8 === T) return i8;
    let h3 = void 0 !== e8 ? s4._$Co?.[e8] : s4._$Cl;
    const o10 = c3(i8) ? void 0 : i8._$litDirective$;
    return h3?.constructor !== o10 && (h3?._$AO?.(false), void 0 === o10 ? h3 = void 0 : (h3 = new o10(t6), h3._$AT(t6, s4, e8)), void 0 !== e8 ? (s4._$Co ??= [])[e8] = h3 : s4._$Cl = h3), void 0 !== h3 && (i8 = S2(t6, h3._$AS(t6, i8.values), h3, e8)), i8;
  }
  var M = class {
    constructor(t6, i8) {
      this._$AV = [], this._$AN = void 0, this._$AD = t6, this._$AM = i8;
    }
    get parentNode() {
      return this._$AM.parentNode;
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    u(t6) {
      const { el: { content: i8 }, parts: s4 } = this._$AD, e8 = (t6?.creationScope ?? r6).importNode(i8, true);
      C.currentNode = e8;
      let h3 = C.nextNode(), o10 = 0, n8 = 0, l5 = s4[0];
      for (; void 0 !== l5; ) {
        if (o10 === l5.index) {
          let i9;
          2 === l5.type ? i9 = new R(h3, h3.nextSibling, this, t6) : 1 === l5.type ? i9 = new l5.ctor(h3, l5.name, l5.strings, this, t6) : 6 === l5.type && (i9 = new z(h3, this, t6)), this._$AV.push(i9), l5 = s4[++n8];
        }
        o10 !== l5?.index && (h3 = C.nextNode(), o10++);
      }
      return C.currentNode = r6, e8;
    }
    p(t6) {
      let i8 = 0;
      for (const s4 of this._$AV) void 0 !== s4 && (void 0 !== s4.strings ? (s4._$AI(t6, s4, i8), i8 += s4.strings.length - 2) : s4._$AI(t6[i8])), i8++;
    }
  };
  var R = class _R {
    get _$AU() {
      return this._$AM?._$AU ?? this._$Cv;
    }
    constructor(t6, i8, s4, e8) {
      this.type = 2, this._$AH = E, this._$AN = void 0, this._$AA = t6, this._$AB = i8, this._$AM = s4, this.options = e8, this._$Cv = e8?.isConnected ?? true;
    }
    get parentNode() {
      let t6 = this._$AA.parentNode;
      const i8 = this._$AM;
      return void 0 !== i8 && 11 === t6?.nodeType && (t6 = i8.parentNode), t6;
    }
    get startNode() {
      return this._$AA;
    }
    get endNode() {
      return this._$AB;
    }
    _$AI(t6, i8 = this) {
      t6 = S2(this, t6, i8), c3(t6) ? t6 === E || null == t6 || "" === t6 ? (this._$AH !== E && this._$AR(), this._$AH = E) : t6 !== this._$AH && t6 !== T && this._(t6) : void 0 !== t6._$litType$ ? this.$(t6) : void 0 !== t6.nodeType ? this.T(t6) : u2(t6) ? this.k(t6) : this._(t6);
    }
    O(t6) {
      return this._$AA.parentNode.insertBefore(t6, this._$AB);
    }
    T(t6) {
      this._$AH !== t6 && (this._$AR(), this._$AH = this.O(t6));
    }
    _(t6) {
      this._$AH !== E && c3(this._$AH) ? this._$AA.nextSibling.data = t6 : this.T(r6.createTextNode(t6)), this._$AH = t6;
    }
    $(t6) {
      const { values: i8, _$litType$: s4 } = t6, e8 = "number" == typeof s4 ? this._$AC(t6) : (void 0 === s4.el && (s4.el = N.createElement(P(s4.h, s4.h[0]), this.options)), s4);
      if (this._$AH?._$AD === e8) this._$AH.p(i8);
      else {
        const t7 = new M(e8, this), s5 = t7.u(this.options);
        t7.p(i8), this.T(s5), this._$AH = t7;
      }
    }
    _$AC(t6) {
      let i8 = A.get(t6.strings);
      return void 0 === i8 && A.set(t6.strings, i8 = new N(t6)), i8;
    }
    k(t6) {
      a2(this._$AH) || (this._$AH = [], this._$AR());
      const i8 = this._$AH;
      let s4, e8 = 0;
      for (const h3 of t6) e8 === i8.length ? i8.push(s4 = new _R(this.O(l2()), this.O(l2()), this, this.options)) : s4 = i8[e8], s4._$AI(h3), e8++;
      e8 < i8.length && (this._$AR(s4 && s4._$AB.nextSibling, e8), i8.length = e8);
    }
    _$AR(t6 = this._$AA.nextSibling, i8) {
      for (this._$AP?.(false, true, i8); t6 && t6 !== this._$AB; ) {
        const i9 = t6.nextSibling;
        t6.remove(), t6 = i9;
      }
    }
    setConnected(t6) {
      void 0 === this._$AM && (this._$Cv = t6, this._$AP?.(t6));
    }
  };
  var k = class {
    get tagName() {
      return this.element.tagName;
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    constructor(t6, i8, s4, e8, h3) {
      this.type = 1, this._$AH = E, this._$AN = void 0, this.element = t6, this.name = i8, this._$AM = e8, this.options = h3, s4.length > 2 || "" !== s4[0] || "" !== s4[1] ? (this._$AH = Array(s4.length - 1).fill(new String()), this.strings = s4) : this._$AH = E;
    }
    _$AI(t6, i8 = this, s4, e8) {
      const h3 = this.strings;
      let o10 = false;
      if (void 0 === h3) t6 = S2(this, t6, i8, 0), o10 = !c3(t6) || t6 !== this._$AH && t6 !== T, o10 && (this._$AH = t6);
      else {
        const e9 = t6;
        let n8, r7;
        for (t6 = h3[0], n8 = 0; n8 < h3.length - 1; n8++) r7 = S2(this, e9[s4 + n8], i8, n8), r7 === T && (r7 = this._$AH[n8]), o10 ||= !c3(r7) || r7 !== this._$AH[n8], r7 === E ? t6 = E : t6 !== E && (t6 += (r7 ?? "") + h3[n8 + 1]), this._$AH[n8] = r7;
      }
      o10 && !e8 && this.j(t6);
    }
    j(t6) {
      t6 === E ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t6 ?? "");
    }
  };
  var H = class extends k {
    constructor() {
      super(...arguments), this.type = 3;
    }
    j(t6) {
      this.element[this.name] = t6 === E ? void 0 : t6;
    }
  };
  var I = class extends k {
    constructor() {
      super(...arguments), this.type = 4;
    }
    j(t6) {
      this.element.toggleAttribute(this.name, !!t6 && t6 !== E);
    }
  };
  var L = class extends k {
    constructor(t6, i8, s4, e8, h3) {
      super(t6, i8, s4, e8, h3), this.type = 5;
    }
    _$AI(t6, i8 = this) {
      if ((t6 = S2(this, t6, i8, 0) ?? E) === T) return;
      const s4 = this._$AH, e8 = t6 === E && s4 !== E || t6.capture !== s4.capture || t6.once !== s4.once || t6.passive !== s4.passive, h3 = t6 !== E && (s4 === E || e8);
      e8 && this.element.removeEventListener(this.name, this, s4), h3 && this.element.addEventListener(this.name, this, t6), this._$AH = t6;
    }
    handleEvent(t6) {
      "function" == typeof this._$AH ? this._$AH.call(this.options?.host ?? this.element, t6) : this._$AH.handleEvent(t6);
    }
  };
  var z = class {
    constructor(t6, i8, s4) {
      this.element = t6, this.type = 6, this._$AN = void 0, this._$AM = i8, this.options = s4;
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    _$AI(t6) {
      S2(this, t6);
    }
  };
  var Z = { M: e5, P: h2, A: o5, C: 1, L: V, R: M, D: u2, V: S2, I: R, H: k, N: I, U: L, B: H, F: z };
  var j = t3.litHtmlPolyfillSupport;
  j?.(N, R), (t3.litHtmlVersions ??= []).push("3.3.0");
  var B = (t6, i8, s4) => {
    const e8 = s4?.renderBefore ?? i8;
    let h3 = e8._$litPart$;
    if (void 0 === h3) {
      const t7 = s4?.renderBefore ?? null;
      e8._$litPart$ = h3 = new R(i8.insertBefore(l2(), t7), t7, void 0, s4 ?? {});
    }
    return h3._$AI(t6), h3;
  };

  // node_modules/.pnpm/lit-element@4.2.0/node_modules/lit-element/lit-element.js
  var s3 = globalThis;
  var i4 = class extends y {
    constructor() {
      super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
    }
    createRenderRoot() {
      const t6 = super.createRenderRoot();
      return this.renderOptions.renderBefore ??= t6.firstChild, t6;
    }
    update(t6) {
      const r7 = this.render();
      this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t6), this._$Do = B(r7, this.renderRoot, this.renderOptions);
    }
    connectedCallback() {
      super.connectedCallback(), this._$Do?.setConnected(true);
    }
    disconnectedCallback() {
      super.disconnectedCallback(), this._$Do?.setConnected(false);
    }
    render() {
      return T;
    }
  };
  i4._$litElement$ = true, i4["finalized"] = true, s3.litElementHydrateSupport?.({ LitElement: i4 });
  var o6 = s3.litElementPolyfillSupport;
  o6?.({ LitElement: i4 });
  (s3.litElementVersions ??= []).push("4.2.0");

  // node_modules/.pnpm/lit-html@3.3.0/node_modules/lit-html/is-server.js
  var o7 = false;

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/elevation/internal/elevation.js
  var Elevation = class extends i4 {
    connectedCallback() {
      super.connectedCallback();
      this.setAttribute("aria-hidden", "true");
    }
    render() {
      return x`<span class="shadow"></span>`;
    }
  };

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/elevation/internal/elevation-styles.js
  var styles = i`:host,.shadow,.shadow::before,.shadow::after{border-radius:inherit;inset:0;position:absolute;transition-duration:inherit;transition-property:inherit;transition-timing-function:inherit}:host{display:flex;pointer-events:none;transition-property:box-shadow,opacity}.shadow::before,.shadow::after{content:"";transition-property:box-shadow,opacity;--_level: var(--md-elevation-level, 0);--_shadow-color: var(--md-elevation-shadow-color, var(--md-sys-color-shadow, #000))}.shadow::before{box-shadow:0px calc(1px*(clamp(0,var(--_level),1) + clamp(0,var(--_level) - 3,1) + 2*clamp(0,var(--_level) - 4,1))) calc(1px*(2*clamp(0,var(--_level),1) + clamp(0,var(--_level) - 2,1) + clamp(0,var(--_level) - 4,1))) 0px var(--_shadow-color);opacity:.3}.shadow::after{box-shadow:0px calc(1px*(clamp(0,var(--_level),1) + clamp(0,var(--_level) - 1,1) + 2*clamp(0,var(--_level) - 2,3))) calc(1px*(3*clamp(0,var(--_level),2) + 2*clamp(0,var(--_level) - 2,3))) calc(1px*(clamp(0,var(--_level),4) + 2*clamp(0,var(--_level) - 4,1))) var(--_shadow-color);opacity:.15}
`;

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/elevation/elevation.js
  var MdElevation = class MdElevation2 extends Elevation {
  };
  MdElevation.styles = [styles];
  MdElevation = __decorate([
    t("md-elevation")
  ], MdElevation);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/internal/controller/attachable-controller.js
  var ATTACHABLE_CONTROLLER = Symbol("attachableController");
  var FOR_ATTRIBUTE_OBSERVER;
  if (!o7) {
    FOR_ATTRIBUTE_OBSERVER = new MutationObserver((records) => {
      for (const record of records) {
        record.target[ATTACHABLE_CONTROLLER]?.hostConnected();
      }
    });
  }
  var AttachableController = class {
    get htmlFor() {
      return this.host.getAttribute("for");
    }
    set htmlFor(htmlFor) {
      if (htmlFor === null) {
        this.host.removeAttribute("for");
      } else {
        this.host.setAttribute("for", htmlFor);
      }
    }
    get control() {
      if (this.host.hasAttribute("for")) {
        if (!this.htmlFor || !this.host.isConnected) {
          return null;
        }
        return this.host.getRootNode().querySelector(`#${this.htmlFor}`);
      }
      return this.currentControl || this.host.parentElement;
    }
    set control(control) {
      if (control) {
        this.attach(control);
      } else {
        this.detach();
      }
    }
    /**
     * Creates a new controller for an `Attachable` element.
     *
     * @param host The `Attachable` element.
     * @param onControlChange A callback with two parameters for the previous and
     *     next control. An `Attachable` element may perform setup or teardown
     *     logic whenever the control changes.
     */
    constructor(host, onControlChange) {
      this.host = host;
      this.onControlChange = onControlChange;
      this.currentControl = null;
      host.addController(this);
      host[ATTACHABLE_CONTROLLER] = this;
      FOR_ATTRIBUTE_OBSERVER?.observe(host, { attributeFilter: ["for"] });
    }
    attach(control) {
      if (control === this.currentControl) {
        return;
      }
      this.setCurrentControl(control);
      this.host.removeAttribute("for");
    }
    detach() {
      this.setCurrentControl(null);
      this.host.setAttribute("for", "");
    }
    /** @private */
    hostConnected() {
      this.setCurrentControl(this.control);
    }
    /** @private */
    hostDisconnected() {
      this.setCurrentControl(null);
    }
    setCurrentControl(control) {
      this.onControlChange(this.currentControl, control);
      this.currentControl = control;
    }
  };

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/focus/internal/focus-ring.js
  var EVENTS = ["focusin", "focusout", "pointerdown"];
  var FocusRing = class extends i4 {
    constructor() {
      super(...arguments);
      this.visible = false;
      this.inward = false;
      this.attachableController = new AttachableController(this, this.onControlChange.bind(this));
    }
    get htmlFor() {
      return this.attachableController.htmlFor;
    }
    set htmlFor(htmlFor) {
      this.attachableController.htmlFor = htmlFor;
    }
    get control() {
      return this.attachableController.control;
    }
    set control(control) {
      this.attachableController.control = control;
    }
    attach(control) {
      this.attachableController.attach(control);
    }
    detach() {
      this.attachableController.detach();
    }
    connectedCallback() {
      super.connectedCallback();
      this.setAttribute("aria-hidden", "true");
    }
    /** @private */
    handleEvent(event) {
      if (event[HANDLED_BY_FOCUS_RING]) {
        return;
      }
      switch (event.type) {
        default:
          return;
        case "focusin":
          this.visible = this.control?.matches(":focus-visible") ?? false;
          break;
        case "focusout":
        case "pointerdown":
          this.visible = false;
          break;
      }
      event[HANDLED_BY_FOCUS_RING] = true;
    }
    onControlChange(prev, next) {
      if (o7)
        return;
      for (const event of EVENTS) {
        prev?.removeEventListener(event, this);
        next?.addEventListener(event, this);
      }
    }
    update(changed) {
      if (changed.has("visible")) {
        this.dispatchEvent(new Event("visibility-changed"));
      }
      super.update(changed);
    }
  };
  __decorate([
    n3({ type: Boolean, reflect: true })
  ], FocusRing.prototype, "visible", void 0);
  __decorate([
    n3({ type: Boolean, reflect: true })
  ], FocusRing.prototype, "inward", void 0);
  var HANDLED_BY_FOCUS_RING = Symbol("handledByFocusRing");

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/focus/internal/focus-ring-styles.js
  var styles2 = i`:host{animation-delay:0s,calc(var(--md-focus-ring-duration, 600ms)*.25);animation-duration:calc(var(--md-focus-ring-duration, 600ms)*.25),calc(var(--md-focus-ring-duration, 600ms)*.75);animation-timing-function:cubic-bezier(0.2, 0, 0, 1);box-sizing:border-box;color:var(--md-focus-ring-color, var(--md-sys-color-secondary, #625b71));display:none;pointer-events:none;position:absolute}:host([visible]){display:flex}:host(:not([inward])){animation-name:outward-grow,outward-shrink;border-end-end-radius:calc(var(--md-focus-ring-shape-end-end, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) + var(--md-focus-ring-outward-offset, 2px));border-end-start-radius:calc(var(--md-focus-ring-shape-end-start, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) + var(--md-focus-ring-outward-offset, 2px));border-start-end-radius:calc(var(--md-focus-ring-shape-start-end, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) + var(--md-focus-ring-outward-offset, 2px));border-start-start-radius:calc(var(--md-focus-ring-shape-start-start, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) + var(--md-focus-ring-outward-offset, 2px));inset:calc(-1*var(--md-focus-ring-outward-offset, 2px));outline:var(--md-focus-ring-width, 3px) solid currentColor}:host([inward]){animation-name:inward-grow,inward-shrink;border-end-end-radius:calc(var(--md-focus-ring-shape-end-end, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) - var(--md-focus-ring-inward-offset, 0px));border-end-start-radius:calc(var(--md-focus-ring-shape-end-start, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) - var(--md-focus-ring-inward-offset, 0px));border-start-end-radius:calc(var(--md-focus-ring-shape-start-end, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) - var(--md-focus-ring-inward-offset, 0px));border-start-start-radius:calc(var(--md-focus-ring-shape-start-start, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) - var(--md-focus-ring-inward-offset, 0px));border:var(--md-focus-ring-width, 3px) solid currentColor;inset:var(--md-focus-ring-inward-offset, 0px)}@keyframes outward-grow{from{outline-width:0}to{outline-width:var(--md-focus-ring-active-width, 8px)}}@keyframes outward-shrink{from{outline-width:var(--md-focus-ring-active-width, 8px)}}@keyframes inward-grow{from{border-width:0}to{border-width:var(--md-focus-ring-active-width, 8px)}}@keyframes inward-shrink{from{border-width:var(--md-focus-ring-active-width, 8px)}}@media(prefers-reduced-motion){:host{animation:none}}
`;

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/focus/md-focus-ring.js
  var MdFocusRing = class MdFocusRing2 extends FocusRing {
  };
  MdFocusRing.styles = [styles2];
  MdFocusRing = __decorate([
    t("md-focus-ring")
  ], MdFocusRing);

  // node_modules/.pnpm/lit-html@3.3.0/node_modules/lit-html/directive.js
  var t4 = { ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 };
  var e6 = (t6) => (...e8) => ({ _$litDirective$: t6, values: e8 });
  var i5 = class {
    constructor(t6) {
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    _$AT(t6, e8, i8) {
      this._$Ct = t6, this._$AM = e8, this._$Ci = i8;
    }
    _$AS(t6, e8) {
      return this.update(t6, e8);
    }
    update(t6, e8) {
      return this.render(...e8);
    }
  };

  // node_modules/.pnpm/lit-html@3.3.0/node_modules/lit-html/directives/class-map.js
  var e7 = e6(class extends i5 {
    constructor(t6) {
      if (super(t6), t6.type !== t4.ATTRIBUTE || "class" !== t6.name || t6.strings?.length > 2) throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.");
    }
    render(t6) {
      return " " + Object.keys(t6).filter((s4) => t6[s4]).join(" ") + " ";
    }
    update(s4, [i8]) {
      if (void 0 === this.st) {
        this.st = /* @__PURE__ */ new Set(), void 0 !== s4.strings && (this.nt = new Set(s4.strings.join(" ").split(/\s/).filter((t6) => "" !== t6)));
        for (const t6 in i8) i8[t6] && !this.nt?.has(t6) && this.st.add(t6);
        return this.render(i8);
      }
      const r7 = s4.element.classList;
      for (const t6 of this.st) t6 in i8 || (r7.remove(t6), this.st.delete(t6));
      for (const t6 in i8) {
        const s5 = !!i8[t6];
        s5 === this.st.has(t6) || this.nt?.has(t6) || (s5 ? (r7.add(t6), this.st.add(t6)) : (r7.remove(t6), this.st.delete(t6)));
      }
      return T;
    }
  });

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/internal/motion/animation.js
  var EASING = {
    STANDARD: "cubic-bezier(0.2, 0, 0, 1)",
    STANDARD_ACCELERATE: "cubic-bezier(.3,0,1,1)",
    STANDARD_DECELERATE: "cubic-bezier(0,0,0,1)",
    EMPHASIZED: "cubic-bezier(.3,0,0,1)",
    EMPHASIZED_ACCELERATE: "cubic-bezier(.3,0,.8,.15)",
    EMPHASIZED_DECELERATE: "cubic-bezier(.05,.7,.1,1)"
  };

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/ripple/internal/ripple.js
  var PRESS_GROW_MS = 450;
  var MINIMUM_PRESS_MS = 225;
  var INITIAL_ORIGIN_SCALE = 0.2;
  var PADDING = 10;
  var SOFT_EDGE_MINIMUM_SIZE = 75;
  var SOFT_EDGE_CONTAINER_RATIO = 0.35;
  var PRESS_PSEUDO = "::after";
  var ANIMATION_FILL = "forwards";
  var State;
  (function(State2) {
    State2[State2["INACTIVE"] = 0] = "INACTIVE";
    State2[State2["TOUCH_DELAY"] = 1] = "TOUCH_DELAY";
    State2[State2["HOLDING"] = 2] = "HOLDING";
    State2[State2["WAITING_FOR_CLICK"] = 3] = "WAITING_FOR_CLICK";
  })(State || (State = {}));
  var EVENTS2 = [
    "click",
    "contextmenu",
    "pointercancel",
    "pointerdown",
    "pointerenter",
    "pointerleave",
    "pointerup"
  ];
  var TOUCH_DELAY_MS = 150;
  var FORCED_COLORS = o7 ? null : window.matchMedia("(forced-colors: active)");
  var Ripple = class extends i4 {
    constructor() {
      super(...arguments);
      this.disabled = false;
      this.hovered = false;
      this.pressed = false;
      this.rippleSize = "";
      this.rippleScale = "";
      this.initialSize = 0;
      this.state = State.INACTIVE;
      this.checkBoundsAfterContextMenu = false;
      this.attachableController = new AttachableController(this, this.onControlChange.bind(this));
    }
    get htmlFor() {
      return this.attachableController.htmlFor;
    }
    set htmlFor(htmlFor) {
      this.attachableController.htmlFor = htmlFor;
    }
    get control() {
      return this.attachableController.control;
    }
    set control(control) {
      this.attachableController.control = control;
    }
    attach(control) {
      this.attachableController.attach(control);
    }
    detach() {
      this.attachableController.detach();
    }
    connectedCallback() {
      super.connectedCallback();
      this.setAttribute("aria-hidden", "true");
    }
    render() {
      const classes = {
        "hovered": this.hovered,
        "pressed": this.pressed
      };
      return x`<div class="surface ${e7(classes)}"></div>`;
    }
    update(changedProps) {
      if (changedProps.has("disabled") && this.disabled) {
        this.hovered = false;
        this.pressed = false;
      }
      super.update(changedProps);
    }
    /**
     * TODO(b/269799771): make private
     * @private only public for slider
     */
    handlePointerenter(event) {
      if (!this.shouldReactToEvent(event)) {
        return;
      }
      this.hovered = true;
    }
    /**
     * TODO(b/269799771): make private
     * @private only public for slider
     */
    handlePointerleave(event) {
      if (!this.shouldReactToEvent(event)) {
        return;
      }
      this.hovered = false;
      if (this.state !== State.INACTIVE) {
        this.endPressAnimation();
      }
    }
    handlePointerup(event) {
      if (!this.shouldReactToEvent(event)) {
        return;
      }
      if (this.state === State.HOLDING) {
        this.state = State.WAITING_FOR_CLICK;
        return;
      }
      if (this.state === State.TOUCH_DELAY) {
        this.state = State.WAITING_FOR_CLICK;
        this.startPressAnimation(this.rippleStartEvent);
        return;
      }
    }
    async handlePointerdown(event) {
      if (!this.shouldReactToEvent(event)) {
        return;
      }
      this.rippleStartEvent = event;
      if (!this.isTouch(event)) {
        this.state = State.WAITING_FOR_CLICK;
        this.startPressAnimation(event);
        return;
      }
      if (this.checkBoundsAfterContextMenu && !this.inBounds(event)) {
        return;
      }
      this.checkBoundsAfterContextMenu = false;
      this.state = State.TOUCH_DELAY;
      await new Promise((resolve) => {
        setTimeout(resolve, TOUCH_DELAY_MS);
      });
      if (this.state !== State.TOUCH_DELAY) {
        return;
      }
      this.state = State.HOLDING;
      this.startPressAnimation(event);
    }
    handleClick() {
      if (this.disabled) {
        return;
      }
      if (this.state === State.WAITING_FOR_CLICK) {
        this.endPressAnimation();
        return;
      }
      if (this.state === State.INACTIVE) {
        this.startPressAnimation();
        this.endPressAnimation();
      }
    }
    handlePointercancel(event) {
      if (!this.shouldReactToEvent(event)) {
        return;
      }
      this.endPressAnimation();
    }
    handleContextmenu() {
      if (this.disabled) {
        return;
      }
      this.checkBoundsAfterContextMenu = true;
      this.endPressAnimation();
    }
    determineRippleSize() {
      const { height, width } = this.getBoundingClientRect();
      const maxDim = Math.max(height, width);
      const softEdgeSize = Math.max(SOFT_EDGE_CONTAINER_RATIO * maxDim, SOFT_EDGE_MINIMUM_SIZE);
      const initialSize = Math.floor(maxDim * INITIAL_ORIGIN_SCALE);
      const hypotenuse = Math.sqrt(width ** 2 + height ** 2);
      const maxRadius = hypotenuse + PADDING;
      this.initialSize = initialSize;
      this.rippleScale = `${(maxRadius + softEdgeSize) / initialSize}`;
      this.rippleSize = `${initialSize}px`;
    }
    getNormalizedPointerEventCoords(pointerEvent) {
      const { scrollX, scrollY } = window;
      const { left, top } = this.getBoundingClientRect();
      const documentX = scrollX + left;
      const documentY = scrollY + top;
      const { pageX, pageY } = pointerEvent;
      return { x: pageX - documentX, y: pageY - documentY };
    }
    getTranslationCoordinates(positionEvent) {
      const { height, width } = this.getBoundingClientRect();
      const endPoint = {
        x: (width - this.initialSize) / 2,
        y: (height - this.initialSize) / 2
      };
      let startPoint;
      if (positionEvent instanceof PointerEvent) {
        startPoint = this.getNormalizedPointerEventCoords(positionEvent);
      } else {
        startPoint = {
          x: width / 2,
          y: height / 2
        };
      }
      startPoint = {
        x: startPoint.x - this.initialSize / 2,
        y: startPoint.y - this.initialSize / 2
      };
      return { startPoint, endPoint };
    }
    startPressAnimation(positionEvent) {
      if (!this.mdRoot) {
        return;
      }
      this.pressed = true;
      this.growAnimation?.cancel();
      this.determineRippleSize();
      const { startPoint, endPoint } = this.getTranslationCoordinates(positionEvent);
      const translateStart = `${startPoint.x}px, ${startPoint.y}px`;
      const translateEnd = `${endPoint.x}px, ${endPoint.y}px`;
      this.growAnimation = this.mdRoot.animate({
        top: [0, 0],
        left: [0, 0],
        height: [this.rippleSize, this.rippleSize],
        width: [this.rippleSize, this.rippleSize],
        transform: [
          `translate(${translateStart}) scale(1)`,
          `translate(${translateEnd}) scale(${this.rippleScale})`
        ]
      }, {
        pseudoElement: PRESS_PSEUDO,
        duration: PRESS_GROW_MS,
        easing: EASING.STANDARD,
        fill: ANIMATION_FILL
      });
    }
    async endPressAnimation() {
      this.rippleStartEvent = void 0;
      this.state = State.INACTIVE;
      const animation = this.growAnimation;
      let pressAnimationPlayState = Infinity;
      if (typeof animation?.currentTime === "number") {
        pressAnimationPlayState = animation.currentTime;
      } else if (animation?.currentTime) {
        pressAnimationPlayState = animation.currentTime.to("ms").value;
      }
      if (pressAnimationPlayState >= MINIMUM_PRESS_MS) {
        this.pressed = false;
        return;
      }
      await new Promise((resolve) => {
        setTimeout(resolve, MINIMUM_PRESS_MS - pressAnimationPlayState);
      });
      if (this.growAnimation !== animation) {
        return;
      }
      this.pressed = false;
    }
    /**
     * Returns `true` if
     *  - the ripple element is enabled
     *  - the pointer is primary for the input type
     *  - the pointer is the pointer that started the interaction, or will start
     * the interaction
     *  - the pointer is a touch, or the pointer state has the primary button
     * held, or the pointer is hovering
     */
    shouldReactToEvent(event) {
      if (this.disabled || !event.isPrimary) {
        return false;
      }
      if (this.rippleStartEvent && this.rippleStartEvent.pointerId !== event.pointerId) {
        return false;
      }
      if (event.type === "pointerenter" || event.type === "pointerleave") {
        return !this.isTouch(event);
      }
      const isPrimaryButton = event.buttons === 1;
      return this.isTouch(event) || isPrimaryButton;
    }
    /**
     * Check if the event is within the bounds of the element.
     *
     * This is only needed for the "stuck" contextmenu longpress on Chrome.
     */
    inBounds({ x: x2, y: y3 }) {
      const { top, left, bottom, right } = this.getBoundingClientRect();
      return x2 >= left && x2 <= right && y3 >= top && y3 <= bottom;
    }
    isTouch({ pointerType }) {
      return pointerType === "touch";
    }
    /** @private */
    async handleEvent(event) {
      if (FORCED_COLORS?.matches) {
        return;
      }
      switch (event.type) {
        case "click":
          this.handleClick();
          break;
        case "contextmenu":
          this.handleContextmenu();
          break;
        case "pointercancel":
          this.handlePointercancel(event);
          break;
        case "pointerdown":
          await this.handlePointerdown(event);
          break;
        case "pointerenter":
          this.handlePointerenter(event);
          break;
        case "pointerleave":
          this.handlePointerleave(event);
          break;
        case "pointerup":
          this.handlePointerup(event);
          break;
        default:
          break;
      }
    }
    onControlChange(prev, next) {
      if (o7)
        return;
      for (const event of EVENTS2) {
        prev?.removeEventListener(event, this);
        next?.addEventListener(event, this);
      }
    }
  };
  __decorate([
    n3({ type: Boolean, reflect: true })
  ], Ripple.prototype, "disabled", void 0);
  __decorate([
    r4()
  ], Ripple.prototype, "hovered", void 0);
  __decorate([
    r4()
  ], Ripple.prototype, "pressed", void 0);
  __decorate([
    e4(".surface")
  ], Ripple.prototype, "mdRoot", void 0);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/ripple/internal/ripple-styles.js
  var styles3 = i`:host{display:flex;margin:auto;pointer-events:none}:host([disabled]){display:none}@media(forced-colors: active){:host{display:none}}:host,.surface{border-radius:inherit;position:absolute;inset:0;overflow:hidden}.surface{-webkit-tap-highlight-color:rgba(0,0,0,0)}.surface::before,.surface::after{content:"";opacity:0;position:absolute}.surface::before{background-color:var(--md-ripple-hover-color, var(--md-sys-color-on-surface, #1d1b20));inset:0;transition:opacity 15ms linear,background-color 15ms linear}.surface::after{background:radial-gradient(closest-side, var(--md-ripple-pressed-color, var(--md-sys-color-on-surface, #1d1b20)) max(100% - 70px, 65%), transparent 100%);transform-origin:center center;transition:opacity 375ms linear}.hovered::before{background-color:var(--md-ripple-hover-color, var(--md-sys-color-on-surface, #1d1b20));opacity:var(--md-ripple-hover-opacity, 0.08)}.pressed::after{opacity:var(--md-ripple-pressed-opacity, 0.12);transition-duration:105ms}
`;

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/ripple/ripple.js
  var MdRipple = class MdRipple2 extends Ripple {
  };
  MdRipple.styles = [styles3];
  MdRipple = __decorate([
    t("md-ripple")
  ], MdRipple);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/internal/aria/aria.js
  var ARIA_PROPERTIES = [
    "role",
    "ariaAtomic",
    "ariaAutoComplete",
    "ariaBusy",
    "ariaChecked",
    "ariaColCount",
    "ariaColIndex",
    "ariaColSpan",
    "ariaCurrent",
    "ariaDisabled",
    "ariaExpanded",
    "ariaHasPopup",
    "ariaHidden",
    "ariaInvalid",
    "ariaKeyShortcuts",
    "ariaLabel",
    "ariaLevel",
    "ariaLive",
    "ariaModal",
    "ariaMultiLine",
    "ariaMultiSelectable",
    "ariaOrientation",
    "ariaPlaceholder",
    "ariaPosInSet",
    "ariaPressed",
    "ariaReadOnly",
    "ariaRequired",
    "ariaRoleDescription",
    "ariaRowCount",
    "ariaRowIndex",
    "ariaRowSpan",
    "ariaSelected",
    "ariaSetSize",
    "ariaSort",
    "ariaValueMax",
    "ariaValueMin",
    "ariaValueNow",
    "ariaValueText"
  ];
  var ARIA_ATTRIBUTES = ARIA_PROPERTIES.map(ariaPropertyToAttribute);
  function isAriaAttribute(attribute) {
    return ARIA_ATTRIBUTES.includes(attribute);
  }
  function ariaPropertyToAttribute(property) {
    return property.replace("aria", "aria-").replace(/Elements?/g, "").toLowerCase();
  }

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/internal/aria/delegate.js
  var privateIgnoreAttributeChangesFor = Symbol("privateIgnoreAttributeChangesFor");
  function mixinDelegatesAria(base) {
    var _a2;
    if (o7) {
      return base;
    }
    class WithDelegatesAriaElement extends base {
      constructor() {
        super(...arguments);
        this[_a2] = /* @__PURE__ */ new Set();
      }
      attributeChangedCallback(name, oldValue, newValue) {
        if (!isAriaAttribute(name)) {
          super.attributeChangedCallback(name, oldValue, newValue);
          return;
        }
        if (this[privateIgnoreAttributeChangesFor].has(name)) {
          return;
        }
        this[privateIgnoreAttributeChangesFor].add(name);
        this.removeAttribute(name);
        this[privateIgnoreAttributeChangesFor].delete(name);
        const dataProperty = ariaAttributeToDataProperty(name);
        if (newValue === null) {
          delete this.dataset[dataProperty];
        } else {
          this.dataset[dataProperty] = newValue;
        }
        this.requestUpdate(ariaAttributeToDataProperty(name), oldValue);
      }
      getAttribute(name) {
        if (isAriaAttribute(name)) {
          return super.getAttribute(ariaAttributeToDataAttribute(name));
        }
        return super.getAttribute(name);
      }
      removeAttribute(name) {
        super.removeAttribute(name);
        if (isAriaAttribute(name)) {
          super.removeAttribute(ariaAttributeToDataAttribute(name));
          this.requestUpdate();
        }
      }
    }
    _a2 = privateIgnoreAttributeChangesFor;
    setupDelegatesAriaProperties(WithDelegatesAriaElement);
    return WithDelegatesAriaElement;
  }
  function setupDelegatesAriaProperties(ctor) {
    for (const ariaProperty of ARIA_PROPERTIES) {
      const ariaAttribute = ariaPropertyToAttribute(ariaProperty);
      const dataAttribute = ariaAttributeToDataAttribute(ariaAttribute);
      const dataProperty = ariaAttributeToDataProperty(ariaAttribute);
      ctor.createProperty(ariaProperty, {
        attribute: ariaAttribute,
        noAccessor: true
      });
      ctor.createProperty(Symbol(dataAttribute), {
        attribute: dataAttribute,
        noAccessor: true
      });
      Object.defineProperty(ctor.prototype, ariaProperty, {
        configurable: true,
        enumerable: true,
        get() {
          return this.dataset[dataProperty] ?? null;
        },
        set(value) {
          const prevValue = this.dataset[dataProperty] ?? null;
          if (value === prevValue) {
            return;
          }
          if (value === null) {
            delete this.dataset[dataProperty];
          } else {
            this.dataset[dataProperty] = value;
          }
          this.requestUpdate(ariaProperty, prevValue);
        }
      });
    }
  }
  function ariaAttributeToDataAttribute(ariaAttribute) {
    return `data-${ariaAttribute}`;
  }
  function ariaAttributeToDataProperty(ariaAttribute) {
    return ariaAttribute.replace(/-\w/, (dashLetter) => dashLetter[1].toUpperCase());
  }

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/labs/behaviors/element-internals.js
  var internals = Symbol("internals");
  var privateInternals = Symbol("privateInternals");
  function mixinElementInternals(base) {
    class WithElementInternalsElement extends base {
      get [internals]() {
        if (!this[privateInternals]) {
          this[privateInternals] = this.attachInternals();
        }
        return this[privateInternals];
      }
    }
    return WithElementInternalsElement;
  }

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/internal/controller/form-submitter.js
  function setupFormSubmitter(ctor) {
    if (o7) {
      return;
    }
    ctor.addInitializer((instance) => {
      const submitter = instance;
      submitter.addEventListener("click", async (event) => {
        const { type, [internals]: elementInternals } = submitter;
        const { form } = elementInternals;
        if (!form || type === "button") {
          return;
        }
        await new Promise((resolve) => {
          setTimeout(resolve);
        });
        if (event.defaultPrevented) {
          return;
        }
        if (type === "reset") {
          form.reset();
          return;
        }
        form.addEventListener("submit", (submitEvent) => {
          Object.defineProperty(submitEvent, "submitter", {
            configurable: true,
            enumerable: true,
            get: () => submitter
          });
        }, { capture: true, once: true });
        elementInternals.setFormValue(submitter.value);
        form.requestSubmit();
      });
    });
  }

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/internal/events/form-label-activation.js
  function dispatchActivationClick(element) {
    const event = new MouseEvent("click", { bubbles: true });
    element.dispatchEvent(event);
    return event;
  }
  function isActivationClick(event) {
    if (event.currentTarget !== event.target) {
      return false;
    }
    if (event.composedPath()[0] !== event.target) {
      return false;
    }
    if (event.target.disabled) {
      return false;
    }
    return !squelchEvent(event);
  }
  function squelchEvent(event) {
    const squelched = isSquelchingEvents;
    if (squelched) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }
    squelchEventsForMicrotask();
    return squelched;
  }
  var isSquelchingEvents = false;
  async function squelchEventsForMicrotask() {
    isSquelchingEvents = true;
    await null;
    isSquelchingEvents = false;
  }

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/button/internal/button.js
  var buttonBaseClass = mixinDelegatesAria(mixinElementInternals(i4));
  var Button = class extends buttonBaseClass {
    get name() {
      return this.getAttribute("name") ?? "";
    }
    set name(name) {
      this.setAttribute("name", name);
    }
    /**
     * The associated form element with which this element's value will submit.
     */
    get form() {
      return this[internals].form;
    }
    constructor() {
      super();
      this.disabled = false;
      this.softDisabled = false;
      this.href = "";
      this.download = "";
      this.target = "";
      this.trailingIcon = false;
      this.hasIcon = false;
      this.type = "submit";
      this.value = "";
      if (!o7) {
        this.addEventListener("click", this.handleClick.bind(this));
      }
    }
    focus() {
      this.buttonElement?.focus();
    }
    blur() {
      this.buttonElement?.blur();
    }
    render() {
      const isRippleDisabled = !this.href && (this.disabled || this.softDisabled);
      const buttonOrLink = this.href ? this.renderLink() : this.renderButton();
      const buttonId = this.href ? "link" : "button";
      return x`
      ${this.renderElevationOrOutline?.()}
      <div class="background"></div>
      <md-focus-ring part="focus-ring" for=${buttonId}></md-focus-ring>
      <md-ripple
        part="ripple"
        for=${buttonId}
        ?disabled="${isRippleDisabled}"></md-ripple>
      ${buttonOrLink}
    `;
    }
    renderButton() {
      const { ariaLabel, ariaHasPopup, ariaExpanded } = this;
      return x`<button
      id="button"
      class="button"
      ?disabled=${this.disabled}
      aria-disabled=${this.softDisabled || E}
      aria-label="${ariaLabel || E}"
      aria-haspopup="${ariaHasPopup || E}"
      aria-expanded="${ariaExpanded || E}">
      ${this.renderContent()}
    </button>`;
    }
    renderLink() {
      const { ariaLabel, ariaHasPopup, ariaExpanded } = this;
      return x`<a
      id="link"
      class="button"
      aria-label="${ariaLabel || E}"
      aria-haspopup="${ariaHasPopup || E}"
      aria-expanded="${ariaExpanded || E}"
      href=${this.href}
      download=${this.download || E}
      target=${this.target || E}
      >${this.renderContent()}
    </a>`;
    }
    renderContent() {
      const icon = x`<slot
      name="icon"
      @slotchange="${this.handleSlotChange}"></slot>`;
      return x`
      <span class="touch"></span>
      ${this.trailingIcon ? E : icon}
      <span class="label"><slot></slot></span>
      ${this.trailingIcon ? icon : E}
    `;
    }
    handleClick(event) {
      if (!this.href && this.softDisabled) {
        event.stopImmediatePropagation();
        event.preventDefault();
        return;
      }
      if (!isActivationClick(event) || !this.buttonElement) {
        return;
      }
      this.focus();
      dispatchActivationClick(this.buttonElement);
    }
    handleSlotChange() {
      this.hasIcon = this.assignedIcons.length > 0;
    }
  };
  (() => {
    setupFormSubmitter(Button);
  })();
  Button.formAssociated = true;
  Button.shadowRootOptions = {
    mode: "open",
    delegatesFocus: true
  };
  __decorate([
    n3({ type: Boolean, reflect: true })
  ], Button.prototype, "disabled", void 0);
  __decorate([
    n3({ type: Boolean, attribute: "soft-disabled", reflect: true })
  ], Button.prototype, "softDisabled", void 0);
  __decorate([
    n3()
  ], Button.prototype, "href", void 0);
  __decorate([
    n3()
  ], Button.prototype, "download", void 0);
  __decorate([
    n3()
  ], Button.prototype, "target", void 0);
  __decorate([
    n3({ type: Boolean, attribute: "trailing-icon", reflect: true })
  ], Button.prototype, "trailingIcon", void 0);
  __decorate([
    n3({ type: Boolean, attribute: "has-icon", reflect: true })
  ], Button.prototype, "hasIcon", void 0);
  __decorate([
    n3()
  ], Button.prototype, "type", void 0);
  __decorate([
    n3({ reflect: true })
  ], Button.prototype, "value", void 0);
  __decorate([
    e4(".button")
  ], Button.prototype, "buttonElement", void 0);
  __decorate([
    o4({ slot: "icon", flatten: true })
  ], Button.prototype, "assignedIcons", void 0);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/button/internal/elevated-button.js
  var ElevatedButton = class extends Button {
    renderElevationOrOutline() {
      return x`<md-elevation part="elevation"></md-elevation>`;
    }
  };

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/button/internal/elevated-styles.js
  var styles4 = i`:host{--_container-color: var(--md-elevated-button-container-color, var(--md-sys-color-surface-container-low, #f7f2fa));--_container-elevation: var(--md-elevated-button-container-elevation, 1);--_container-height: var(--md-elevated-button-container-height, 40px);--_container-shadow-color: var(--md-elevated-button-container-shadow-color, var(--md-sys-color-shadow, #000));--_disabled-container-color: var(--md-elevated-button-disabled-container-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-container-elevation: var(--md-elevated-button-disabled-container-elevation, 0);--_disabled-container-opacity: var(--md-elevated-button-disabled-container-opacity, 0.12);--_disabled-label-text-color: var(--md-elevated-button-disabled-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-label-text-opacity: var(--md-elevated-button-disabled-label-text-opacity, 0.38);--_focus-container-elevation: var(--md-elevated-button-focus-container-elevation, 1);--_focus-label-text-color: var(--md-elevated-button-focus-label-text-color, var(--md-sys-color-primary, #6750a4));--_hover-container-elevation: var(--md-elevated-button-hover-container-elevation, 2);--_hover-label-text-color: var(--md-elevated-button-hover-label-text-color, var(--md-sys-color-primary, #6750a4));--_hover-state-layer-color: var(--md-elevated-button-hover-state-layer-color, var(--md-sys-color-primary, #6750a4));--_hover-state-layer-opacity: var(--md-elevated-button-hover-state-layer-opacity, 0.08);--_label-text-color: var(--md-elevated-button-label-text-color, var(--md-sys-color-primary, #6750a4));--_label-text-font: var(--md-elevated-button-label-text-font, var(--md-sys-typescale-label-large-font, var(--md-ref-typeface-plain, Roboto)));--_label-text-line-height: var(--md-elevated-button-label-text-line-height, var(--md-sys-typescale-label-large-line-height, 1.25rem));--_label-text-size: var(--md-elevated-button-label-text-size, var(--md-sys-typescale-label-large-size, 0.875rem));--_label-text-weight: var(--md-elevated-button-label-text-weight, var(--md-sys-typescale-label-large-weight, var(--md-ref-typeface-weight-medium, 500)));--_pressed-container-elevation: var(--md-elevated-button-pressed-container-elevation, 1);--_pressed-label-text-color: var(--md-elevated-button-pressed-label-text-color, var(--md-sys-color-primary, #6750a4));--_pressed-state-layer-color: var(--md-elevated-button-pressed-state-layer-color, var(--md-sys-color-primary, #6750a4));--_pressed-state-layer-opacity: var(--md-elevated-button-pressed-state-layer-opacity, 0.12);--_disabled-icon-color: var(--md-elevated-button-disabled-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-icon-opacity: var(--md-elevated-button-disabled-icon-opacity, 0.38);--_focus-icon-color: var(--md-elevated-button-focus-icon-color, var(--md-sys-color-primary, #6750a4));--_hover-icon-color: var(--md-elevated-button-hover-icon-color, var(--md-sys-color-primary, #6750a4));--_icon-color: var(--md-elevated-button-icon-color, var(--md-sys-color-primary, #6750a4));--_icon-size: var(--md-elevated-button-icon-size, 18px);--_pressed-icon-color: var(--md-elevated-button-pressed-icon-color, var(--md-sys-color-primary, #6750a4));--_container-shape-start-start: var(--md-elevated-button-container-shape-start-start, var(--md-elevated-button-container-shape, var(--md-sys-shape-corner-full, 9999px)));--_container-shape-start-end: var(--md-elevated-button-container-shape-start-end, var(--md-elevated-button-container-shape, var(--md-sys-shape-corner-full, 9999px)));--_container-shape-end-end: var(--md-elevated-button-container-shape-end-end, var(--md-elevated-button-container-shape, var(--md-sys-shape-corner-full, 9999px)));--_container-shape-end-start: var(--md-elevated-button-container-shape-end-start, var(--md-elevated-button-container-shape, var(--md-sys-shape-corner-full, 9999px)));--_leading-space: var(--md-elevated-button-leading-space, 24px);--_trailing-space: var(--md-elevated-button-trailing-space, 24px);--_with-leading-icon-leading-space: var(--md-elevated-button-with-leading-icon-leading-space, 16px);--_with-leading-icon-trailing-space: var(--md-elevated-button-with-leading-icon-trailing-space, 24px);--_with-trailing-icon-leading-space: var(--md-elevated-button-with-trailing-icon-leading-space, 24px);--_with-trailing-icon-trailing-space: var(--md-elevated-button-with-trailing-icon-trailing-space, 16px)}
`;

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/button/internal/shared-elevation-styles.js
  var styles5 = i`md-elevation{transition-duration:280ms}:host(:is([disabled],[soft-disabled])) md-elevation{transition:none}md-elevation{--md-elevation-level: var(--_container-elevation);--md-elevation-shadow-color: var(--_container-shadow-color)}:host(:focus-within) md-elevation{--md-elevation-level: var(--_focus-container-elevation)}:host(:hover) md-elevation{--md-elevation-level: var(--_hover-container-elevation)}:host(:active) md-elevation{--md-elevation-level: var(--_pressed-container-elevation)}:host(:is([disabled],[soft-disabled])) md-elevation{--md-elevation-level: var(--_disabled-container-elevation)}
`;

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/button/internal/shared-styles.js
  var styles6 = i`:host{border-start-start-radius:var(--_container-shape-start-start);border-start-end-radius:var(--_container-shape-start-end);border-end-start-radius:var(--_container-shape-end-start);border-end-end-radius:var(--_container-shape-end-end);box-sizing:border-box;cursor:pointer;display:inline-flex;gap:8px;min-height:var(--_container-height);outline:none;padding-block:calc((var(--_container-height) - max(var(--_label-text-line-height),var(--_icon-size)))/2);padding-inline-start:var(--_leading-space);padding-inline-end:var(--_trailing-space);place-content:center;place-items:center;position:relative;font-family:var(--_label-text-font);font-size:var(--_label-text-size);line-height:var(--_label-text-line-height);font-weight:var(--_label-text-weight);text-overflow:ellipsis;text-wrap:nowrap;user-select:none;-webkit-tap-highlight-color:rgba(0,0,0,0);vertical-align:top;--md-ripple-hover-color: var(--_hover-state-layer-color);--md-ripple-pressed-color: var(--_pressed-state-layer-color);--md-ripple-hover-opacity: var(--_hover-state-layer-opacity);--md-ripple-pressed-opacity: var(--_pressed-state-layer-opacity)}md-focus-ring{--md-focus-ring-shape-start-start: var(--_container-shape-start-start);--md-focus-ring-shape-start-end: var(--_container-shape-start-end);--md-focus-ring-shape-end-end: var(--_container-shape-end-end);--md-focus-ring-shape-end-start: var(--_container-shape-end-start)}:host(:is([disabled],[soft-disabled])){cursor:default;pointer-events:none}.button{border-radius:inherit;cursor:inherit;display:inline-flex;align-items:center;justify-content:center;border:none;outline:none;-webkit-appearance:none;vertical-align:middle;background:rgba(0,0,0,0);text-decoration:none;min-width:calc(64px - var(--_leading-space) - var(--_trailing-space));width:100%;z-index:0;height:100%;font:inherit;color:var(--_label-text-color);padding:0;gap:inherit;text-transform:inherit}.button::-moz-focus-inner{padding:0;border:0}:host(:hover) .button{color:var(--_hover-label-text-color)}:host(:focus-within) .button{color:var(--_focus-label-text-color)}:host(:active) .button{color:var(--_pressed-label-text-color)}.background{background-color:var(--_container-color);border-radius:inherit;inset:0;position:absolute}.label{overflow:hidden}:is(.button,.label,.label slot),.label ::slotted(*){text-overflow:inherit}:host(:is([disabled],[soft-disabled])) .label{color:var(--_disabled-label-text-color);opacity:var(--_disabled-label-text-opacity)}:host(:is([disabled],[soft-disabled])) .background{background-color:var(--_disabled-container-color);opacity:var(--_disabled-container-opacity)}@media(forced-colors: active){.background{border:1px solid CanvasText}:host(:is([disabled],[soft-disabled])){--_disabled-icon-color: GrayText;--_disabled-icon-opacity: 1;--_disabled-container-opacity: 1;--_disabled-label-text-color: GrayText;--_disabled-label-text-opacity: 1}}:host([has-icon]:not([trailing-icon])){padding-inline-start:var(--_with-leading-icon-leading-space);padding-inline-end:var(--_with-leading-icon-trailing-space)}:host([has-icon][trailing-icon]){padding-inline-start:var(--_with-trailing-icon-leading-space);padding-inline-end:var(--_with-trailing-icon-trailing-space)}::slotted([slot=icon]){display:inline-flex;position:relative;writing-mode:horizontal-tb;fill:currentColor;flex-shrink:0;color:var(--_icon-color);font-size:var(--_icon-size);inline-size:var(--_icon-size);block-size:var(--_icon-size)}:host(:hover) ::slotted([slot=icon]){color:var(--_hover-icon-color)}:host(:focus-within) ::slotted([slot=icon]){color:var(--_focus-icon-color)}:host(:active) ::slotted([slot=icon]){color:var(--_pressed-icon-color)}:host(:is([disabled],[soft-disabled])) ::slotted([slot=icon]){color:var(--_disabled-icon-color);opacity:var(--_disabled-icon-opacity)}.touch{position:absolute;top:50%;height:48px;left:0;right:0;transform:translateY(-50%)}:host([touch-target=wrapper]){margin:max(0px,(48px - var(--_container-height))/2) 0}:host([touch-target=none]) .touch{display:none}
`;

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/button/elevated-button.js
  var MdElevatedButton = class MdElevatedButton2 extends ElevatedButton {
  };
  MdElevatedButton.styles = [
    styles6,
    styles5,
    styles4
  ];
  MdElevatedButton = __decorate([
    t("md-elevated-button")
  ], MdElevatedButton);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/labs/behaviors/constraint-validation.js
  var createValidator = Symbol("createValidator");
  var getValidityAnchor = Symbol("getValidityAnchor");
  var privateValidator = Symbol("privateValidator");
  var privateSyncValidity = Symbol("privateSyncValidity");
  var privateCustomValidationMessage = Symbol("privateCustomValidationMessage");
  function mixinConstraintValidation(base) {
    var _a2;
    class ConstraintValidationElement extends base {
      constructor() {
        super(...arguments);
        this[_a2] = "";
      }
      get validity() {
        this[privateSyncValidity]();
        return this[internals].validity;
      }
      get validationMessage() {
        this[privateSyncValidity]();
        return this[internals].validationMessage;
      }
      get willValidate() {
        this[privateSyncValidity]();
        return this[internals].willValidate;
      }
      checkValidity() {
        this[privateSyncValidity]();
        return this[internals].checkValidity();
      }
      reportValidity() {
        this[privateSyncValidity]();
        return this[internals].reportValidity();
      }
      setCustomValidity(error) {
        this[privateCustomValidationMessage] = error;
        this[privateSyncValidity]();
      }
      requestUpdate(name, oldValue, options) {
        super.requestUpdate(name, oldValue, options);
        this[privateSyncValidity]();
      }
      firstUpdated(changed) {
        super.firstUpdated(changed);
        this[privateSyncValidity]();
      }
      [(_a2 = privateCustomValidationMessage, privateSyncValidity)]() {
        if (o7) {
          return;
        }
        if (!this[privateValidator]) {
          this[privateValidator] = this[createValidator]();
        }
        const { validity, validationMessage: nonCustomValidationMessage } = this[privateValidator].getValidity();
        const customError = !!this[privateCustomValidationMessage];
        const validationMessage = this[privateCustomValidationMessage] || nonCustomValidationMessage;
        this[internals].setValidity({ ...validity, customError }, validationMessage, this[getValidityAnchor]() ?? void 0);
      }
      [createValidator]() {
        throw new Error("Implement [createValidator]");
      }
      [getValidityAnchor]() {
        throw new Error("Implement [getValidityAnchor]");
      }
    }
    return ConstraintValidationElement;
  }

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/labs/behaviors/focusable.js
  var isFocusable = Symbol("isFocusable");
  var privateIsFocusable = Symbol("privateIsFocusable");
  var externalTabIndex = Symbol("externalTabIndex");
  var isUpdatingTabIndex = Symbol("isUpdatingTabIndex");
  var updateTabIndex = Symbol("updateTabIndex");
  function mixinFocusable(base) {
    var _a2, _b, _c;
    class FocusableElement extends base {
      constructor() {
        super(...arguments);
        this[_a2] = true;
        this[_b] = null;
        this[_c] = false;
      }
      get [isFocusable]() {
        return this[privateIsFocusable];
      }
      set [isFocusable](value) {
        if (this[isFocusable] === value) {
          return;
        }
        this[privateIsFocusable] = value;
        this[updateTabIndex]();
      }
      connectedCallback() {
        super.connectedCallback();
        this[updateTabIndex]();
      }
      attributeChangedCallback(name, old, value) {
        if (name !== "tabindex") {
          super.attributeChangedCallback(name, old, value);
          return;
        }
        this.requestUpdate("tabIndex", Number(old ?? -1));
        if (this[isUpdatingTabIndex]) {
          return;
        }
        if (!this.hasAttribute("tabindex")) {
          this[externalTabIndex] = null;
          this[updateTabIndex]();
          return;
        }
        this[externalTabIndex] = this.tabIndex;
      }
      [(_a2 = privateIsFocusable, _b = externalTabIndex, _c = isUpdatingTabIndex, updateTabIndex)]() {
        const internalTabIndex = this[isFocusable] ? 0 : -1;
        const computedTabIndex = this[externalTabIndex] ?? internalTabIndex;
        this[isUpdatingTabIndex] = true;
        this.tabIndex = computedTabIndex;
        this[isUpdatingTabIndex] = false;
      }
    }
    __decorate([
      n3({ noAccessor: true })
    ], FocusableElement.prototype, "tabIndex", void 0);
    return FocusableElement;
  }

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/labs/behaviors/form-associated.js
  var getFormValue = Symbol("getFormValue");
  var getFormState = Symbol("getFormState");
  function mixinFormAssociated(base) {
    class FormAssociatedElement extends base {
      get form() {
        return this[internals].form;
      }
      get labels() {
        return this[internals].labels;
      }
      // Use @property for the `name` and `disabled` properties to add them to the
      // `observedAttributes` array and trigger `attributeChangedCallback()`.
      //
      // We don't use Lit's default getter/setter (`noAccessor: true`) because
      // the attributes need to be updated synchronously to work with synchronous
      // form APIs, and Lit updates attributes async by default.
      get name() {
        return this.getAttribute("name") ?? "";
      }
      set name(name) {
        this.setAttribute("name", name);
      }
      get disabled() {
        return this.hasAttribute("disabled");
      }
      set disabled(disabled) {
        this.toggleAttribute("disabled", disabled);
      }
      attributeChangedCallback(name, old, value) {
        if (name === "name" || name === "disabled") {
          const oldValue = name === "disabled" ? old !== null : old;
          this.requestUpdate(name, oldValue);
          return;
        }
        super.attributeChangedCallback(name, old, value);
      }
      requestUpdate(name, oldValue, options) {
        super.requestUpdate(name, oldValue, options);
        this[internals].setFormValue(this[getFormValue](), this[getFormState]());
      }
      [getFormValue]() {
        throw new Error("Implement [getFormValue]");
      }
      [getFormState]() {
        return this[getFormValue]();
      }
      formDisabledCallback(disabled) {
        this.disabled = disabled;
      }
    }
    FormAssociatedElement.formAssociated = true;
    __decorate([
      n3({ noAccessor: true })
    ], FormAssociatedElement.prototype, "name", null);
    __decorate([
      n3({ type: Boolean, noAccessor: true })
    ], FormAssociatedElement.prototype, "disabled", null);
    return FormAssociatedElement;
  }

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/labs/behaviors/validators/validator.js
  var Validator = class {
    /**
     * Creates a new validator.
     *
     * @param getCurrentState A callback that returns the current state of
     *     constraint validation-related properties.
     */
    constructor(getCurrentState) {
      this.getCurrentState = getCurrentState;
      this.currentValidity = {
        validity: {},
        validationMessage: ""
      };
    }
    /**
     * Returns the current `ValidityStateFlags` and validation message for the
     * validator.
     *
     * If the constraint validation state has not changed, this will return a
     * cached result. This is important since `getValidity()` can be called
     * frequently in response to synchronous property changes.
     *
     * @return The current validity and validation message.
     */
    getValidity() {
      const state = this.getCurrentState();
      const hasStateChanged = !this.prevState || !this.equals(this.prevState, state);
      if (!hasStateChanged) {
        return this.currentValidity;
      }
      const { validity, validationMessage } = this.computeValidity(state);
      this.prevState = this.copy(state);
      this.currentValidity = {
        validationMessage,
        validity: {
          // Change any `ValidityState` instances into `ValidityStateFlags` since
          // `ValidityState` cannot be easily `{...spread}`.
          badInput: validity.badInput,
          customError: validity.customError,
          patternMismatch: validity.patternMismatch,
          rangeOverflow: validity.rangeOverflow,
          rangeUnderflow: validity.rangeUnderflow,
          stepMismatch: validity.stepMismatch,
          tooLong: validity.tooLong,
          tooShort: validity.tooShort,
          typeMismatch: validity.typeMismatch,
          valueMissing: validity.valueMissing
        }
      };
      return this.currentValidity;
    }
  };

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/labs/behaviors/validators/radio-validator.js
  var RadioValidator = class extends Validator {
    computeValidity(states) {
      if (!this.radioElement) {
        this.radioElement = document.createElement("input");
        this.radioElement.type = "radio";
        this.radioElement.name = "group";
      }
      let isRequired = false;
      let isChecked = false;
      for (const { checked, required } of states) {
        if (required) {
          isRequired = true;
        }
        if (checked) {
          isChecked = true;
        }
      }
      this.radioElement.checked = isChecked;
      this.radioElement.required = isRequired;
      return {
        validity: {
          valueMissing: isRequired && !isChecked
        },
        validationMessage: this.radioElement.validationMessage
      };
    }
    equals(prevGroup, nextGroup) {
      if (prevGroup.length !== nextGroup.length) {
        return false;
      }
      for (let i8 = 0; i8 < prevGroup.length; i8++) {
        const prev = prevGroup[i8];
        const next = nextGroup[i8];
        if (prev.checked !== next.checked || prev.required !== next.required) {
          return false;
        }
      }
      return true;
    }
    copy(states) {
      return states.map(({ checked, required }) => ({
        checked,
        required
      }));
    }
  };

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/radio/internal/single-selection-controller.js
  var SingleSelectionController = class {
    /**
     * All single selection elements in the host element's root with the same
     * `name` attribute, including the host element.
     */
    get controls() {
      const name = this.host.getAttribute("name");
      if (!name || !this.root || !this.host.isConnected) {
        return [this.host];
      }
      return Array.from(this.root.querySelectorAll(`[name="${name}"]`));
    }
    constructor(host) {
      this.host = host;
      this.focused = false;
      this.root = null;
      this.handleFocusIn = () => {
        this.focused = true;
        this.updateTabIndices();
      };
      this.handleFocusOut = () => {
        this.focused = false;
        this.updateTabIndices();
      };
      this.handleKeyDown = (event) => {
        const isDown = event.key === "ArrowDown";
        const isUp = event.key === "ArrowUp";
        const isLeft = event.key === "ArrowLeft";
        const isRight = event.key === "ArrowRight";
        if (!isLeft && !isRight && !isDown && !isUp) {
          return;
        }
        const siblings = this.controls;
        if (!siblings.length) {
          return;
        }
        event.preventDefault();
        const isRtl = getComputedStyle(this.host).direction === "rtl";
        const forwards = isRtl ? isLeft || isDown : isRight || isDown;
        const hostIndex = siblings.indexOf(this.host);
        let nextIndex = forwards ? hostIndex + 1 : hostIndex - 1;
        while (nextIndex !== hostIndex) {
          if (nextIndex >= siblings.length) {
            nextIndex = 0;
          } else if (nextIndex < 0) {
            nextIndex = siblings.length - 1;
          }
          const nextSibling = siblings[nextIndex];
          if (nextSibling.hasAttribute("disabled")) {
            if (forwards) {
              nextIndex++;
            } else {
              nextIndex--;
            }
            continue;
          }
          for (const sibling of siblings) {
            if (sibling !== nextSibling) {
              sibling.checked = false;
              sibling.tabIndex = -1;
              sibling.blur();
            }
          }
          nextSibling.checked = true;
          nextSibling.tabIndex = 0;
          nextSibling.focus();
          nextSibling.dispatchEvent(new Event("change", { bubbles: true }));
          break;
        }
      };
    }
    hostConnected() {
      this.root = this.host.getRootNode();
      this.host.addEventListener("keydown", this.handleKeyDown);
      this.host.addEventListener("focusin", this.handleFocusIn);
      this.host.addEventListener("focusout", this.handleFocusOut);
      if (this.host.checked) {
        this.uncheckSiblings();
      }
      this.updateTabIndices();
    }
    hostDisconnected() {
      this.host.removeEventListener("keydown", this.handleKeyDown);
      this.host.removeEventListener("focusin", this.handleFocusIn);
      this.host.removeEventListener("focusout", this.handleFocusOut);
      this.updateTabIndices();
      this.root = null;
    }
    /**
     * Should be called whenever the host's `checked` property changes
     * synchronously.
     */
    handleCheckedChange() {
      if (!this.host.checked) {
        return;
      }
      this.uncheckSiblings();
      this.updateTabIndices();
    }
    uncheckSiblings() {
      for (const sibling of this.controls) {
        if (sibling !== this.host) {
          sibling.checked = false;
        }
      }
    }
    /**
     * Updates the `tabindex` of the host and its siblings.
     */
    updateTabIndices() {
      const siblings = this.controls;
      const checkedSibling = siblings.find((sibling) => sibling.checked);
      if (checkedSibling || this.focused) {
        const focusable = checkedSibling || this.host;
        focusable.tabIndex = 0;
        for (const sibling of siblings) {
          if (sibling !== focusable) {
            sibling.tabIndex = -1;
          }
        }
        return;
      }
      for (const sibling of siblings) {
        sibling.tabIndex = 0;
      }
    }
  };

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/radio/internal/radio.js
  var _a;
  var CHECKED = Symbol("checked");
  var maskId = 0;
  var radioBaseClass = mixinConstraintValidation(mixinFormAssociated(mixinElementInternals(mixinFocusable(i4))));
  var Radio = class extends radioBaseClass {
    /**
     * Whether or not the radio is selected.
     */
    get checked() {
      return this[CHECKED];
    }
    set checked(checked) {
      const wasChecked = this.checked;
      if (wasChecked === checked) {
        return;
      }
      this[CHECKED] = checked;
      this.requestUpdate("checked", wasChecked);
      this.selectionController.handleCheckedChange();
    }
    constructor() {
      super();
      this.maskId = `cutout${++maskId}`;
      this[_a] = false;
      this.required = false;
      this.value = "on";
      this.selectionController = new SingleSelectionController(this);
      this.addController(this.selectionController);
      if (!o7) {
        this[internals].role = "radio";
        this.addEventListener("click", this.handleClick.bind(this));
        this.addEventListener("keydown", this.handleKeydown.bind(this));
      }
    }
    render() {
      const classes = { "checked": this.checked };
      return x`
      <div class="container ${e7(classes)}" aria-hidden="true">
        <md-ripple
          part="ripple"
          .control=${this}
          ?disabled=${this.disabled}></md-ripple>
        <md-focus-ring part="focus-ring" .control=${this}></md-focus-ring>
        <svg class="icon" viewBox="0 0 20 20">
          <mask id="${this.maskId}">
            <rect width="100%" height="100%" fill="white" />
            <circle cx="10" cy="10" r="8" fill="black" />
          </mask>
          <circle
            class="outer circle"
            cx="10"
            cy="10"
            r="10"
            mask="url(#${this.maskId})" />
          <circle class="inner circle" cx="10" cy="10" r="5" />
        </svg>

        <div class="touch-target"></div>
      </div>
    `;
    }
    updated() {
      this[internals].ariaChecked = String(this.checked);
    }
    async handleClick(event) {
      if (this.disabled) {
        return;
      }
      await 0;
      if (event.defaultPrevented) {
        return;
      }
      if (isActivationClick(event)) {
        this.focus();
      }
      this.checked = true;
      this.dispatchEvent(new Event("change", { bubbles: true }));
      this.dispatchEvent(new InputEvent("input", { bubbles: true, composed: true }));
    }
    async handleKeydown(event) {
      await 0;
      if (event.key !== " " || event.defaultPrevented) {
        return;
      }
      this.click();
    }
    [(_a = CHECKED, getFormValue)]() {
      return this.checked ? this.value : null;
    }
    [getFormState]() {
      return String(this.checked);
    }
    formResetCallback() {
      this.checked = this.hasAttribute("checked");
    }
    formStateRestoreCallback(state) {
      this.checked = state === "true";
    }
    [createValidator]() {
      return new RadioValidator(() => {
        if (!this.selectionController) {
          return [this];
        }
        return this.selectionController.controls;
      });
    }
    [getValidityAnchor]() {
      return this.container;
    }
  };
  __decorate([
    n3({ type: Boolean })
  ], Radio.prototype, "checked", null);
  __decorate([
    n3({ type: Boolean })
  ], Radio.prototype, "required", void 0);
  __decorate([
    n3()
  ], Radio.prototype, "value", void 0);
  __decorate([
    e4(".container")
  ], Radio.prototype, "container", void 0);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/radio/internal/radio-styles.js
  var styles7 = i`@layer{:host{display:inline-flex;height:var(--md-radio-icon-size, 20px);outline:none;position:relative;vertical-align:top;width:var(--md-radio-icon-size, 20px);-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;--md-ripple-hover-color: var(--md-radio-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-hover-opacity: var(--md-radio-hover-state-layer-opacity, 0.08);--md-ripple-pressed-color: var(--md-radio-pressed-state-layer-color, var(--md-sys-color-primary, #6750a4));--md-ripple-pressed-opacity: var(--md-radio-pressed-state-layer-opacity, 0.12)}:host([disabled]){cursor:default}:host([touch-target=wrapper]){margin:max(0px,(48px - var(--md-radio-icon-size, 20px))/2)}.container{display:flex;height:100%;place-content:center;place-items:center;width:100%}md-focus-ring{height:44px;inset:unset;width:44px}.checked{--md-ripple-hover-color: var(--md-radio-selected-hover-state-layer-color, var(--md-sys-color-primary, #6750a4));--md-ripple-hover-opacity: var(--md-radio-selected-hover-state-layer-opacity, 0.08);--md-ripple-pressed-color: var(--md-radio-selected-pressed-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-pressed-opacity: var(--md-radio-selected-pressed-state-layer-opacity, 0.12)}.touch-target{height:48px;position:absolute;width:48px}:host([touch-target=none]) .touch-target{display:none}md-ripple{border-radius:50%;height:var(--md-radio-state-layer-size, 40px);inset:unset;width:var(--md-radio-state-layer-size, 40px)}.icon{fill:var(--md-radio-icon-color, var(--md-sys-color-on-surface-variant, #49454f));inset:0;position:absolute}.outer.circle{transition:fill 50ms linear}.inner.circle{opacity:0;transform-origin:center;transition:opacity 50ms linear}.checked .icon{fill:var(--md-radio-selected-icon-color, var(--md-sys-color-primary, #6750a4))}.checked .inner.circle{animation:inner-circle-grow 300ms cubic-bezier(0.05, 0.7, 0.1, 1);opacity:1}@keyframes inner-circle-grow{from{transform:scale(0)}to{transform:scale(1)}}:host([disabled]) .circle{animation-duration:0s;transition-duration:0s}:host(:hover) .icon{fill:var(--md-radio-hover-icon-color, var(--md-sys-color-on-surface, #1d1b20))}:host(:focus-within) .icon{fill:var(--md-radio-focus-icon-color, var(--md-sys-color-on-surface, #1d1b20))}:host(:active) .icon{fill:var(--md-radio-pressed-icon-color, var(--md-sys-color-on-surface, #1d1b20))}:host([disabled]) .icon{fill:var(--md-radio-disabled-unselected-icon-color, var(--md-sys-color-on-surface, #1d1b20));opacity:var(--md-radio-disabled-unselected-icon-opacity, 0.38)}:host(:hover) .checked .icon{fill:var(--md-radio-selected-hover-icon-color, var(--md-sys-color-primary, #6750a4))}:host(:focus-within) .checked .icon{fill:var(--md-radio-selected-focus-icon-color, var(--md-sys-color-primary, #6750a4))}:host(:active) .checked .icon{fill:var(--md-radio-selected-pressed-icon-color, var(--md-sys-color-primary, #6750a4))}:host([disabled]) .checked .icon{fill:var(--md-radio-disabled-selected-icon-color, var(--md-sys-color-on-surface, #1d1b20));opacity:var(--md-radio-disabled-selected-icon-opacity, 0.38)}}@layer hcm{@media(forced-colors: active){.icon{fill:CanvasText}:host([disabled]) .icon{fill:GrayText;opacity:1}}}
`;

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/radio/radio.js
  var MdRadio = class MdRadio2 extends Radio {
  };
  MdRadio.styles = [styles7];
  MdRadio = __decorate([
    t("md-radio")
  ], MdRadio);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/internal/events/redispatch-event.js
  function redispatchEvent(element, event) {
    if (event.bubbles && (!element.shadowRoot || event.composed)) {
      event.stopPropagation();
    }
    const copy = Reflect.construct(event.constructor, [event.type, event]);
    const dispatched = element.dispatchEvent(copy);
    if (!dispatched) {
      event.preventDefault();
    }
    return dispatched;
  }

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/labs/behaviors/validators/checkbox-validator.js
  var CheckboxValidator = class extends Validator {
    computeValidity(state) {
      if (!this.checkboxControl) {
        this.checkboxControl = document.createElement("input");
        this.checkboxControl.type = "checkbox";
      }
      this.checkboxControl.checked = state.checked;
      this.checkboxControl.required = state.required;
      return {
        validity: this.checkboxControl.validity,
        validationMessage: this.checkboxControl.validationMessage
      };
    }
    equals(prev, next) {
      return prev.checked === next.checked && prev.required === next.required;
    }
    copy({ checked, required }) {
      return { checked, required };
    }
  };

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/checkbox/internal/checkbox.js
  var checkboxBaseClass = mixinDelegatesAria(mixinConstraintValidation(mixinFormAssociated(mixinElementInternals(i4))));
  var Checkbox = class extends checkboxBaseClass {
    constructor() {
      super();
      this.checked = false;
      this.indeterminate = false;
      this.required = false;
      this.value = "on";
      this.prevChecked = false;
      this.prevDisabled = false;
      this.prevIndeterminate = false;
      if (!o7) {
        this.addEventListener("click", (event) => {
          if (!isActivationClick(event) || !this.input) {
            return;
          }
          this.focus();
          dispatchActivationClick(this.input);
        });
      }
    }
    update(changed) {
      if (changed.has("checked") || changed.has("disabled") || changed.has("indeterminate")) {
        this.prevChecked = changed.get("checked") ?? this.checked;
        this.prevDisabled = changed.get("disabled") ?? this.disabled;
        this.prevIndeterminate = changed.get("indeterminate") ?? this.indeterminate;
      }
      super.update(changed);
    }
    render() {
      const prevNone = !this.prevChecked && !this.prevIndeterminate;
      const prevChecked = this.prevChecked && !this.prevIndeterminate;
      const prevIndeterminate = this.prevIndeterminate;
      const isChecked = this.checked && !this.indeterminate;
      const isIndeterminate = this.indeterminate;
      const containerClasses = e7({
        "disabled": this.disabled,
        "selected": isChecked || isIndeterminate,
        "unselected": !isChecked && !isIndeterminate,
        "checked": isChecked,
        "indeterminate": isIndeterminate,
        "prev-unselected": prevNone,
        "prev-checked": prevChecked,
        "prev-indeterminate": prevIndeterminate,
        "prev-disabled": this.prevDisabled
      });
      const { ariaLabel, ariaInvalid } = this;
      return x`
      <div class="container ${containerClasses}">
        <input
          type="checkbox"
          id="input"
          aria-checked=${isIndeterminate ? "mixed" : E}
          aria-label=${ariaLabel || E}
          aria-invalid=${ariaInvalid || E}
          ?disabled=${this.disabled}
          ?required=${this.required}
          .indeterminate=${this.indeterminate}
          .checked=${this.checked}
          @input=${this.handleInput}
          @change=${this.handleChange} />

        <div class="outline"></div>
        <div class="background"></div>
        <md-focus-ring part="focus-ring" for="input"></md-focus-ring>
        <md-ripple for="input" ?disabled=${this.disabled}></md-ripple>
        <svg class="icon" viewBox="0 0 18 18" aria-hidden="true">
          <rect class="mark short" />
          <rect class="mark long" />
        </svg>
      </div>
    `;
    }
    handleInput(event) {
      const target = event.target;
      this.checked = target.checked;
      this.indeterminate = target.indeterminate;
    }
    handleChange(event) {
      redispatchEvent(this, event);
    }
    [getFormValue]() {
      if (!this.checked || this.indeterminate) {
        return null;
      }
      return this.value;
    }
    [getFormState]() {
      return String(this.checked);
    }
    formResetCallback() {
      this.checked = this.hasAttribute("checked");
    }
    formStateRestoreCallback(state) {
      this.checked = state === "true";
    }
    [createValidator]() {
      return new CheckboxValidator(() => this);
    }
    [getValidityAnchor]() {
      return this.input;
    }
  };
  Checkbox.shadowRootOptions = {
    ...i4.shadowRootOptions,
    delegatesFocus: true
  };
  __decorate([
    n3({ type: Boolean })
  ], Checkbox.prototype, "checked", void 0);
  __decorate([
    n3({ type: Boolean })
  ], Checkbox.prototype, "indeterminate", void 0);
  __decorate([
    n3({ type: Boolean })
  ], Checkbox.prototype, "required", void 0);
  __decorate([
    n3()
  ], Checkbox.prototype, "value", void 0);
  __decorate([
    r4()
  ], Checkbox.prototype, "prevChecked", void 0);
  __decorate([
    r4()
  ], Checkbox.prototype, "prevDisabled", void 0);
  __decorate([
    r4()
  ], Checkbox.prototype, "prevIndeterminate", void 0);
  __decorate([
    e4("input")
  ], Checkbox.prototype, "input", void 0);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/checkbox/internal/checkbox-styles.js
  var styles8 = i`:host{border-start-start-radius:var(--md-checkbox-container-shape-start-start, var(--md-checkbox-container-shape, 2px));border-start-end-radius:var(--md-checkbox-container-shape-start-end, var(--md-checkbox-container-shape, 2px));border-end-end-radius:var(--md-checkbox-container-shape-end-end, var(--md-checkbox-container-shape, 2px));border-end-start-radius:var(--md-checkbox-container-shape-end-start, var(--md-checkbox-container-shape, 2px));display:inline-flex;height:var(--md-checkbox-container-size, 18px);position:relative;vertical-align:top;width:var(--md-checkbox-container-size, 18px);-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer}:host([disabled]){cursor:default}:host([touch-target=wrapper]){margin:max(0px,(48px - var(--md-checkbox-container-size, 18px))/2)}md-focus-ring{height:44px;inset:unset;width:44px}input{appearance:none;height:48px;margin:0;opacity:0;outline:none;position:absolute;width:48px;z-index:1;cursor:inherit}:host([touch-target=none]) input{height:100%;width:100%}.container{border-radius:inherit;display:flex;height:100%;place-content:center;place-items:center;position:relative;width:100%}.outline,.background,.icon{inset:0;position:absolute}.outline,.background{border-radius:inherit}.outline{border-color:var(--md-checkbox-outline-color, var(--md-sys-color-on-surface-variant, #49454f));border-style:solid;border-width:var(--md-checkbox-outline-width, 2px);box-sizing:border-box}.background{background-color:var(--md-checkbox-selected-container-color, var(--md-sys-color-primary, #6750a4))}.background,.icon{opacity:0;transition-duration:150ms,50ms;transition-property:transform,opacity;transition-timing-function:cubic-bezier(0.3, 0, 0.8, 0.15),linear;transform:scale(0.6)}:where(.selected) :is(.background,.icon){opacity:1;transition-duration:350ms,50ms;transition-timing-function:cubic-bezier(0.05, 0.7, 0.1, 1),linear;transform:scale(1)}md-ripple{border-radius:var(--md-checkbox-state-layer-shape, var(--md-sys-shape-corner-full, 9999px));height:var(--md-checkbox-state-layer-size, 40px);inset:unset;width:var(--md-checkbox-state-layer-size, 40px);--md-ripple-hover-color: var(--md-checkbox-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-hover-opacity: var(--md-checkbox-hover-state-layer-opacity, 0.08);--md-ripple-pressed-color: var(--md-checkbox-pressed-state-layer-color, var(--md-sys-color-primary, #6750a4));--md-ripple-pressed-opacity: var(--md-checkbox-pressed-state-layer-opacity, 0.12)}.selected md-ripple{--md-ripple-hover-color: var(--md-checkbox-selected-hover-state-layer-color, var(--md-sys-color-primary, #6750a4));--md-ripple-hover-opacity: var(--md-checkbox-selected-hover-state-layer-opacity, 0.08);--md-ripple-pressed-color: var(--md-checkbox-selected-pressed-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-pressed-opacity: var(--md-checkbox-selected-pressed-state-layer-opacity, 0.12)}.icon{fill:var(--md-checkbox-selected-icon-color, var(--md-sys-color-on-primary, #fff));height:var(--md-checkbox-icon-size, 18px);width:var(--md-checkbox-icon-size, 18px)}.mark.short{height:2px;transition-property:transform,height;width:2px}.mark.long{height:2px;transition-property:transform,width;width:10px}.mark{animation-duration:150ms;animation-timing-function:cubic-bezier(0.3, 0, 0.8, 0.15);transition-duration:150ms;transition-timing-function:cubic-bezier(0.3, 0, 0.8, 0.15)}.selected .mark{animation-duration:350ms;animation-timing-function:cubic-bezier(0.05, 0.7, 0.1, 1);transition-duration:350ms;transition-timing-function:cubic-bezier(0.05, 0.7, 0.1, 1)}.checked .mark,.prev-checked.unselected .mark{transform:scaleY(-1) translate(7px, -14px) rotate(45deg)}.checked .mark.short,.prev-checked.unselected .mark.short{height:5.6568542495px}.checked .mark.long,.prev-checked.unselected .mark.long{width:11.313708499px}.indeterminate .mark,.prev-indeterminate.unselected .mark{transform:scaleY(-1) translate(4px, -10px) rotate(0deg)}.prev-unselected .mark{transition-property:none}.prev-unselected.checked .mark.long{animation-name:prev-unselected-to-checked}@keyframes prev-unselected-to-checked{from{width:0}}:where(:hover) .outline{border-color:var(--md-checkbox-hover-outline-color, var(--md-sys-color-on-surface, #1d1b20));border-width:var(--md-checkbox-hover-outline-width, 2px)}:where(:hover) .background{background:var(--md-checkbox-selected-hover-container-color, var(--md-sys-color-primary, #6750a4))}:where(:hover) .icon{fill:var(--md-checkbox-selected-hover-icon-color, var(--md-sys-color-on-primary, #fff))}:where(:focus-within) .outline{border-color:var(--md-checkbox-focus-outline-color, var(--md-sys-color-on-surface, #1d1b20));border-width:var(--md-checkbox-focus-outline-width, 2px)}:where(:focus-within) .background{background:var(--md-checkbox-selected-focus-container-color, var(--md-sys-color-primary, #6750a4))}:where(:focus-within) .icon{fill:var(--md-checkbox-selected-focus-icon-color, var(--md-sys-color-on-primary, #fff))}:where(:active) .outline{border-color:var(--md-checkbox-pressed-outline-color, var(--md-sys-color-on-surface, #1d1b20));border-width:var(--md-checkbox-pressed-outline-width, 2px)}:where(:active) .background{background:var(--md-checkbox-selected-pressed-container-color, var(--md-sys-color-primary, #6750a4))}:where(:active) .icon{fill:var(--md-checkbox-selected-pressed-icon-color, var(--md-sys-color-on-primary, #fff))}:where(.disabled,.prev-disabled) :is(.background,.icon,.mark){animation-duration:0s;transition-duration:0s}:where(.disabled) .outline{border-color:var(--md-checkbox-disabled-outline-color, var(--md-sys-color-on-surface, #1d1b20));border-width:var(--md-checkbox-disabled-outline-width, 2px);opacity:var(--md-checkbox-disabled-container-opacity, 0.38)}:where(.selected.disabled) .outline{visibility:hidden}:where(.selected.disabled) .background{background:var(--md-checkbox-selected-disabled-container-color, var(--md-sys-color-on-surface, #1d1b20));opacity:var(--md-checkbox-selected-disabled-container-opacity, 0.38)}:where(.disabled) .icon{fill:var(--md-checkbox-selected-disabled-icon-color, var(--md-sys-color-surface, #fef7ff))}@media(forced-colors: active){.background{background-color:CanvasText}.selected.disabled .background{background-color:GrayText;opacity:1}.outline{border-color:CanvasText}.disabled .outline{border-color:GrayText;opacity:1}.icon{fill:Canvas}}
`;

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/checkbox/checkbox.js
  var MdCheckbox = class MdCheckbox2 extends Checkbox {
  };
  MdCheckbox.styles = [styles8];
  MdCheckbox = __decorate([
    t("md-checkbox")
  ], MdCheckbox);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/field/internal/field.js
  var Field = class extends i4 {
    constructor() {
      super(...arguments);
      this.disabled = false;
      this.error = false;
      this.focused = false;
      this.label = "";
      this.noAsterisk = false;
      this.populated = false;
      this.required = false;
      this.resizable = false;
      this.supportingText = "";
      this.errorText = "";
      this.count = -1;
      this.max = -1;
      this.hasStart = false;
      this.hasEnd = false;
      this.isAnimating = false;
      this.refreshErrorAlert = false;
      this.disableTransitions = false;
    }
    get counterText() {
      const countAsNumber = this.count ?? -1;
      const maxAsNumber = this.max ?? -1;
      if (countAsNumber < 0 || maxAsNumber <= 0) {
        return "";
      }
      return `${countAsNumber} / ${maxAsNumber}`;
    }
    get supportingOrErrorText() {
      return this.error && this.errorText ? this.errorText : this.supportingText;
    }
    /**
     * Re-announces the field's error supporting text to screen readers.
     *
     * Error text announces to screen readers anytime it is visible and changes.
     * Use the method to re-announce the message when the text has not changed,
     * but announcement is still needed (such as for `reportValidity()`).
     */
    reannounceError() {
      this.refreshErrorAlert = true;
    }
    update(props) {
      const isDisabledChanging = props.has("disabled") && props.get("disabled") !== void 0;
      if (isDisabledChanging) {
        this.disableTransitions = true;
      }
      if (this.disabled && this.focused) {
        props.set("focused", true);
        this.focused = false;
      }
      this.animateLabelIfNeeded({
        wasFocused: props.get("focused"),
        wasPopulated: props.get("populated")
      });
      super.update(props);
    }
    render() {
      const floatingLabel = this.renderLabel(
        /*isFloating*/
        true
      );
      const restingLabel = this.renderLabel(
        /*isFloating*/
        false
      );
      const outline = this.renderOutline?.(floatingLabel);
      const classes = {
        "disabled": this.disabled,
        "disable-transitions": this.disableTransitions,
        "error": this.error && !this.disabled,
        "focused": this.focused,
        "with-start": this.hasStart,
        "with-end": this.hasEnd,
        "populated": this.populated,
        "resizable": this.resizable,
        "required": this.required,
        "no-label": !this.label
      };
      return x`
      <div class="field ${e7(classes)}">
        <div class="container-overflow">
          ${this.renderBackground?.()}
          <slot name="container"></slot>
          ${this.renderStateLayer?.()} ${this.renderIndicator?.()} ${outline}
          <div class="container">
            <div class="start">
              <slot name="start"></slot>
            </div>
            <div class="middle">
              <div class="label-wrapper">
                ${restingLabel} ${outline ? E : floatingLabel}
              </div>
              <div class="content">
                <slot></slot>
              </div>
            </div>
            <div class="end">
              <slot name="end"></slot>
            </div>
          </div>
        </div>
        ${this.renderSupportingText()}
      </div>
    `;
    }
    updated(changed) {
      if (changed.has("supportingText") || changed.has("errorText") || changed.has("count") || changed.has("max")) {
        this.updateSlottedAriaDescribedBy();
      }
      if (this.refreshErrorAlert) {
        requestAnimationFrame(() => {
          this.refreshErrorAlert = false;
        });
      }
      if (this.disableTransitions) {
        requestAnimationFrame(() => {
          this.disableTransitions = false;
        });
      }
    }
    renderSupportingText() {
      const { supportingOrErrorText, counterText } = this;
      if (!supportingOrErrorText && !counterText) {
        return E;
      }
      const start = x`<span>${supportingOrErrorText}</span>`;
      const end = counterText ? x`<span class="counter">${counterText}</span>` : E;
      const shouldErrorAnnounce = this.error && this.errorText && !this.refreshErrorAlert;
      const role = shouldErrorAnnounce ? "alert" : E;
      return x`
      <div class="supporting-text" role=${role}>${start}${end}</div>
      <slot
        name="aria-describedby"
        @slotchange=${this.updateSlottedAriaDescribedBy}></slot>
    `;
    }
    updateSlottedAriaDescribedBy() {
      for (const element of this.slottedAriaDescribedBy) {
        B(x`${this.supportingOrErrorText} ${this.counterText}`, element);
        element.setAttribute("hidden", "");
      }
    }
    renderLabel(isFloating) {
      if (!this.label) {
        return E;
      }
      let visible;
      if (isFloating) {
        visible = this.focused || this.populated || this.isAnimating;
      } else {
        visible = !this.focused && !this.populated && !this.isAnimating;
      }
      const classes = {
        "hidden": !visible,
        "floating": isFloating,
        "resting": !isFloating
      };
      const labelText = `${this.label}${this.required && !this.noAsterisk ? "*" : ""}`;
      return x`
      <span class="label ${e7(classes)}" aria-hidden=${!visible}
        >${labelText}</span
      >
    `;
    }
    animateLabelIfNeeded({ wasFocused, wasPopulated }) {
      if (!this.label) {
        return;
      }
      wasFocused ??= this.focused;
      wasPopulated ??= this.populated;
      const wasFloating = wasFocused || wasPopulated;
      const shouldBeFloating = this.focused || this.populated;
      if (wasFloating === shouldBeFloating) {
        return;
      }
      this.isAnimating = true;
      this.labelAnimation?.cancel();
      this.labelAnimation = this.floatingLabelEl?.animate(this.getLabelKeyframes(), { duration: 150, easing: EASING.STANDARD });
      this.labelAnimation?.addEventListener("finish", () => {
        this.isAnimating = false;
      });
    }
    getLabelKeyframes() {
      const { floatingLabelEl, restingLabelEl } = this;
      if (!floatingLabelEl || !restingLabelEl) {
        return [];
      }
      const { x: floatingX, y: floatingY, height: floatingHeight } = floatingLabelEl.getBoundingClientRect();
      const { x: restingX, y: restingY, height: restingHeight } = restingLabelEl.getBoundingClientRect();
      const floatingScrollWidth = floatingLabelEl.scrollWidth;
      const restingScrollWidth = restingLabelEl.scrollWidth;
      const scale = restingScrollWidth / floatingScrollWidth;
      const xDelta = restingX - floatingX;
      const yDelta = restingY - floatingY + Math.round((restingHeight - floatingHeight * scale) / 2);
      const restTransform = `translateX(${xDelta}px) translateY(${yDelta}px) scale(${scale})`;
      const floatTransform = `translateX(0) translateY(0) scale(1)`;
      const restingClientWidth = restingLabelEl.clientWidth;
      const isRestingClipped = restingScrollWidth > restingClientWidth;
      const width = isRestingClipped ? `${restingClientWidth / scale}px` : "";
      if (this.focused || this.populated) {
        return [
          { transform: restTransform, width },
          { transform: floatTransform, width }
        ];
      }
      return [
        { transform: floatTransform, width },
        { transform: restTransform, width }
      ];
    }
    getSurfacePositionClientRect() {
      return this.containerEl.getBoundingClientRect();
    }
  };
  __decorate([
    n3({ type: Boolean })
  ], Field.prototype, "disabled", void 0);
  __decorate([
    n3({ type: Boolean })
  ], Field.prototype, "error", void 0);
  __decorate([
    n3({ type: Boolean })
  ], Field.prototype, "focused", void 0);
  __decorate([
    n3()
  ], Field.prototype, "label", void 0);
  __decorate([
    n3({ type: Boolean, attribute: "no-asterisk" })
  ], Field.prototype, "noAsterisk", void 0);
  __decorate([
    n3({ type: Boolean })
  ], Field.prototype, "populated", void 0);
  __decorate([
    n3({ type: Boolean })
  ], Field.prototype, "required", void 0);
  __decorate([
    n3({ type: Boolean })
  ], Field.prototype, "resizable", void 0);
  __decorate([
    n3({ attribute: "supporting-text" })
  ], Field.prototype, "supportingText", void 0);
  __decorate([
    n3({ attribute: "error-text" })
  ], Field.prototype, "errorText", void 0);
  __decorate([
    n3({ type: Number })
  ], Field.prototype, "count", void 0);
  __decorate([
    n3({ type: Number })
  ], Field.prototype, "max", void 0);
  __decorate([
    n3({ type: Boolean, attribute: "has-start" })
  ], Field.prototype, "hasStart", void 0);
  __decorate([
    n3({ type: Boolean, attribute: "has-end" })
  ], Field.prototype, "hasEnd", void 0);
  __decorate([
    o4({ slot: "aria-describedby" })
  ], Field.prototype, "slottedAriaDescribedBy", void 0);
  __decorate([
    r4()
  ], Field.prototype, "isAnimating", void 0);
  __decorate([
    r4()
  ], Field.prototype, "refreshErrorAlert", void 0);
  __decorate([
    r4()
  ], Field.prototype, "disableTransitions", void 0);
  __decorate([
    e4(".label.floating")
  ], Field.prototype, "floatingLabelEl", void 0);
  __decorate([
    e4(".label.resting")
  ], Field.prototype, "restingLabelEl", void 0);
  __decorate([
    e4(".container")
  ], Field.prototype, "containerEl", void 0);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/field/internal/outlined-field.js
  var OutlinedField = class extends Field {
    renderOutline(floatingLabel) {
      return x`
      <div class="outline">
        <div class="outline-start"></div>
        <div class="outline-notch">
          <div class="outline-panel-inactive"></div>
          <div class="outline-panel-active"></div>
          <div class="outline-label">${floatingLabel}</div>
        </div>
        <div class="outline-end"></div>
      </div>
    `;
    }
  };

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/field/internal/outlined-styles.js
  var styles9 = i`@layer styles{:host{--_bottom-space: var(--md-outlined-field-bottom-space, 16px);--_content-color: var(--md-outlined-field-content-color, var(--md-sys-color-on-surface, #1d1b20));--_content-font: var(--md-outlined-field-content-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_content-line-height: var(--md-outlined-field-content-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_content-size: var(--md-outlined-field-content-size, var(--md-sys-typescale-body-large-size, 1rem));--_content-space: var(--md-outlined-field-content-space, 16px);--_content-weight: var(--md-outlined-field-content-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_disabled-content-color: var(--md-outlined-field-disabled-content-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-content-opacity: var(--md-outlined-field-disabled-content-opacity, 0.38);--_disabled-label-text-color: var(--md-outlined-field-disabled-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-label-text-opacity: var(--md-outlined-field-disabled-label-text-opacity, 0.38);--_disabled-leading-content-color: var(--md-outlined-field-disabled-leading-content-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-leading-content-opacity: var(--md-outlined-field-disabled-leading-content-opacity, 0.38);--_disabled-outline-color: var(--md-outlined-field-disabled-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-outline-opacity: var(--md-outlined-field-disabled-outline-opacity, 0.12);--_disabled-outline-width: var(--md-outlined-field-disabled-outline-width, 1px);--_disabled-supporting-text-color: var(--md-outlined-field-disabled-supporting-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-supporting-text-opacity: var(--md-outlined-field-disabled-supporting-text-opacity, 0.38);--_disabled-trailing-content-color: var(--md-outlined-field-disabled-trailing-content-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-trailing-content-opacity: var(--md-outlined-field-disabled-trailing-content-opacity, 0.38);--_error-content-color: var(--md-outlined-field-error-content-color, var(--md-sys-color-on-surface, #1d1b20));--_error-focus-content-color: var(--md-outlined-field-error-focus-content-color, var(--md-sys-color-on-surface, #1d1b20));--_error-focus-label-text-color: var(--md-outlined-field-error-focus-label-text-color, var(--md-sys-color-error, #b3261e));--_error-focus-leading-content-color: var(--md-outlined-field-error-focus-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-focus-outline-color: var(--md-outlined-field-error-focus-outline-color, var(--md-sys-color-error, #b3261e));--_error-focus-supporting-text-color: var(--md-outlined-field-error-focus-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-focus-trailing-content-color: var(--md-outlined-field-error-focus-trailing-content-color, var(--md-sys-color-error, #b3261e));--_error-hover-content-color: var(--md-outlined-field-error-hover-content-color, var(--md-sys-color-on-surface, #1d1b20));--_error-hover-label-text-color: var(--md-outlined-field-error-hover-label-text-color, var(--md-sys-color-on-error-container, #410e0b));--_error-hover-leading-content-color: var(--md-outlined-field-error-hover-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-hover-outline-color: var(--md-outlined-field-error-hover-outline-color, var(--md-sys-color-on-error-container, #410e0b));--_error-hover-supporting-text-color: var(--md-outlined-field-error-hover-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-hover-trailing-content-color: var(--md-outlined-field-error-hover-trailing-content-color, var(--md-sys-color-on-error-container, #410e0b));--_error-label-text-color: var(--md-outlined-field-error-label-text-color, var(--md-sys-color-error, #b3261e));--_error-leading-content-color: var(--md-outlined-field-error-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-outline-color: var(--md-outlined-field-error-outline-color, var(--md-sys-color-error, #b3261e));--_error-supporting-text-color: var(--md-outlined-field-error-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-trailing-content-color: var(--md-outlined-field-error-trailing-content-color, var(--md-sys-color-error, #b3261e));--_focus-content-color: var(--md-outlined-field-focus-content-color, var(--md-sys-color-on-surface, #1d1b20));--_focus-label-text-color: var(--md-outlined-field-focus-label-text-color, var(--md-sys-color-primary, #6750a4));--_focus-leading-content-color: var(--md-outlined-field-focus-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_focus-outline-color: var(--md-outlined-field-focus-outline-color, var(--md-sys-color-primary, #6750a4));--_focus-outline-width: var(--md-outlined-field-focus-outline-width, 3px);--_focus-supporting-text-color: var(--md-outlined-field-focus-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_focus-trailing-content-color: var(--md-outlined-field-focus-trailing-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-content-color: var(--md-outlined-field-hover-content-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-label-text-color: var(--md-outlined-field-hover-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-leading-content-color: var(--md-outlined-field-hover-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-outline-color: var(--md-outlined-field-hover-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-outline-width: var(--md-outlined-field-hover-outline-width, 1px);--_hover-supporting-text-color: var(--md-outlined-field-hover-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-trailing-content-color: var(--md-outlined-field-hover-trailing-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_label-text-color: var(--md-outlined-field-label-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_label-text-font: var(--md-outlined-field-label-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_label-text-line-height: var(--md-outlined-field-label-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_label-text-padding-bottom: var(--md-outlined-field-label-text-padding-bottom, 8px);--_label-text-populated-line-height: var(--md-outlined-field-label-text-populated-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_label-text-populated-size: var(--md-outlined-field-label-text-populated-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_label-text-size: var(--md-outlined-field-label-text-size, var(--md-sys-typescale-body-large-size, 1rem));--_label-text-weight: var(--md-outlined-field-label-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_leading-content-color: var(--md-outlined-field-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_leading-space: var(--md-outlined-field-leading-space, 16px);--_outline-color: var(--md-outlined-field-outline-color, var(--md-sys-color-outline, #79747e));--_outline-label-padding: var(--md-outlined-field-outline-label-padding, 4px);--_outline-width: var(--md-outlined-field-outline-width, 1px);--_supporting-text-color: var(--md-outlined-field-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_supporting-text-font: var(--md-outlined-field-supporting-text-font, var(--md-sys-typescale-body-small-font, var(--md-ref-typeface-plain, Roboto)));--_supporting-text-leading-space: var(--md-outlined-field-supporting-text-leading-space, 16px);--_supporting-text-line-height: var(--md-outlined-field-supporting-text-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_supporting-text-size: var(--md-outlined-field-supporting-text-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_supporting-text-top-space: var(--md-outlined-field-supporting-text-top-space, 4px);--_supporting-text-trailing-space: var(--md-outlined-field-supporting-text-trailing-space, 16px);--_supporting-text-weight: var(--md-outlined-field-supporting-text-weight, var(--md-sys-typescale-body-small-weight, var(--md-ref-typeface-weight-regular, 400)));--_top-space: var(--md-outlined-field-top-space, 16px);--_trailing-content-color: var(--md-outlined-field-trailing-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_trailing-space: var(--md-outlined-field-trailing-space, 16px);--_with-leading-content-leading-space: var(--md-outlined-field-with-leading-content-leading-space, 12px);--_with-trailing-content-trailing-space: var(--md-outlined-field-with-trailing-content-trailing-space, 12px);--_container-shape-start-start: var(--md-outlined-field-container-shape-start-start, var(--md-outlined-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-start-end: var(--md-outlined-field-container-shape-start-end, var(--md-outlined-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-end-end: var(--md-outlined-field-container-shape-end-end, var(--md-outlined-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-end-start: var(--md-outlined-field-container-shape-end-start, var(--md-outlined-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)))}.outline{border-color:var(--_outline-color);border-radius:inherit;display:flex;pointer-events:none;height:100%;position:absolute;width:100%;z-index:1}.outline-start::before,.outline-start::after,.outline-panel-inactive::before,.outline-panel-inactive::after,.outline-panel-active::before,.outline-panel-active::after,.outline-end::before,.outline-end::after{border:inherit;content:"";inset:0;position:absolute}.outline-start,.outline-end{border:inherit;border-radius:inherit;box-sizing:border-box;position:relative}.outline-start::before,.outline-start::after,.outline-end::before,.outline-end::after{border-bottom-style:solid;border-top-style:solid}.outline-start::after,.outline-end::after{opacity:0;transition:opacity 150ms cubic-bezier(0.2, 0, 0, 1)}.focused .outline-start::after,.focused .outline-end::after{opacity:1}.outline-start::before,.outline-start::after{border-inline-start-style:solid;border-inline-end-style:none;border-start-start-radius:inherit;border-start-end-radius:0;border-end-start-radius:inherit;border-end-end-radius:0;margin-inline-end:var(--_outline-label-padding)}.outline-end{flex-grow:1;margin-inline-start:calc(-1*var(--_outline-label-padding))}.outline-end::before,.outline-end::after{border-inline-start-style:none;border-inline-end-style:solid;border-start-start-radius:0;border-start-end-radius:inherit;border-end-start-radius:0;border-end-end-radius:inherit}.outline-notch{align-items:flex-start;border:inherit;display:flex;margin-inline-start:calc(-1*var(--_outline-label-padding));margin-inline-end:var(--_outline-label-padding);max-width:calc(100% - var(--_leading-space) - var(--_trailing-space));padding:0 var(--_outline-label-padding);position:relative}.no-label .outline-notch{display:none}.outline-panel-inactive,.outline-panel-active{border:inherit;border-bottom-style:solid;inset:0;position:absolute}.outline-panel-inactive::before,.outline-panel-inactive::after,.outline-panel-active::before,.outline-panel-active::after{border-top-style:solid;border-bottom:none;bottom:auto;transform:scaleX(1);transition:transform 150ms cubic-bezier(0.2, 0, 0, 1)}.outline-panel-inactive::before,.outline-panel-active::before{right:50%;transform-origin:top left}.outline-panel-inactive::after,.outline-panel-active::after{left:50%;transform-origin:top right}.populated .outline-panel-inactive::before,.populated .outline-panel-inactive::after,.populated .outline-panel-active::before,.populated .outline-panel-active::after,.focused .outline-panel-inactive::before,.focused .outline-panel-inactive::after,.focused .outline-panel-active::before,.focused .outline-panel-active::after{transform:scaleX(0)}.outline-panel-active{opacity:0;transition:opacity 150ms cubic-bezier(0.2, 0, 0, 1)}.focused .outline-panel-active{opacity:1}.outline-label{display:flex;max-width:100%;transform:translateY(calc(-100% + var(--_label-text-padding-bottom)))}.outline-start,.field:not(.with-start) .content ::slotted(*){padding-inline-start:max(var(--_leading-space),max(var(--_container-shape-start-start),var(--_container-shape-end-start)) + var(--_outline-label-padding))}.field:not(.with-start) .label-wrapper{margin-inline-start:max(var(--_leading-space),max(var(--_container-shape-start-start),var(--_container-shape-end-start)) + var(--_outline-label-padding))}.field:not(.with-end) .content ::slotted(*){padding-inline-end:max(var(--_trailing-space),max(var(--_container-shape-start-end),var(--_container-shape-end-end)))}.field:not(.with-end) .label-wrapper{margin-inline-end:max(var(--_trailing-space),max(var(--_container-shape-start-end),var(--_container-shape-end-end)))}.outline-start::before,.outline-end::before,.outline-panel-inactive,.outline-panel-inactive::before,.outline-panel-inactive::after{border-width:var(--_outline-width)}:hover .outline{border-color:var(--_hover-outline-color);color:var(--_hover-outline-color)}:hover .outline-start::before,:hover .outline-end::before,:hover .outline-panel-inactive,:hover .outline-panel-inactive::before,:hover .outline-panel-inactive::after{border-width:var(--_hover-outline-width)}.focused .outline{border-color:var(--_focus-outline-color);color:var(--_focus-outline-color)}.outline-start::after,.outline-end::after,.outline-panel-active,.outline-panel-active::before,.outline-panel-active::after{border-width:var(--_focus-outline-width)}.disabled .outline{border-color:var(--_disabled-outline-color);color:var(--_disabled-outline-color)}.disabled .outline-start,.disabled .outline-end,.disabled .outline-panel-inactive{opacity:var(--_disabled-outline-opacity)}.disabled .outline-start::before,.disabled .outline-end::before,.disabled .outline-panel-inactive,.disabled .outline-panel-inactive::before,.disabled .outline-panel-inactive::after{border-width:var(--_disabled-outline-width)}.error .outline{border-color:var(--_error-outline-color);color:var(--_error-outline-color)}.error:hover .outline{border-color:var(--_error-hover-outline-color);color:var(--_error-hover-outline-color)}.error.focused .outline{border-color:var(--_error-focus-outline-color);color:var(--_error-focus-outline-color)}.resizable .container{bottom:var(--_focus-outline-width);inset-inline-end:var(--_focus-outline-width);clip-path:inset(var(--_focus-outline-width) 0 0 var(--_focus-outline-width))}.resizable .container>*{top:var(--_focus-outline-width);inset-inline-start:var(--_focus-outline-width)}.resizable .container:dir(rtl){clip-path:inset(var(--_focus-outline-width) var(--_focus-outline-width) 0 0)}}@layer hcm{@media(forced-colors: active){.disabled .outline{border-color:GrayText;color:GrayText}.disabled :is(.outline-start,.outline-end,.outline-panel-inactive){opacity:1}}}
`;

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/field/internal/shared-styles.js
  var styles10 = i`:host{display:inline-flex;resize:both}.field{display:flex;flex:1;flex-direction:column;writing-mode:horizontal-tb;max-width:100%}.container-overflow{border-start-start-radius:var(--_container-shape-start-start);border-start-end-radius:var(--_container-shape-start-end);border-end-end-radius:var(--_container-shape-end-end);border-end-start-radius:var(--_container-shape-end-start);display:flex;height:100%;position:relative}.container{align-items:center;border-radius:inherit;display:flex;flex:1;max-height:100%;min-height:100%;min-width:min-content;position:relative}.field,.container-overflow{resize:inherit}.resizable:not(.disabled) .container{resize:inherit;overflow:hidden}.disabled{pointer-events:none}slot[name=container]{border-radius:inherit}slot[name=container]::slotted(*){border-radius:inherit;inset:0;pointer-events:none;position:absolute}@layer styles{.start,.middle,.end{display:flex;box-sizing:border-box;height:100%;position:relative}.start{color:var(--_leading-content-color)}.end{color:var(--_trailing-content-color)}.start,.end{align-items:center;justify-content:center}.with-start .start{margin-inline:var(--_with-leading-content-leading-space) var(--_content-space)}.with-end .end{margin-inline:var(--_content-space) var(--_with-trailing-content-trailing-space)}.middle{align-items:stretch;align-self:baseline;flex:1}.content{color:var(--_content-color);display:flex;flex:1;opacity:0;transition:opacity 83ms cubic-bezier(0.2, 0, 0, 1)}.no-label .content,.focused .content,.populated .content{opacity:1;transition-delay:67ms}:is(.disabled,.disable-transitions) .content{transition:none}.content ::slotted(*){all:unset;color:currentColor;font-family:var(--_content-font);font-size:var(--_content-size);line-height:var(--_content-line-height);font-weight:var(--_content-weight);width:100%;overflow-wrap:revert;white-space:revert}.content ::slotted(:not(textarea)){padding-top:var(--_top-space);padding-bottom:var(--_bottom-space)}.content ::slotted(textarea){margin-top:var(--_top-space);margin-bottom:var(--_bottom-space)}:hover .content{color:var(--_hover-content-color)}:hover .start{color:var(--_hover-leading-content-color)}:hover .end{color:var(--_hover-trailing-content-color)}.focused .content{color:var(--_focus-content-color)}.focused .start{color:var(--_focus-leading-content-color)}.focused .end{color:var(--_focus-trailing-content-color)}.disabled .content{color:var(--_disabled-content-color)}.disabled.no-label .content,.disabled.focused .content,.disabled.populated .content{opacity:var(--_disabled-content-opacity)}.disabled .start{color:var(--_disabled-leading-content-color);opacity:var(--_disabled-leading-content-opacity)}.disabled .end{color:var(--_disabled-trailing-content-color);opacity:var(--_disabled-trailing-content-opacity)}.error .content{color:var(--_error-content-color)}.error .start{color:var(--_error-leading-content-color)}.error .end{color:var(--_error-trailing-content-color)}.error:hover .content{color:var(--_error-hover-content-color)}.error:hover .start{color:var(--_error-hover-leading-content-color)}.error:hover .end{color:var(--_error-hover-trailing-content-color)}.error.focused .content{color:var(--_error-focus-content-color)}.error.focused .start{color:var(--_error-focus-leading-content-color)}.error.focused .end{color:var(--_error-focus-trailing-content-color)}}@layer hcm{@media(forced-colors: active){.disabled :is(.start,.content,.end){color:GrayText;opacity:1}}}@layer styles{.label{box-sizing:border-box;color:var(--_label-text-color);overflow:hidden;max-width:100%;text-overflow:ellipsis;white-space:nowrap;z-index:1;font-family:var(--_label-text-font);font-size:var(--_label-text-size);line-height:var(--_label-text-line-height);font-weight:var(--_label-text-weight);width:min-content}.label-wrapper{inset:0;pointer-events:none;position:absolute}.label.resting{position:absolute;top:var(--_top-space)}.label.floating{font-size:var(--_label-text-populated-size);line-height:var(--_label-text-populated-line-height);transform-origin:top left}.label.hidden{opacity:0}.no-label .label{display:none}.label-wrapper{inset:0;position:absolute;text-align:initial}:hover .label{color:var(--_hover-label-text-color)}.focused .label{color:var(--_focus-label-text-color)}.disabled .label{color:var(--_disabled-label-text-color)}.disabled .label:not(.hidden){opacity:var(--_disabled-label-text-opacity)}.error .label{color:var(--_error-label-text-color)}.error:hover .label{color:var(--_error-hover-label-text-color)}.error.focused .label{color:var(--_error-focus-label-text-color)}}@layer hcm{@media(forced-colors: active){.disabled .label:not(.hidden){color:GrayText;opacity:1}}}@layer styles{.supporting-text{color:var(--_supporting-text-color);display:flex;font-family:var(--_supporting-text-font);font-size:var(--_supporting-text-size);line-height:var(--_supporting-text-line-height);font-weight:var(--_supporting-text-weight);gap:16px;justify-content:space-between;padding-inline-start:var(--_supporting-text-leading-space);padding-inline-end:var(--_supporting-text-trailing-space);padding-top:var(--_supporting-text-top-space)}.supporting-text :nth-child(2){flex-shrink:0}:hover .supporting-text{color:var(--_hover-supporting-text-color)}.focus .supporting-text{color:var(--_focus-supporting-text-color)}.disabled .supporting-text{color:var(--_disabled-supporting-text-color);opacity:var(--_disabled-supporting-text-opacity)}.error .supporting-text{color:var(--_error-supporting-text-color)}.error:hover .supporting-text{color:var(--_error-hover-supporting-text-color)}.error.focus .supporting-text{color:var(--_error-focus-supporting-text-color)}}@layer hcm{@media(forced-colors: active){.disabled .supporting-text{color:GrayText;opacity:1}}}
`;

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/field/outlined-field.js
  var MdOutlinedField = class MdOutlinedField2 extends OutlinedField {
  };
  MdOutlinedField.styles = [styles10, styles9];
  MdOutlinedField = __decorate([
    t("md-outlined-field")
  ], MdOutlinedField);

  // node_modules/.pnpm/lit-html@3.3.0/node_modules/lit-html/static.js
  var a3 = Symbol.for("");
  var o8 = (t6) => {
    if (t6?.r === a3) return t6?._$litStatic$;
  };
  var i6 = (t6, ...r7) => ({ _$litStatic$: r7.reduce((r8, e8, a4) => r8 + ((t7) => {
    if (void 0 !== t7._$litStatic$) return t7._$litStatic$;
    throw Error(`Value passed to 'literal' function must be a 'literal' result: ${t7}. Use 'unsafeStatic' to pass non-literal values, but
            take care to ensure page security.`);
  })(e8) + t6[a4 + 1], t6[0]), r: a3 });
  var l3 = /* @__PURE__ */ new Map();
  var n5 = (t6) => (r7, ...e8) => {
    const a4 = e8.length;
    let s4, i8;
    const n8 = [], u5 = [];
    let c5, $3 = 0, f4 = false;
    for (; $3 < a4; ) {
      for (c5 = r7[$3]; $3 < a4 && void 0 !== (i8 = e8[$3], s4 = o8(i8)); ) c5 += s4 + r7[++$3], f4 = true;
      $3 !== a4 && u5.push(i8), n8.push(c5), $3++;
    }
    if ($3 === a4 && n8.push(r7[a4]), f4) {
      const t7 = n8.join("$$lit$$");
      void 0 === (r7 = l3.get(t7)) && (n8.raw = n8, l3.set(t7, r7 = n8)), e8 = u5;
    }
    return t6(r7, ...e8);
  };
  var u3 = n5(x);
  var c4 = n5(b2);
  var $2 = n5(w);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/textfield/internal/outlined-styles.js
  var styles11 = i`:host{--_caret-color: var(--md-outlined-text-field-caret-color, var(--md-sys-color-primary, #6750a4));--_disabled-input-text-color: var(--md-outlined-text-field-disabled-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-input-text-opacity: var(--md-outlined-text-field-disabled-input-text-opacity, 0.38);--_disabled-label-text-color: var(--md-outlined-text-field-disabled-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-label-text-opacity: var(--md-outlined-text-field-disabled-label-text-opacity, 0.38);--_disabled-leading-icon-color: var(--md-outlined-text-field-disabled-leading-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-leading-icon-opacity: var(--md-outlined-text-field-disabled-leading-icon-opacity, 0.38);--_disabled-outline-color: var(--md-outlined-text-field-disabled-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-outline-opacity: var(--md-outlined-text-field-disabled-outline-opacity, 0.12);--_disabled-outline-width: var(--md-outlined-text-field-disabled-outline-width, 1px);--_disabled-supporting-text-color: var(--md-outlined-text-field-disabled-supporting-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-supporting-text-opacity: var(--md-outlined-text-field-disabled-supporting-text-opacity, 0.38);--_disabled-trailing-icon-color: var(--md-outlined-text-field-disabled-trailing-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-trailing-icon-opacity: var(--md-outlined-text-field-disabled-trailing-icon-opacity, 0.38);--_error-focus-caret-color: var(--md-outlined-text-field-error-focus-caret-color, var(--md-sys-color-error, #b3261e));--_error-focus-input-text-color: var(--md-outlined-text-field-error-focus-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_error-focus-label-text-color: var(--md-outlined-text-field-error-focus-label-text-color, var(--md-sys-color-error, #b3261e));--_error-focus-leading-icon-color: var(--md-outlined-text-field-error-focus-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-focus-outline-color: var(--md-outlined-text-field-error-focus-outline-color, var(--md-sys-color-error, #b3261e));--_error-focus-supporting-text-color: var(--md-outlined-text-field-error-focus-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-focus-trailing-icon-color: var(--md-outlined-text-field-error-focus-trailing-icon-color, var(--md-sys-color-error, #b3261e));--_error-hover-input-text-color: var(--md-outlined-text-field-error-hover-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_error-hover-label-text-color: var(--md-outlined-text-field-error-hover-label-text-color, var(--md-sys-color-on-error-container, #410e0b));--_error-hover-leading-icon-color: var(--md-outlined-text-field-error-hover-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-hover-outline-color: var(--md-outlined-text-field-error-hover-outline-color, var(--md-sys-color-on-error-container, #410e0b));--_error-hover-supporting-text-color: var(--md-outlined-text-field-error-hover-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-hover-trailing-icon-color: var(--md-outlined-text-field-error-hover-trailing-icon-color, var(--md-sys-color-on-error-container, #410e0b));--_error-input-text-color: var(--md-outlined-text-field-error-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_error-label-text-color: var(--md-outlined-text-field-error-label-text-color, var(--md-sys-color-error, #b3261e));--_error-leading-icon-color: var(--md-outlined-text-field-error-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-outline-color: var(--md-outlined-text-field-error-outline-color, var(--md-sys-color-error, #b3261e));--_error-supporting-text-color: var(--md-outlined-text-field-error-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-trailing-icon-color: var(--md-outlined-text-field-error-trailing-icon-color, var(--md-sys-color-error, #b3261e));--_focus-input-text-color: var(--md-outlined-text-field-focus-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_focus-label-text-color: var(--md-outlined-text-field-focus-label-text-color, var(--md-sys-color-primary, #6750a4));--_focus-leading-icon-color: var(--md-outlined-text-field-focus-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_focus-outline-color: var(--md-outlined-text-field-focus-outline-color, var(--md-sys-color-primary, #6750a4));--_focus-outline-width: var(--md-outlined-text-field-focus-outline-width, 3px);--_focus-supporting-text-color: var(--md-outlined-text-field-focus-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_focus-trailing-icon-color: var(--md-outlined-text-field-focus-trailing-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-input-text-color: var(--md-outlined-text-field-hover-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-label-text-color: var(--md-outlined-text-field-hover-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-leading-icon-color: var(--md-outlined-text-field-hover-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-outline-color: var(--md-outlined-text-field-hover-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-outline-width: var(--md-outlined-text-field-hover-outline-width, 1px);--_hover-supporting-text-color: var(--md-outlined-text-field-hover-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-trailing-icon-color: var(--md-outlined-text-field-hover-trailing-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_input-text-color: var(--md-outlined-text-field-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_input-text-font: var(--md-outlined-text-field-input-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_input-text-line-height: var(--md-outlined-text-field-input-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_input-text-placeholder-color: var(--md-outlined-text-field-input-text-placeholder-color, var(--md-sys-color-on-surface-variant, #49454f));--_input-text-prefix-color: var(--md-outlined-text-field-input-text-prefix-color, var(--md-sys-color-on-surface-variant, #49454f));--_input-text-size: var(--md-outlined-text-field-input-text-size, var(--md-sys-typescale-body-large-size, 1rem));--_input-text-suffix-color: var(--md-outlined-text-field-input-text-suffix-color, var(--md-sys-color-on-surface-variant, #49454f));--_input-text-weight: var(--md-outlined-text-field-input-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_label-text-color: var(--md-outlined-text-field-label-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_label-text-font: var(--md-outlined-text-field-label-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_label-text-line-height: var(--md-outlined-text-field-label-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_label-text-populated-line-height: var(--md-outlined-text-field-label-text-populated-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_label-text-populated-size: var(--md-outlined-text-field-label-text-populated-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_label-text-size: var(--md-outlined-text-field-label-text-size, var(--md-sys-typescale-body-large-size, 1rem));--_label-text-weight: var(--md-outlined-text-field-label-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_leading-icon-color: var(--md-outlined-text-field-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_leading-icon-size: var(--md-outlined-text-field-leading-icon-size, 24px);--_outline-color: var(--md-outlined-text-field-outline-color, var(--md-sys-color-outline, #79747e));--_outline-width: var(--md-outlined-text-field-outline-width, 1px);--_supporting-text-color: var(--md-outlined-text-field-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_supporting-text-font: var(--md-outlined-text-field-supporting-text-font, var(--md-sys-typescale-body-small-font, var(--md-ref-typeface-plain, Roboto)));--_supporting-text-line-height: var(--md-outlined-text-field-supporting-text-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_supporting-text-size: var(--md-outlined-text-field-supporting-text-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_supporting-text-weight: var(--md-outlined-text-field-supporting-text-weight, var(--md-sys-typescale-body-small-weight, var(--md-ref-typeface-weight-regular, 400)));--_trailing-icon-color: var(--md-outlined-text-field-trailing-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_trailing-icon-size: var(--md-outlined-text-field-trailing-icon-size, 24px);--_container-shape-start-start: var(--md-outlined-text-field-container-shape-start-start, var(--md-outlined-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-start-end: var(--md-outlined-text-field-container-shape-start-end, var(--md-outlined-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-end-end: var(--md-outlined-text-field-container-shape-end-end, var(--md-outlined-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-end-start: var(--md-outlined-text-field-container-shape-end-start, var(--md-outlined-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_icon-input-space: var(--md-outlined-text-field-icon-input-space, 16px);--_leading-space: var(--md-outlined-text-field-leading-space, 16px);--_trailing-space: var(--md-outlined-text-field-trailing-space, 16px);--_top-space: var(--md-outlined-text-field-top-space, 16px);--_bottom-space: var(--md-outlined-text-field-bottom-space, 16px);--_input-text-prefix-trailing-space: var(--md-outlined-text-field-input-text-prefix-trailing-space, 2px);--_input-text-suffix-leading-space: var(--md-outlined-text-field-input-text-suffix-leading-space, 2px);--_focus-caret-color: var(--md-outlined-text-field-focus-caret-color, var(--md-sys-color-primary, #6750a4));--_with-leading-icon-leading-space: var(--md-outlined-text-field-with-leading-icon-leading-space, 12px);--_with-trailing-icon-trailing-space: var(--md-outlined-text-field-with-trailing-icon-trailing-space, 12px);--md-outlined-field-bottom-space: var(--_bottom-space);--md-outlined-field-container-shape-end-end: var(--_container-shape-end-end);--md-outlined-field-container-shape-end-start: var(--_container-shape-end-start);--md-outlined-field-container-shape-start-end: var(--_container-shape-start-end);--md-outlined-field-container-shape-start-start: var(--_container-shape-start-start);--md-outlined-field-content-color: var(--_input-text-color);--md-outlined-field-content-font: var(--_input-text-font);--md-outlined-field-content-line-height: var(--_input-text-line-height);--md-outlined-field-content-size: var(--_input-text-size);--md-outlined-field-content-space: var(--_icon-input-space);--md-outlined-field-content-weight: var(--_input-text-weight);--md-outlined-field-disabled-content-color: var(--_disabled-input-text-color);--md-outlined-field-disabled-content-opacity: var(--_disabled-input-text-opacity);--md-outlined-field-disabled-label-text-color: var(--_disabled-label-text-color);--md-outlined-field-disabled-label-text-opacity: var(--_disabled-label-text-opacity);--md-outlined-field-disabled-leading-content-color: var(--_disabled-leading-icon-color);--md-outlined-field-disabled-leading-content-opacity: var(--_disabled-leading-icon-opacity);--md-outlined-field-disabled-outline-color: var(--_disabled-outline-color);--md-outlined-field-disabled-outline-opacity: var(--_disabled-outline-opacity);--md-outlined-field-disabled-outline-width: var(--_disabled-outline-width);--md-outlined-field-disabled-supporting-text-color: var(--_disabled-supporting-text-color);--md-outlined-field-disabled-supporting-text-opacity: var(--_disabled-supporting-text-opacity);--md-outlined-field-disabled-trailing-content-color: var(--_disabled-trailing-icon-color);--md-outlined-field-disabled-trailing-content-opacity: var(--_disabled-trailing-icon-opacity);--md-outlined-field-error-content-color: var(--_error-input-text-color);--md-outlined-field-error-focus-content-color: var(--_error-focus-input-text-color);--md-outlined-field-error-focus-label-text-color: var(--_error-focus-label-text-color);--md-outlined-field-error-focus-leading-content-color: var(--_error-focus-leading-icon-color);--md-outlined-field-error-focus-outline-color: var(--_error-focus-outline-color);--md-outlined-field-error-focus-supporting-text-color: var(--_error-focus-supporting-text-color);--md-outlined-field-error-focus-trailing-content-color: var(--_error-focus-trailing-icon-color);--md-outlined-field-error-hover-content-color: var(--_error-hover-input-text-color);--md-outlined-field-error-hover-label-text-color: var(--_error-hover-label-text-color);--md-outlined-field-error-hover-leading-content-color: var(--_error-hover-leading-icon-color);--md-outlined-field-error-hover-outline-color: var(--_error-hover-outline-color);--md-outlined-field-error-hover-supporting-text-color: var(--_error-hover-supporting-text-color);--md-outlined-field-error-hover-trailing-content-color: var(--_error-hover-trailing-icon-color);--md-outlined-field-error-label-text-color: var(--_error-label-text-color);--md-outlined-field-error-leading-content-color: var(--_error-leading-icon-color);--md-outlined-field-error-outline-color: var(--_error-outline-color);--md-outlined-field-error-supporting-text-color: var(--_error-supporting-text-color);--md-outlined-field-error-trailing-content-color: var(--_error-trailing-icon-color);--md-outlined-field-focus-content-color: var(--_focus-input-text-color);--md-outlined-field-focus-label-text-color: var(--_focus-label-text-color);--md-outlined-field-focus-leading-content-color: var(--_focus-leading-icon-color);--md-outlined-field-focus-outline-color: var(--_focus-outline-color);--md-outlined-field-focus-outline-width: var(--_focus-outline-width);--md-outlined-field-focus-supporting-text-color: var(--_focus-supporting-text-color);--md-outlined-field-focus-trailing-content-color: var(--_focus-trailing-icon-color);--md-outlined-field-hover-content-color: var(--_hover-input-text-color);--md-outlined-field-hover-label-text-color: var(--_hover-label-text-color);--md-outlined-field-hover-leading-content-color: var(--_hover-leading-icon-color);--md-outlined-field-hover-outline-color: var(--_hover-outline-color);--md-outlined-field-hover-outline-width: var(--_hover-outline-width);--md-outlined-field-hover-supporting-text-color: var(--_hover-supporting-text-color);--md-outlined-field-hover-trailing-content-color: var(--_hover-trailing-icon-color);--md-outlined-field-label-text-color: var(--_label-text-color);--md-outlined-field-label-text-font: var(--_label-text-font);--md-outlined-field-label-text-line-height: var(--_label-text-line-height);--md-outlined-field-label-text-populated-line-height: var(--_label-text-populated-line-height);--md-outlined-field-label-text-populated-size: var(--_label-text-populated-size);--md-outlined-field-label-text-size: var(--_label-text-size);--md-outlined-field-label-text-weight: var(--_label-text-weight);--md-outlined-field-leading-content-color: var(--_leading-icon-color);--md-outlined-field-leading-space: var(--_leading-space);--md-outlined-field-outline-color: var(--_outline-color);--md-outlined-field-outline-width: var(--_outline-width);--md-outlined-field-supporting-text-color: var(--_supporting-text-color);--md-outlined-field-supporting-text-font: var(--_supporting-text-font);--md-outlined-field-supporting-text-line-height: var(--_supporting-text-line-height);--md-outlined-field-supporting-text-size: var(--_supporting-text-size);--md-outlined-field-supporting-text-weight: var(--_supporting-text-weight);--md-outlined-field-top-space: var(--_top-space);--md-outlined-field-trailing-content-color: var(--_trailing-icon-color);--md-outlined-field-trailing-space: var(--_trailing-space);--md-outlined-field-with-leading-content-leading-space: var(--_with-leading-icon-leading-space);--md-outlined-field-with-trailing-content-trailing-space: var(--_with-trailing-icon-trailing-space)}
`;

  // node_modules/.pnpm/lit-html@3.3.0/node_modules/lit-html/directive-helpers.js
  var { I: t5 } = Z;
  var f3 = (o10) => void 0 === o10.strings;
  var u4 = {};
  var m2 = (o10, t6 = u4) => o10._$AH = t6;

  // node_modules/.pnpm/lit-html@3.3.0/node_modules/lit-html/directives/live.js
  var l4 = e6(class extends i5 {
    constructor(r7) {
      if (super(r7), r7.type !== t4.PROPERTY && r7.type !== t4.ATTRIBUTE && r7.type !== t4.BOOLEAN_ATTRIBUTE) throw Error("The `live` directive is not allowed on child or event bindings");
      if (!f3(r7)) throw Error("`live` bindings can only contain a single expression");
    }
    render(r7) {
      return r7;
    }
    update(i8, [t6]) {
      if (t6 === T || t6 === E) return t6;
      const o10 = i8.element, l5 = i8.name;
      if (i8.type === t4.PROPERTY) {
        if (t6 === o10[l5]) return T;
      } else if (i8.type === t4.BOOLEAN_ATTRIBUTE) {
        if (!!t6 === o10.hasAttribute(l5)) return T;
      } else if (i8.type === t4.ATTRIBUTE && o10.getAttribute(l5) === t6 + "") return T;
      return m2(i8), t6;
    }
  });

  // node_modules/.pnpm/lit-html@3.3.0/node_modules/lit-html/directives/style-map.js
  var n6 = "important";
  var i7 = " !" + n6;
  var o9 = e6(class extends i5 {
    constructor(t6) {
      if (super(t6), t6.type !== t4.ATTRIBUTE || "style" !== t6.name || t6.strings?.length > 2) throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.");
    }
    render(t6) {
      return Object.keys(t6).reduce((e8, r7) => {
        const s4 = t6[r7];
        return null == s4 ? e8 : e8 + `${r7 = r7.includes("-") ? r7 : r7.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, "-$&").toLowerCase()}:${s4};`;
      }, "");
    }
    update(e8, [r7]) {
      const { style: s4 } = e8.element;
      if (void 0 === this.ft) return this.ft = new Set(Object.keys(r7)), this.render(r7);
      for (const t6 of this.ft) null == r7[t6] && (this.ft.delete(t6), t6.includes("-") ? s4.removeProperty(t6) : s4[t6] = null);
      for (const t6 in r7) {
        const e9 = r7[t6];
        if (null != e9) {
          this.ft.add(t6);
          const r8 = "string" == typeof e9 && e9.endsWith(i7);
          t6.includes("-") || r8 ? s4.setProperty(t6, r8 ? e9.slice(0, -11) : e9, r8 ? n6 : "") : s4[t6] = e9;
        }
      }
      return T;
    }
  });

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/internal/controller/string-converter.js
  var stringConverter = {
    fromAttribute(value) {
      return value ?? "";
    },
    toAttribute(value) {
      return value || null;
    }
  };

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/labs/behaviors/on-report-validity.js
  var onReportValidity = Symbol("onReportValidity");
  var privateCleanupFormListeners = Symbol("privateCleanupFormListeners");
  var privateDoNotReportInvalid = Symbol("privateDoNotReportInvalid");
  var privateIsSelfReportingValidity = Symbol("privateIsSelfReportingValidity");
  var privateCallOnReportValidity = Symbol("privateCallOnReportValidity");
  function mixinOnReportValidity(base) {
    var _a2, _b, _c;
    class OnReportValidityElement extends base {
      // Mixins must have a constructor with `...args: any[]`
      // tslint:disable-next-line:no-any
      constructor(...args) {
        super(...args);
        this[_a2] = new AbortController();
        this[_b] = false;
        this[_c] = false;
        if (o7) {
          return;
        }
        this.addEventListener("invalid", (invalidEvent) => {
          if (this[privateDoNotReportInvalid] || !invalidEvent.isTrusted) {
            return;
          }
          this.addEventListener("invalid", () => {
            this[privateCallOnReportValidity](invalidEvent);
          }, { once: true });
        }, {
          // Listen during the capture phase, which will happen before the
          // bubbling phase. That way, we can add a final event listener that
          // will run after other event listeners, and we can check if it was
          // default prevented. This works because invalid does not bubble.
          capture: true
        });
      }
      checkValidity() {
        this[privateDoNotReportInvalid] = true;
        const valid = super.checkValidity();
        this[privateDoNotReportInvalid] = false;
        return valid;
      }
      reportValidity() {
        this[privateIsSelfReportingValidity] = true;
        const valid = super.reportValidity();
        if (valid) {
          this[privateCallOnReportValidity](null);
        }
        this[privateIsSelfReportingValidity] = false;
        return valid;
      }
      [(_a2 = privateCleanupFormListeners, _b = privateDoNotReportInvalid, _c = privateIsSelfReportingValidity, privateCallOnReportValidity)](invalidEvent) {
        const wasCanceled = invalidEvent?.defaultPrevented;
        if (wasCanceled) {
          return;
        }
        this[onReportValidity](invalidEvent);
        const implementationCanceledFocus = !wasCanceled && invalidEvent?.defaultPrevented;
        if (!implementationCanceledFocus) {
          return;
        }
        if (this[privateIsSelfReportingValidity] || isFirstInvalidControlInForm(this[internals].form, this)) {
          this.focus();
        }
      }
      [onReportValidity](invalidEvent) {
        throw new Error("Implement [onReportValidity]");
      }
      formAssociatedCallback(form) {
        if (super.formAssociatedCallback) {
          super.formAssociatedCallback(form);
        }
        this[privateCleanupFormListeners].abort();
        if (!form) {
          return;
        }
        this[privateCleanupFormListeners] = new AbortController();
        addFormReportValidListener(this, form, () => {
          this[privateCallOnReportValidity](null);
        }, this[privateCleanupFormListeners].signal);
      }
    }
    return OnReportValidityElement;
  }
  function addFormReportValidListener(control, form, onControlValid, cleanup) {
    const validateHooks = getFormValidateHooks(form);
    let controlFiredInvalid = false;
    let cleanupInvalidListener;
    let isNextSubmitFromHook = false;
    validateHooks.addEventListener("before", () => {
      isNextSubmitFromHook = true;
      cleanupInvalidListener = new AbortController();
      controlFiredInvalid = false;
      control.addEventListener("invalid", () => {
        controlFiredInvalid = true;
      }, {
        signal: cleanupInvalidListener.signal
      });
    }, { signal: cleanup });
    validateHooks.addEventListener("after", () => {
      isNextSubmitFromHook = false;
      cleanupInvalidListener?.abort();
      if (controlFiredInvalid) {
        return;
      }
      onControlValid();
    }, { signal: cleanup });
    form.addEventListener("submit", () => {
      if (isNextSubmitFromHook) {
        return;
      }
      onControlValid();
    }, {
      signal: cleanup
    });
  }
  var FORM_VALIDATE_HOOKS = /* @__PURE__ */ new WeakMap();
  function getFormValidateHooks(form) {
    if (!FORM_VALIDATE_HOOKS.has(form)) {
      const hooks = new EventTarget();
      FORM_VALIDATE_HOOKS.set(form, hooks);
      for (const methodName of ["reportValidity", "requestSubmit"]) {
        const superMethod = form[methodName];
        form[methodName] = function() {
          hooks.dispatchEvent(new Event("before"));
          const result = Reflect.apply(superMethod, this, arguments);
          hooks.dispatchEvent(new Event("after"));
          return result;
        };
      }
    }
    return FORM_VALIDATE_HOOKS.get(form);
  }
  function isFirstInvalidControlInForm(form, control) {
    if (!form) {
      return true;
    }
    let firstInvalidControl;
    for (const element of form.elements) {
      if (element.matches(":invalid")) {
        firstInvalidControl = element;
        break;
      }
    }
    return firstInvalidControl === control;
  }

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/labs/behaviors/validators/text-field-validator.js
  var TextFieldValidator = class extends Validator {
    computeValidity({ state, renderedControl }) {
      let inputOrTextArea = renderedControl;
      if (isInputState(state) && !inputOrTextArea) {
        inputOrTextArea = this.inputControl || document.createElement("input");
        this.inputControl = inputOrTextArea;
      } else if (!inputOrTextArea) {
        inputOrTextArea = this.textAreaControl || document.createElement("textarea");
        this.textAreaControl = inputOrTextArea;
      }
      const input = isInputState(state) ? inputOrTextArea : null;
      if (input) {
        input.type = state.type;
      }
      if (inputOrTextArea.value !== state.value) {
        inputOrTextArea.value = state.value;
      }
      inputOrTextArea.required = state.required;
      if (input) {
        const inputState = state;
        if (inputState.pattern) {
          input.pattern = inputState.pattern;
        } else {
          input.removeAttribute("pattern");
        }
        if (inputState.min) {
          input.min = inputState.min;
        } else {
          input.removeAttribute("min");
        }
        if (inputState.max) {
          input.max = inputState.max;
        } else {
          input.removeAttribute("max");
        }
        if (inputState.step) {
          input.step = inputState.step;
        } else {
          input.removeAttribute("step");
        }
      }
      if ((state.minLength ?? -1) > -1) {
        inputOrTextArea.setAttribute("minlength", String(state.minLength));
      } else {
        inputOrTextArea.removeAttribute("minlength");
      }
      if ((state.maxLength ?? -1) > -1) {
        inputOrTextArea.setAttribute("maxlength", String(state.maxLength));
      } else {
        inputOrTextArea.removeAttribute("maxlength");
      }
      return {
        validity: inputOrTextArea.validity,
        validationMessage: inputOrTextArea.validationMessage
      };
    }
    equals({ state: prev }, { state: next }) {
      const inputOrTextAreaEqual = prev.type === next.type && prev.value === next.value && prev.required === next.required && prev.minLength === next.minLength && prev.maxLength === next.maxLength;
      if (!isInputState(prev) || !isInputState(next)) {
        return inputOrTextAreaEqual;
      }
      return inputOrTextAreaEqual && prev.pattern === next.pattern && prev.min === next.min && prev.max === next.max && prev.step === next.step;
    }
    copy({ state }) {
      return {
        state: isInputState(state) ? this.copyInput(state) : this.copyTextArea(state),
        renderedControl: null
      };
    }
    copyInput(state) {
      const { type, pattern, min, max, step } = state;
      return {
        ...this.copySharedState(state),
        type,
        pattern,
        min,
        max,
        step
      };
    }
    copyTextArea(state) {
      return {
        ...this.copySharedState(state),
        type: state.type
      };
    }
    copySharedState({ value, required, minLength, maxLength }) {
      return { value, required, minLength, maxLength };
    }
  };
  function isInputState(state) {
    return state.type !== "textarea";
  }

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/textfield/internal/text-field.js
  var textFieldBaseClass = mixinDelegatesAria(mixinOnReportValidity(mixinConstraintValidation(mixinFormAssociated(mixinElementInternals(i4)))));
  var TextField = class extends textFieldBaseClass {
    constructor() {
      super(...arguments);
      this.error = false;
      this.errorText = "";
      this.label = "";
      this.noAsterisk = false;
      this.required = false;
      this.value = "";
      this.prefixText = "";
      this.suffixText = "";
      this.hasLeadingIcon = false;
      this.hasTrailingIcon = false;
      this.supportingText = "";
      this.textDirection = "";
      this.rows = 2;
      this.cols = 20;
      this.inputMode = "";
      this.max = "";
      this.maxLength = -1;
      this.min = "";
      this.minLength = -1;
      this.noSpinner = false;
      this.pattern = "";
      this.placeholder = "";
      this.readOnly = false;
      this.multiple = false;
      this.step = "";
      this.type = "text";
      this.autocomplete = "";
      this.dirty = false;
      this.focused = false;
      this.nativeError = false;
      this.nativeErrorText = "";
    }
    /**
     * Gets or sets the direction in which selection occurred.
     */
    get selectionDirection() {
      return this.getInputOrTextarea().selectionDirection;
    }
    set selectionDirection(value) {
      this.getInputOrTextarea().selectionDirection = value;
    }
    /**
     * Gets or sets the end position or offset of a text selection.
     */
    get selectionEnd() {
      return this.getInputOrTextarea().selectionEnd;
    }
    set selectionEnd(value) {
      this.getInputOrTextarea().selectionEnd = value;
    }
    /**
     * Gets or sets the starting position or offset of a text selection.
     */
    get selectionStart() {
      return this.getInputOrTextarea().selectionStart;
    }
    set selectionStart(value) {
      this.getInputOrTextarea().selectionStart = value;
    }
    /**
     * The text field's value as a number.
     */
    get valueAsNumber() {
      const input = this.getInput();
      if (!input) {
        return NaN;
      }
      return input.valueAsNumber;
    }
    set valueAsNumber(value) {
      const input = this.getInput();
      if (!input) {
        return;
      }
      input.valueAsNumber = value;
      this.value = input.value;
    }
    /**
     * The text field's value as a Date.
     */
    get valueAsDate() {
      const input = this.getInput();
      if (!input) {
        return null;
      }
      return input.valueAsDate;
    }
    set valueAsDate(value) {
      const input = this.getInput();
      if (!input) {
        return;
      }
      input.valueAsDate = value;
      this.value = input.value;
    }
    get hasError() {
      return this.error || this.nativeError;
    }
    /**
     * Selects all the text in the text field.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select
     */
    select() {
      this.getInputOrTextarea().select();
    }
    setRangeText(...args) {
      this.getInputOrTextarea().setRangeText(...args);
      this.value = this.getInputOrTextarea().value;
    }
    /**
     * Sets the start and end positions of a selection in the text field.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange
     *
     * @param start The offset into the text field for the start of the selection.
     * @param end The offset into the text field for the end of the selection.
     * @param direction The direction in which the selection is performed.
     */
    setSelectionRange(start, end, direction) {
      this.getInputOrTextarea().setSelectionRange(start, end, direction);
    }
    /**
     * Shows the browser picker for an input element of type "date", "time", etc.
     *
     * For a full list of supported types, see:
     * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/showPicker#browser_compatibility
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/showPicker
     */
    showPicker() {
      const input = this.getInput();
      if (!input) {
        return;
      }
      input.showPicker();
    }
    /**
     * Decrements the value of a numeric type text field by `step` or `n` `step`
     * number of times.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepDown
     *
     * @param stepDecrement The number of steps to decrement, defaults to 1.
     */
    stepDown(stepDecrement) {
      const input = this.getInput();
      if (!input) {
        return;
      }
      input.stepDown(stepDecrement);
      this.value = input.value;
    }
    /**
     * Increments the value of a numeric type text field by `step` or `n` `step`
     * number of times.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepUp
     *
     * @param stepIncrement The number of steps to increment, defaults to 1.
     */
    stepUp(stepIncrement) {
      const input = this.getInput();
      if (!input) {
        return;
      }
      input.stepUp(stepIncrement);
      this.value = input.value;
    }
    /**
     * Reset the text field to its default value.
     */
    reset() {
      this.dirty = false;
      this.value = this.getAttribute("value") ?? "";
      this.nativeError = false;
      this.nativeErrorText = "";
    }
    attributeChangedCallback(attribute, newValue, oldValue) {
      if (attribute === "value" && this.dirty) {
        return;
      }
      super.attributeChangedCallback(attribute, newValue, oldValue);
    }
    render() {
      const classes = {
        "disabled": this.disabled,
        "error": !this.disabled && this.hasError,
        "textarea": this.type === "textarea",
        "no-spinner": this.noSpinner
      };
      return x`
      <span class="text-field ${e7(classes)}">
        ${this.renderField()}
      </span>
    `;
    }
    updated(changedProperties) {
      const value = this.getInputOrTextarea().value;
      if (this.value !== value) {
        this.value = value;
      }
    }
    renderField() {
      return u3`<${this.fieldTag}
      class="field"
      count=${this.value.length}
      ?disabled=${this.disabled}
      ?error=${this.hasError}
      error-text=${this.getErrorText()}
      ?focused=${this.focused}
      ?has-end=${this.hasTrailingIcon}
      ?has-start=${this.hasLeadingIcon}
      label=${this.label}
      ?no-asterisk=${this.noAsterisk}
      max=${this.maxLength}
      ?populated=${!!this.value}
      ?required=${this.required}
      ?resizable=${this.type === "textarea"}
      supporting-text=${this.supportingText}
    >
      ${this.renderLeadingIcon()}
      ${this.renderInputOrTextarea()}
      ${this.renderTrailingIcon()}
      <div id="description" slot="aria-describedby"></div>
      <slot name="container" slot="container"></slot>
    </${this.fieldTag}>`;
    }
    renderLeadingIcon() {
      return x`
      <span class="icon leading" slot="start">
        <slot name="leading-icon" @slotchange=${this.handleIconChange}></slot>
      </span>
    `;
    }
    renderTrailingIcon() {
      return x`
      <span class="icon trailing" slot="end">
        <slot name="trailing-icon" @slotchange=${this.handleIconChange}></slot>
      </span>
    `;
    }
    renderInputOrTextarea() {
      const style = { "direction": this.textDirection };
      const ariaLabel = this.ariaLabel || this.label || E;
      const autocomplete = this.autocomplete;
      const hasMaxLength = (this.maxLength ?? -1) > -1;
      const hasMinLength = (this.minLength ?? -1) > -1;
      if (this.type === "textarea") {
        return x`
        <textarea
          class="input"
          style=${o9(style)}
          aria-describedby="description"
          aria-invalid=${this.hasError}
          aria-label=${ariaLabel}
          autocomplete=${autocomplete || E}
          name=${this.name || E}
          ?disabled=${this.disabled}
          maxlength=${hasMaxLength ? this.maxLength : E}
          minlength=${hasMinLength ? this.minLength : E}
          placeholder=${this.placeholder || E}
          ?readonly=${this.readOnly}
          ?required=${this.required}
          rows=${this.rows}
          cols=${this.cols}
          .value=${l4(this.value)}
          @change=${this.redispatchEvent}
          @focus=${this.handleFocusChange}
          @blur=${this.handleFocusChange}
          @input=${this.handleInput}
          @select=${this.redispatchEvent}></textarea>
      `;
      }
      const prefix = this.renderPrefix();
      const suffix = this.renderSuffix();
      const inputMode = this.inputMode;
      return x`
      <div class="input-wrapper">
        ${prefix}
        <input
          class="input"
          style=${o9(style)}
          aria-describedby="description"
          aria-invalid=${this.hasError}
          aria-label=${ariaLabel}
          autocomplete=${autocomplete || E}
          name=${this.name || E}
          ?disabled=${this.disabled}
          inputmode=${inputMode || E}
          max=${this.max || E}
          maxlength=${hasMaxLength ? this.maxLength : E}
          min=${this.min || E}
          minlength=${hasMinLength ? this.minLength : E}
          pattern=${this.pattern || E}
          placeholder=${this.placeholder || E}
          ?readonly=${this.readOnly}
          ?required=${this.required}
          ?multiple=${this.multiple}
          step=${this.step || E}
          type=${this.type}
          .value=${l4(this.value)}
          @change=${this.redispatchEvent}
          @focus=${this.handleFocusChange}
          @blur=${this.handleFocusChange}
          @input=${this.handleInput}
          @select=${this.redispatchEvent} />
        ${suffix}
      </div>
    `;
    }
    renderPrefix() {
      return this.renderAffix(
        this.prefixText,
        /* isSuffix */
        false
      );
    }
    renderSuffix() {
      return this.renderAffix(
        this.suffixText,
        /* isSuffix */
        true
      );
    }
    renderAffix(text, isSuffix) {
      if (!text) {
        return E;
      }
      const classes = {
        "suffix": isSuffix,
        "prefix": !isSuffix
      };
      return x`<span class="${e7(classes)}">${text}</span>`;
    }
    getErrorText() {
      return this.error ? this.errorText : this.nativeErrorText;
    }
    handleFocusChange() {
      this.focused = this.inputOrTextarea?.matches(":focus") ?? false;
    }
    handleInput(event) {
      this.dirty = true;
      this.value = event.target.value;
    }
    redispatchEvent(event) {
      redispatchEvent(this, event);
    }
    getInputOrTextarea() {
      if (!this.inputOrTextarea) {
        this.connectedCallback();
        this.scheduleUpdate();
      }
      if (this.isUpdatePending) {
        this.scheduleUpdate();
      }
      return this.inputOrTextarea;
    }
    getInput() {
      if (this.type === "textarea") {
        return null;
      }
      return this.getInputOrTextarea();
    }
    handleIconChange() {
      this.hasLeadingIcon = this.leadingIcons.length > 0;
      this.hasTrailingIcon = this.trailingIcons.length > 0;
    }
    [getFormValue]() {
      return this.value;
    }
    formResetCallback() {
      this.reset();
    }
    formStateRestoreCallback(state) {
      this.value = state;
    }
    focus() {
      this.getInputOrTextarea().focus();
    }
    [createValidator]() {
      return new TextFieldValidator(() => ({
        state: this,
        renderedControl: this.inputOrTextarea
      }));
    }
    [getValidityAnchor]() {
      return this.inputOrTextarea;
    }
    [onReportValidity](invalidEvent) {
      invalidEvent?.preventDefault();
      const prevMessage = this.getErrorText();
      this.nativeError = !!invalidEvent;
      this.nativeErrorText = this.validationMessage;
      if (prevMessage === this.getErrorText()) {
        this.field?.reannounceError();
      }
    }
  };
  TextField.shadowRootOptions = {
    ...i4.shadowRootOptions,
    delegatesFocus: true
  };
  __decorate([
    n3({ type: Boolean, reflect: true })
  ], TextField.prototype, "error", void 0);
  __decorate([
    n3({ attribute: "error-text" })
  ], TextField.prototype, "errorText", void 0);
  __decorate([
    n3()
  ], TextField.prototype, "label", void 0);
  __decorate([
    n3({ type: Boolean, attribute: "no-asterisk" })
  ], TextField.prototype, "noAsterisk", void 0);
  __decorate([
    n3({ type: Boolean, reflect: true })
  ], TextField.prototype, "required", void 0);
  __decorate([
    n3()
  ], TextField.prototype, "value", void 0);
  __decorate([
    n3({ attribute: "prefix-text" })
  ], TextField.prototype, "prefixText", void 0);
  __decorate([
    n3({ attribute: "suffix-text" })
  ], TextField.prototype, "suffixText", void 0);
  __decorate([
    n3({ type: Boolean, attribute: "has-leading-icon" })
  ], TextField.prototype, "hasLeadingIcon", void 0);
  __decorate([
    n3({ type: Boolean, attribute: "has-trailing-icon" })
  ], TextField.prototype, "hasTrailingIcon", void 0);
  __decorate([
    n3({ attribute: "supporting-text" })
  ], TextField.prototype, "supportingText", void 0);
  __decorate([
    n3({ attribute: "text-direction" })
  ], TextField.prototype, "textDirection", void 0);
  __decorate([
    n3({ type: Number })
  ], TextField.prototype, "rows", void 0);
  __decorate([
    n3({ type: Number })
  ], TextField.prototype, "cols", void 0);
  __decorate([
    n3({ reflect: true })
  ], TextField.prototype, "inputMode", void 0);
  __decorate([
    n3()
  ], TextField.prototype, "max", void 0);
  __decorate([
    n3({ type: Number })
  ], TextField.prototype, "maxLength", void 0);
  __decorate([
    n3()
  ], TextField.prototype, "min", void 0);
  __decorate([
    n3({ type: Number })
  ], TextField.prototype, "minLength", void 0);
  __decorate([
    n3({ type: Boolean, attribute: "no-spinner" })
  ], TextField.prototype, "noSpinner", void 0);
  __decorate([
    n3()
  ], TextField.prototype, "pattern", void 0);
  __decorate([
    n3({ reflect: true, converter: stringConverter })
  ], TextField.prototype, "placeholder", void 0);
  __decorate([
    n3({ type: Boolean, reflect: true })
  ], TextField.prototype, "readOnly", void 0);
  __decorate([
    n3({ type: Boolean, reflect: true })
  ], TextField.prototype, "multiple", void 0);
  __decorate([
    n3()
  ], TextField.prototype, "step", void 0);
  __decorate([
    n3({ reflect: true })
  ], TextField.prototype, "type", void 0);
  __decorate([
    n3({ reflect: true })
  ], TextField.prototype, "autocomplete", void 0);
  __decorate([
    r4()
  ], TextField.prototype, "dirty", void 0);
  __decorate([
    r4()
  ], TextField.prototype, "focused", void 0);
  __decorate([
    r4()
  ], TextField.prototype, "nativeError", void 0);
  __decorate([
    r4()
  ], TextField.prototype, "nativeErrorText", void 0);
  __decorate([
    e4(".input")
  ], TextField.prototype, "inputOrTextarea", void 0);
  __decorate([
    e4(".field")
  ], TextField.prototype, "field", void 0);
  __decorate([
    o4({ slot: "leading-icon" })
  ], TextField.prototype, "leadingIcons", void 0);
  __decorate([
    o4({ slot: "trailing-icon" })
  ], TextField.prototype, "trailingIcons", void 0);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/textfield/internal/outlined-text-field.js
  var OutlinedTextField = class extends TextField {
    constructor() {
      super(...arguments);
      this.fieldTag = i6`md-outlined-field`;
    }
  };

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/textfield/internal/shared-styles.js
  var styles12 = i`:host{display:inline-flex;outline:none;resize:both;text-align:start;-webkit-tap-highlight-color:rgba(0,0,0,0)}.text-field,.field{width:100%}.text-field{display:inline-flex}.field{cursor:text}.disabled .field{cursor:default}.text-field,.textarea .field{resize:inherit}slot[name=container]{border-radius:inherit}.icon{color:currentColor;display:flex;align-items:center;justify-content:center;fill:currentColor;position:relative}.icon ::slotted(*){display:flex;position:absolute}[has-start] .icon.leading{font-size:var(--_leading-icon-size);height:var(--_leading-icon-size);width:var(--_leading-icon-size)}[has-end] .icon.trailing{font-size:var(--_trailing-icon-size);height:var(--_trailing-icon-size);width:var(--_trailing-icon-size)}.input-wrapper{display:flex}.input-wrapper>*{all:inherit;padding:0}.input{caret-color:var(--_caret-color);overflow-x:hidden;text-align:inherit}.input::placeholder{color:currentColor;opacity:1}.input::-webkit-calendar-picker-indicator{display:none}.input::-webkit-search-decoration,.input::-webkit-search-cancel-button{display:none}@media(forced-colors: active){.input{background:none}}.no-spinner .input::-webkit-inner-spin-button,.no-spinner .input::-webkit-outer-spin-button{display:none}.no-spinner .input[type=number]{-moz-appearance:textfield}:focus-within .input{caret-color:var(--_focus-caret-color)}.error:focus-within .input{caret-color:var(--_error-focus-caret-color)}.text-field:not(.disabled) .prefix{color:var(--_input-text-prefix-color)}.text-field:not(.disabled) .suffix{color:var(--_input-text-suffix-color)}.text-field:not(.disabled) .input::placeholder{color:var(--_input-text-placeholder-color)}.prefix,.suffix{text-wrap:nowrap;width:min-content}.prefix{padding-inline-end:var(--_input-text-prefix-trailing-space)}.suffix{padding-inline-start:var(--_input-text-suffix-leading-space)}
`;

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/textfield/outlined-text-field.js
  var MdOutlinedTextField = class MdOutlinedTextField2 extends OutlinedTextField {
    constructor() {
      super(...arguments);
      this.fieldTag = i6`md-outlined-field`;
    }
  };
  MdOutlinedTextField.styles = [styles12, styles11];
  MdOutlinedTextField = __decorate([
    t("md-outlined-text-field")
  ], MdOutlinedTextField);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/slider/internal/forced-colors-styles.js
  var styles13 = i`@media(forced-colors: active){:host{--md-slider-active-track-color: CanvasText;--md-slider-disabled-active-track-color: GrayText;--md-slider-disabled-active-track-opacity: 1;--md-slider-disabled-handle-color: GrayText;--md-slider-disabled-inactive-track-color: GrayText;--md-slider-disabled-inactive-track-opacity: 1;--md-slider-focus-handle-color: CanvasText;--md-slider-handle-color: CanvasText;--md-slider-handle-shadow-color: Canvas;--md-slider-hover-handle-color: CanvasText;--md-slider-hover-state-layer-color: Canvas;--md-slider-hover-state-layer-opacity: 1;--md-slider-inactive-track-color: Canvas;--md-slider-label-container-color: Canvas;--md-slider-label-text-color: CanvasText;--md-slider-pressed-handle-color: CanvasText;--md-slider-pressed-state-layer-color: Canvas;--md-slider-pressed-state-layer-opacity: 1;--md-slider-with-overlap-handle-outline-color: CanvasText}.label,.label::before{border:var(--_with-overlap-handle-outline-color) solid var(--_with-overlap-handle-outline-width)}:host(:not([disabled])) .track::before{border:1px solid var(--_active-track-color)}.tickmarks::before{background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='CanvasText'%3E%3Ccircle cx='2' cy='2'  r='1'/%3E%3C/svg%3E")}.tickmarks::after{background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='Canvas'%3E%3Ccircle cx='2' cy='2' r='1'/%3E%3C/svg%3E")}:host([disabled]) .tickmarks::before{background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='Canvas'%3E%3Ccircle cx='2' cy='2'  r='1'/%3E%3C/svg%3E")}}
`;

  // node_modules/.pnpm/lit-html@3.3.0/node_modules/lit-html/directives/when.js
  function n7(n8, r7, t6) {
    return n8 ? r7(n8) : t6?.(n8);
  }

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/slider/internal/slider.js
  var sliderBaseClass = mixinDelegatesAria(mixinFormAssociated(mixinElementInternals(i4)));
  var Slider = class extends sliderBaseClass {
    /**
     * The HTML name to use in form submission for a range slider's starting
     * value. Use `name` instead if both the start and end values should use the
     * same name.
     */
    get nameStart() {
      return this.getAttribute("name-start") ?? this.name;
    }
    set nameStart(name) {
      this.setAttribute("name-start", name);
    }
    /**
     * The HTML name to use in form submission for a range slider's ending value.
     * Use `name` instead if both the start and end values should use the same
     * name.
     */
    get nameEnd() {
      return this.getAttribute("name-end") ?? this.nameStart;
    }
    set nameEnd(name) {
      this.setAttribute("name-end", name);
    }
    // Note: start aria-* properties are only applied when range=true, which is
    // why they do not need to handle both cases.
    get renderAriaLabelStart() {
      const { ariaLabel } = this;
      return this.ariaLabelStart || ariaLabel && `${ariaLabel} start` || this.valueLabelStart || String(this.valueStart);
    }
    get renderAriaValueTextStart() {
      return this.ariaValueTextStart || this.valueLabelStart || String(this.valueStart);
    }
    // Note: end aria-* properties are applied for single and range sliders, which
    // is why it needs to handle `this.range` (while start aria-* properties do
    // not).
    get renderAriaLabelEnd() {
      const { ariaLabel } = this;
      if (this.range) {
        return this.ariaLabelEnd || ariaLabel && `${ariaLabel} end` || this.valueLabelEnd || String(this.valueEnd);
      }
      return ariaLabel || this.valueLabel || String(this.value);
    }
    get renderAriaValueTextEnd() {
      if (this.range) {
        return this.ariaValueTextEnd || this.valueLabelEnd || String(this.valueEnd);
      }
      const { ariaValueText } = this;
      return ariaValueText || this.valueLabel || String(this.value);
    }
    constructor() {
      super();
      this.min = 0;
      this.max = 100;
      this.valueLabel = "";
      this.valueLabelStart = "";
      this.valueLabelEnd = "";
      this.ariaLabelStart = "";
      this.ariaValueTextStart = "";
      this.ariaLabelEnd = "";
      this.ariaValueTextEnd = "";
      this.step = 1;
      this.ticks = false;
      this.labeled = false;
      this.range = false;
      this.handleStartHover = false;
      this.handleEndHover = false;
      this.startOnTop = false;
      this.handlesOverlapping = false;
      this.ripplePointerId = 1;
      this.isRedispatchingEvent = false;
      if (!o7) {
        this.addEventListener("click", (event) => {
          if (!isActivationClick(event) || !this.inputEnd) {
            return;
          }
          this.focus();
          dispatchActivationClick(this.inputEnd);
        });
      }
    }
    focus() {
      this.inputEnd?.focus();
    }
    willUpdate(changed) {
      this.renderValueStart = changed.has("valueStart") ? this.valueStart : this.inputStart?.valueAsNumber;
      const endValueChanged = changed.has("valueEnd") && this.range || changed.has("value");
      this.renderValueEnd = endValueChanged ? this.range ? this.valueEnd : this.value : this.inputEnd?.valueAsNumber;
      if (changed.get("handleStartHover") !== void 0) {
        this.toggleRippleHover(this.rippleStart, this.handleStartHover);
      } else if (changed.get("handleEndHover") !== void 0) {
        this.toggleRippleHover(this.rippleEnd, this.handleEndHover);
      }
    }
    updated(changed) {
      if (this.range) {
        this.renderValueStart = this.inputStart.valueAsNumber;
      }
      this.renderValueEnd = this.inputEnd.valueAsNumber;
      if (this.range) {
        const segment = (this.max - this.min) / 3;
        if (this.valueStart === void 0) {
          this.inputStart.valueAsNumber = this.min + segment;
          const v2 = this.inputStart.valueAsNumber;
          this.valueStart = this.renderValueStart = v2;
        }
        if (this.valueEnd === void 0) {
          this.inputEnd.valueAsNumber = this.min + 2 * segment;
          const v2 = this.inputEnd.valueAsNumber;
          this.valueEnd = this.renderValueEnd = v2;
        }
      } else {
        this.value ??= this.renderValueEnd;
      }
      if (changed.has("range") || changed.has("renderValueStart") || changed.has("renderValueEnd") || this.isUpdatePending) {
        const startNub = this.handleStart?.querySelector(".handleNub");
        const endNub = this.handleEnd?.querySelector(".handleNub");
        this.handlesOverlapping = isOverlapping(startNub, endNub);
      }
      this.performUpdate();
    }
    render() {
      const step = this.step === 0 ? 1 : this.step;
      const range = Math.max(this.max - this.min, step);
      const startFraction = this.range ? ((this.renderValueStart ?? this.min) - this.min) / range : 0;
      const endFraction = ((this.renderValueEnd ?? this.min) - this.min) / range;
      const containerStyles = {
        // for clipping inputs and active track.
        "--_start-fraction": String(startFraction),
        "--_end-fraction": String(endFraction),
        // for generating tick marks
        "--_tick-count": String(range / step)
      };
      const containerClasses = { ranged: this.range };
      const labelStart = this.valueLabelStart || String(this.renderValueStart);
      const labelEnd = (this.range ? this.valueLabelEnd : this.valueLabel) || String(this.renderValueEnd);
      const inputStartProps = {
        start: true,
        value: this.renderValueStart,
        ariaLabel: this.renderAriaLabelStart,
        ariaValueText: this.renderAriaValueTextStart,
        ariaMin: this.min,
        ariaMax: this.valueEnd ?? this.max
      };
      const inputEndProps = {
        start: false,
        value: this.renderValueEnd,
        ariaLabel: this.renderAriaLabelEnd,
        ariaValueText: this.renderAriaValueTextEnd,
        ariaMin: this.range ? this.valueStart ?? this.min : this.min,
        ariaMax: this.max
      };
      const handleStartProps = {
        start: true,
        hover: this.handleStartHover,
        label: labelStart
      };
      const handleEndProps = {
        start: false,
        hover: this.handleEndHover,
        label: labelEnd
      };
      const handleContainerClasses = {
        hover: this.handleStartHover || this.handleEndHover
      };
      return x` <div
      class="container ${e7(containerClasses)}"
      style=${o9(containerStyles)}>
      ${n7(this.range, () => this.renderInput(inputStartProps))}
      ${this.renderInput(inputEndProps)} ${this.renderTrack()}
      <div class="handleContainerPadded">
        <div class="handleContainerBlock">
          <div class="handleContainer ${e7(handleContainerClasses)}">
            ${n7(this.range, () => this.renderHandle(handleStartProps))}
            ${this.renderHandle(handleEndProps)}
          </div>
        </div>
      </div>
    </div>`;
    }
    renderTrack() {
      return x`
      <div class="track"></div>
      ${this.ticks ? x`<div class="tickmarks"></div>` : E}
    `;
    }
    renderLabel(value) {
      return x`<div class="label" aria-hidden="true">
      <span class="labelContent" part="label">${value}</span>
    </div>`;
    }
    renderHandle({ start, hover, label }) {
      const onTop = !this.disabled && start === this.startOnTop;
      const isOverlapping2 = !this.disabled && this.handlesOverlapping;
      const name = start ? "start" : "end";
      return x`<div
      class="handle ${e7({
        [name]: true,
        hover,
        onTop,
        isOverlapping: isOverlapping2
      })}">
      <md-focus-ring part="focus-ring" for=${name}></md-focus-ring>
      <md-ripple
        for=${name}
        class=${name}
        ?disabled=${this.disabled}></md-ripple>
      <div class="handleNub">
        <md-elevation part="elevation"></md-elevation>
      </div>
      ${n7(this.labeled, () => this.renderLabel(label))}
    </div>`;
    }
    renderInput({ start, value, ariaLabel, ariaValueText, ariaMin, ariaMax }) {
      const name = start ? `start` : `end`;
      return x`<input
      type="range"
      class="${e7({
        start,
        end: !start
      })}"
      @focus=${this.handleFocus}
      @pointerdown=${this.handleDown}
      @pointerup=${this.handleUp}
      @pointerenter=${this.handleEnter}
      @pointermove=${this.handleMove}
      @pointerleave=${this.handleLeave}
      @keydown=${this.handleKeydown}
      @keyup=${this.handleKeyup}
      @input=${this.handleInput}
      @change=${this.handleChange}
      id=${name}
      .disabled=${this.disabled}
      .min=${String(this.min)}
      aria-valuemin=${ariaMin}
      .max=${String(this.max)}
      aria-valuemax=${ariaMax}
      .step=${String(this.step)}
      .value=${String(value)}
      .tabIndex=${start ? 1 : 0}
      aria-label=${ariaLabel || E}
      aria-valuetext=${ariaValueText} />`;
    }
    async toggleRippleHover(ripple, hovering) {
      const rippleEl = await ripple;
      if (!rippleEl) {
        return;
      }
      if (hovering) {
        rippleEl.handlePointerenter(new PointerEvent("pointerenter", {
          isPrimary: true,
          pointerId: this.ripplePointerId
        }));
      } else {
        rippleEl.handlePointerleave(new PointerEvent("pointerleave", {
          isPrimary: true,
          pointerId: this.ripplePointerId
        }));
      }
    }
    handleFocus(event) {
      this.updateOnTop(event.target);
    }
    startAction(event) {
      const target = event.target;
      const fixed = target === this.inputStart ? this.inputEnd : this.inputStart;
      this.action = {
        canFlip: event.type === "pointerdown",
        flipped: false,
        target,
        fixed,
        values: /* @__PURE__ */ new Map([
          [target, target.valueAsNumber],
          [fixed, fixed?.valueAsNumber]
        ])
      };
    }
    finishAction(event) {
      this.action = void 0;
    }
    handleKeydown(event) {
      this.startAction(event);
    }
    handleKeyup(event) {
      this.finishAction(event);
    }
    handleDown(event) {
      this.startAction(event);
      this.ripplePointerId = event.pointerId;
      const isStart = event.target === this.inputStart;
      this.handleStartHover = !this.disabled && isStart && Boolean(this.handleStart);
      this.handleEndHover = !this.disabled && !isStart && Boolean(this.handleEnd);
    }
    async handleUp(event) {
      if (!this.action) {
        return;
      }
      const { target, values, flipped } = this.action;
      await new Promise(requestAnimationFrame);
      if (target !== void 0) {
        target.focus();
        if (flipped && target.valueAsNumber !== values.get(target)) {
          target.dispatchEvent(new Event("change", { bubbles: true }));
        }
      }
      this.finishAction(event);
    }
    /**
     * The move handler tracks handle hovering to facilitate proper ripple
     * behavior on the slider handle. This is needed because user interaction with
     * the native input is leveraged to position the handle. Because the separate
     * displayed handle element has pointer events disabled (to allow interaction
     * with the input) and the input's handle is a pseudo-element, neither can be
     * the ripple's interactive element. Therefore the input is the ripple's
     * interactive element and has a `ripple` directive; however the ripple
     * is gated on the handle being hovered. In addition, because the ripple
     * hover state is being specially handled, it must be triggered independent
     * of the directive. This is done based on the hover state when the
     * slider is updated.
     */
    handleMove(event) {
      this.handleStartHover = !this.disabled && inBounds(event, this.handleStart);
      this.handleEndHover = !this.disabled && inBounds(event, this.handleEnd);
    }
    handleEnter(event) {
      this.handleMove(event);
    }
    handleLeave() {
      this.handleStartHover = false;
      this.handleEndHover = false;
    }
    updateOnTop(input) {
      this.startOnTop = input.classList.contains("start");
    }
    needsClamping() {
      if (!this.action) {
        return false;
      }
      const { target, fixed } = this.action;
      const isStart = target === this.inputStart;
      return isStart ? target.valueAsNumber > fixed.valueAsNumber : target.valueAsNumber < fixed.valueAsNumber;
    }
    // if start/end start coincident and the first drag input would e.g. move
    // start > end, avoid clamping and "flip" to use the other input
    // as the action target.
    isActionFlipped() {
      const { action } = this;
      if (!action) {
        return false;
      }
      const { target, fixed, values } = action;
      if (action.canFlip) {
        const coincident = values.get(target) === values.get(fixed);
        if (coincident && this.needsClamping()) {
          action.canFlip = false;
          action.flipped = true;
          action.target = fixed;
          action.fixed = target;
        }
      }
      return action.flipped;
    }
    // when flipped, apply the drag input to the flipped target and reset
    // the actual target.
    flipAction() {
      if (!this.action) {
        return false;
      }
      const { target, fixed, values } = this.action;
      const changed = target.valueAsNumber !== fixed.valueAsNumber;
      target.valueAsNumber = fixed.valueAsNumber;
      fixed.valueAsNumber = values.get(fixed);
      return changed;
    }
    // clamp such that start does not move beyond end and visa versa.
    clampAction() {
      if (!this.needsClamping() || !this.action) {
        return false;
      }
      const { target, fixed } = this.action;
      target.valueAsNumber = fixed.valueAsNumber;
      return true;
    }
    handleInput(event) {
      if (this.isRedispatchingEvent) {
        return;
      }
      let stopPropagation = false;
      let redispatch = false;
      if (this.range) {
        if (this.isActionFlipped()) {
          stopPropagation = true;
          redispatch = this.flipAction();
        }
        if (this.clampAction()) {
          stopPropagation = true;
          redispatch = false;
        }
      }
      const target = event.target;
      this.updateOnTop(target);
      if (this.range) {
        this.valueStart = this.inputStart.valueAsNumber;
        this.valueEnd = this.inputEnd.valueAsNumber;
      } else {
        this.value = this.inputEnd.valueAsNumber;
      }
      if (stopPropagation) {
        event.stopPropagation();
      }
      if (redispatch) {
        this.isRedispatchingEvent = true;
        redispatchEvent(target, event);
        this.isRedispatchingEvent = false;
      }
    }
    handleChange(event) {
      const changeTarget = event.target;
      const { target, values } = this.action ?? {};
      const squelch = target && target.valueAsNumber === values.get(changeTarget);
      if (!squelch) {
        redispatchEvent(this, event);
      }
      this.finishAction(event);
    }
    [getFormValue]() {
      if (this.range) {
        const data = new FormData();
        data.append(this.nameStart, String(this.valueStart));
        data.append(this.nameEnd, String(this.valueEnd));
        return data;
      }
      return String(this.value);
    }
    formResetCallback() {
      if (this.range) {
        const valueStart = this.getAttribute("value-start");
        this.valueStart = valueStart !== null ? Number(valueStart) : void 0;
        const valueEnd = this.getAttribute("value-end");
        this.valueEnd = valueEnd !== null ? Number(valueEnd) : void 0;
        return;
      }
      const value = this.getAttribute("value");
      this.value = value !== null ? Number(value) : void 0;
    }
    formStateRestoreCallback(state) {
      if (Array.isArray(state)) {
        const [[, valueStart], [, valueEnd]] = state;
        this.valueStart = Number(valueStart);
        this.valueEnd = Number(valueEnd);
        this.range = true;
        return;
      }
      this.value = Number(state);
      this.range = false;
    }
  };
  Slider.shadowRootOptions = {
    ...i4.shadowRootOptions,
    delegatesFocus: true
  };
  __decorate([
    n3({ type: Number })
  ], Slider.prototype, "min", void 0);
  __decorate([
    n3({ type: Number })
  ], Slider.prototype, "max", void 0);
  __decorate([
    n3({ type: Number })
  ], Slider.prototype, "value", void 0);
  __decorate([
    n3({ type: Number, attribute: "value-start" })
  ], Slider.prototype, "valueStart", void 0);
  __decorate([
    n3({ type: Number, attribute: "value-end" })
  ], Slider.prototype, "valueEnd", void 0);
  __decorate([
    n3({ attribute: "value-label" })
  ], Slider.prototype, "valueLabel", void 0);
  __decorate([
    n3({ attribute: "value-label-start" })
  ], Slider.prototype, "valueLabelStart", void 0);
  __decorate([
    n3({ attribute: "value-label-end" })
  ], Slider.prototype, "valueLabelEnd", void 0);
  __decorate([
    n3({ attribute: "aria-label-start" })
  ], Slider.prototype, "ariaLabelStart", void 0);
  __decorate([
    n3({ attribute: "aria-valuetext-start" })
  ], Slider.prototype, "ariaValueTextStart", void 0);
  __decorate([
    n3({ attribute: "aria-label-end" })
  ], Slider.prototype, "ariaLabelEnd", void 0);
  __decorate([
    n3({ attribute: "aria-valuetext-end" })
  ], Slider.prototype, "ariaValueTextEnd", void 0);
  __decorate([
    n3({ type: Number })
  ], Slider.prototype, "step", void 0);
  __decorate([
    n3({ type: Boolean })
  ], Slider.prototype, "ticks", void 0);
  __decorate([
    n3({ type: Boolean })
  ], Slider.prototype, "labeled", void 0);
  __decorate([
    n3({ type: Boolean })
  ], Slider.prototype, "range", void 0);
  __decorate([
    e4("input.start")
  ], Slider.prototype, "inputStart", void 0);
  __decorate([
    e4(".handle.start")
  ], Slider.prototype, "handleStart", void 0);
  __decorate([
    r5("md-ripple.start")
  ], Slider.prototype, "rippleStart", void 0);
  __decorate([
    e4("input.end")
  ], Slider.prototype, "inputEnd", void 0);
  __decorate([
    e4(".handle.end")
  ], Slider.prototype, "handleEnd", void 0);
  __decorate([
    r5("md-ripple.end")
  ], Slider.prototype, "rippleEnd", void 0);
  __decorate([
    r4()
  ], Slider.prototype, "handleStartHover", void 0);
  __decorate([
    r4()
  ], Slider.prototype, "handleEndHover", void 0);
  __decorate([
    r4()
  ], Slider.prototype, "startOnTop", void 0);
  __decorate([
    r4()
  ], Slider.prototype, "handlesOverlapping", void 0);
  __decorate([
    r4()
  ], Slider.prototype, "renderValueStart", void 0);
  __decorate([
    r4()
  ], Slider.prototype, "renderValueEnd", void 0);
  function inBounds({ x: x2, y: y3 }, element) {
    if (!element) {
      return false;
    }
    const { top, left, bottom, right } = element.getBoundingClientRect();
    return x2 >= left && x2 <= right && y3 >= top && y3 <= bottom;
  }
  function isOverlapping(elA, elB) {
    if (!(elA && elB)) {
      return false;
    }
    const a4 = elA.getBoundingClientRect();
    const b3 = elB.getBoundingClientRect();
    return !(a4.top > b3.bottom || a4.right < b3.left || a4.bottom < b3.top || a4.left > b3.right);
  }

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/slider/internal/slider-styles.js
  var styles14 = i`:host{--_active-track-color: var(--md-slider-active-track-color, var(--md-sys-color-primary, #6750a4));--_active-track-height: var(--md-slider-active-track-height, 4px);--_active-track-shape: var(--md-slider-active-track-shape, var(--md-sys-shape-corner-full, 9999px));--_disabled-active-track-color: var(--md-slider-disabled-active-track-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-active-track-opacity: var(--md-slider-disabled-active-track-opacity, 0.38);--_disabled-handle-color: var(--md-slider-disabled-handle-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-handle-elevation: var(--md-slider-disabled-handle-elevation, 0);--_disabled-inactive-track-color: var(--md-slider-disabled-inactive-track-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-inactive-track-opacity: var(--md-slider-disabled-inactive-track-opacity, 0.12);--_focus-handle-color: var(--md-slider-focus-handle-color, var(--md-sys-color-primary, #6750a4));--_handle-color: var(--md-slider-handle-color, var(--md-sys-color-primary, #6750a4));--_handle-elevation: var(--md-slider-handle-elevation, 1);--_handle-height: var(--md-slider-handle-height, 20px);--_handle-shadow-color: var(--md-slider-handle-shadow-color, var(--md-sys-color-shadow, #000));--_handle-shape: var(--md-slider-handle-shape, var(--md-sys-shape-corner-full, 9999px));--_handle-width: var(--md-slider-handle-width, 20px);--_hover-handle-color: var(--md-slider-hover-handle-color, var(--md-sys-color-primary, #6750a4));--_hover-state-layer-color: var(--md-slider-hover-state-layer-color, var(--md-sys-color-primary, #6750a4));--_hover-state-layer-opacity: var(--md-slider-hover-state-layer-opacity, 0.08);--_inactive-track-color: var(--md-slider-inactive-track-color, var(--md-sys-color-surface-container-highest, #e6e0e9));--_inactive-track-height: var(--md-slider-inactive-track-height, 4px);--_inactive-track-shape: var(--md-slider-inactive-track-shape, var(--md-sys-shape-corner-full, 9999px));--_label-container-color: var(--md-slider-label-container-color, var(--md-sys-color-primary, #6750a4));--_label-container-height: var(--md-slider-label-container-height, 28px);--_pressed-handle-color: var(--md-slider-pressed-handle-color, var(--md-sys-color-primary, #6750a4));--_pressed-state-layer-color: var(--md-slider-pressed-state-layer-color, var(--md-sys-color-primary, #6750a4));--_pressed-state-layer-opacity: var(--md-slider-pressed-state-layer-opacity, 0.12);--_state-layer-size: var(--md-slider-state-layer-size, 40px);--_with-overlap-handle-outline-color: var(--md-slider-with-overlap-handle-outline-color, var(--md-sys-color-on-primary, #fff));--_with-overlap-handle-outline-width: var(--md-slider-with-overlap-handle-outline-width, 1px);--_with-tick-marks-active-container-color: var(--md-slider-with-tick-marks-active-container-color, var(--md-sys-color-on-primary, #fff));--_with-tick-marks-container-size: var(--md-slider-with-tick-marks-container-size, 2px);--_with-tick-marks-disabled-container-color: var(--md-slider-with-tick-marks-disabled-container-color, var(--md-sys-color-on-surface, #1d1b20));--_with-tick-marks-inactive-container-color: var(--md-slider-with-tick-marks-inactive-container-color, var(--md-sys-color-on-surface-variant, #49454f));--_label-text-color: var(--md-slider-label-text-color, var(--md-sys-color-on-primary, #fff));--_label-text-font: var(--md-slider-label-text-font, var(--md-sys-typescale-label-medium-font, var(--md-ref-typeface-plain, Roboto)));--_label-text-line-height: var(--md-slider-label-text-line-height, var(--md-sys-typescale-label-medium-line-height, 1rem));--_label-text-size: var(--md-slider-label-text-size, var(--md-sys-typescale-label-medium-size, 0.75rem));--_label-text-weight: var(--md-slider-label-text-weight, var(--md-sys-typescale-label-medium-weight, var(--md-ref-typeface-weight-medium, 500)));--_start-fraction: 0;--_end-fraction: 0;--_tick-count: 0;display:inline-flex;vertical-align:middle;min-inline-size:200px;--md-elevation-level: var(--_handle-elevation);--md-elevation-shadow-color: var(--_handle-shadow-color)}md-focus-ring{height:48px;inset:unset;width:48px}md-elevation{transition-duration:250ms}@media(prefers-reduced-motion){.label{transition-duration:0}}:host([disabled]){opacity:var(--_disabled-active-track-opacity);--md-elevation-level: var(--_disabled-handle-elevation)}.container{flex:1;display:flex;align-items:center;position:relative;block-size:var(--_state-layer-size);pointer-events:none;touch-action:none}.track,.tickmarks{position:absolute;inset:0;display:flex;align-items:center}.track::before,.tickmarks::before,.track::after,.tickmarks::after{position:absolute;content:"";inset-inline-start:calc(var(--_state-layer-size)/2 - var(--_with-tick-marks-container-size));inset-inline-end:calc(var(--_state-layer-size)/2 - var(--_with-tick-marks-container-size));background-size:calc((100% - var(--_with-tick-marks-container-size)*2)/var(--_tick-count)) 100%}.track::before,.tickmarks::before{block-size:var(--_inactive-track-height);border-radius:var(--_inactive-track-shape)}.track::before{background:var(--_inactive-track-color)}.tickmarks::before{background-image:radial-gradient(circle at var(--_with-tick-marks-container-size) center, var(--_with-tick-marks-inactive-container-color) 0, var(--_with-tick-marks-inactive-container-color) calc(var(--_with-tick-marks-container-size) / 2), transparent calc(var(--_with-tick-marks-container-size) / 2))}:host([disabled]) .track::before{opacity:calc(1/var(--_disabled-active-track-opacity)*var(--_disabled-inactive-track-opacity));background:var(--_disabled-inactive-track-color)}.track::after,.tickmarks::after{block-size:var(--_active-track-height);border-radius:var(--_active-track-shape);clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--_end-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--_end-fraction))) 0 calc(var(--_with-tick-marks-container-size) * min(var(--_start-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--_start-fraction)))}.track::after{background:var(--_active-track-color)}.tickmarks::after{background-image:radial-gradient(circle at var(--_with-tick-marks-container-size) center, var(--_with-tick-marks-active-container-color) 0, var(--_with-tick-marks-active-container-color) calc(var(--_with-tick-marks-container-size) / 2), transparent calc(var(--_with-tick-marks-container-size) / 2))}.track:dir(rtl)::after{clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min(var(--_start-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--_start-fraction)) 0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--_end-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--_end-fraction))))}.tickmarks:dir(rtl)::after{clip-path:inset(0 calc(var(--_with-tick-marks-container-size) * min(var(--_start-fraction) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * var(--_start-fraction)) 0 calc(var(--_with-tick-marks-container-size) * min((1 - var(--_end-fraction)) * 1000000000, 1) + (100% - var(--_with-tick-marks-container-size) * 2) * (1 - var(--_end-fraction))))}:host([disabled]) .track::after{background:var(--_disabled-active-track-color)}:host([disabled]) .tickmarks::before{background-image:radial-gradient(circle at var(--_with-tick-marks-container-size) center, var(--_with-tick-marks-disabled-container-color) 0, var(--_with-tick-marks-disabled-container-color) calc(var(--_with-tick-marks-container-size) / 2), transparent calc(var(--_with-tick-marks-container-size) / 2))}.handleContainerPadded{position:relative;block-size:100%;inline-size:100%;padding-inline:calc(var(--_state-layer-size)/2)}.handleContainerBlock{position:relative;block-size:100%;inline-size:100%}.handleContainer{position:absolute;inset-block-start:0;inset-block-end:0;inset-inline-start:calc(100%*var(--_start-fraction));inline-size:calc(100%*(var(--_end-fraction) - var(--_start-fraction)))}.handle{position:absolute;block-size:var(--_state-layer-size);inline-size:var(--_state-layer-size);border-radius:var(--_handle-shape);display:flex;place-content:center;place-items:center}.handleNub{position:absolute;height:var(--_handle-height);width:var(--_handle-width);border-radius:var(--_handle-shape);background:var(--_handle-color)}:host([disabled]) .handleNub{background:var(--_disabled-handle-color)}input.end:focus~.handleContainerPadded .handle.end>.handleNub,input.start:focus~.handleContainerPadded .handle.start>.handleNub{background:var(--_focus-handle-color)}.container>.handleContainerPadded .handle.hover>.handleNub{background:var(--_hover-handle-color)}:host(:not([disabled])) input.end:active~.handleContainerPadded .handle.end>.handleNub,:host(:not([disabled])) input.start:active~.handleContainerPadded .handle.start>.handleNub{background:var(--_pressed-handle-color)}.onTop.isOverlapping .label,.onTop.isOverlapping .label::before{outline:var(--_with-overlap-handle-outline-color) solid var(--_with-overlap-handle-outline-width)}.onTop.isOverlapping .handleNub{border:var(--_with-overlap-handle-outline-color) solid var(--_with-overlap-handle-outline-width)}.handle.start{inset-inline-start:calc(0px - var(--_state-layer-size)/2)}.handle.end{inset-inline-end:calc(0px - var(--_state-layer-size)/2)}.label{position:absolute;box-sizing:border-box;display:flex;padding:4px;place-content:center;place-items:center;border-radius:var(--md-sys-shape-corner-full, 9999px);color:var(--_label-text-color);font-family:var(--_label-text-font);font-size:var(--_label-text-size);line-height:var(--_label-text-line-height);font-weight:var(--_label-text-weight);inset-block-end:100%;min-inline-size:var(--_label-container-height);min-block-size:var(--_label-container-height);background:var(--_label-container-color);transition:transform 100ms cubic-bezier(0.2, 0, 0, 1);transform-origin:center bottom;transform:scale(0)}:host(:focus-within) .label,.handleContainer.hover .label,:where(:has(input:active)) .label{transform:scale(1)}.label::before,.label::after{position:absolute;display:block;content:"";background:inherit}.label::before{inline-size:calc(var(--_label-container-height)/2);block-size:calc(var(--_label-container-height)/2);bottom:calc(var(--_label-container-height)/-10);transform:rotate(45deg)}.label::after{inset:0px;border-radius:inherit}.labelContent{z-index:1}input[type=range]{opacity:0;-webkit-tap-highlight-color:rgba(0,0,0,0);position:absolute;box-sizing:border-box;height:100%;width:100%;margin:0;background:rgba(0,0,0,0);cursor:pointer;pointer-events:auto;appearance:none}input[type=range]:focus{outline:none}::-webkit-slider-runnable-track{-webkit-appearance:none}::-moz-range-track{appearance:none}::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;block-size:var(--_handle-height);inline-size:var(--_handle-width);opacity:0;z-index:2}input.end::-webkit-slider-thumb{--_track-and-knob-padding: calc( (var(--_state-layer-size) - var(--_handle-width)) / 2 );--_x-translate: calc( var(--_track-and-knob-padding) - 2 * var(--_end-fraction) * var(--_track-and-knob-padding) );transform:translateX(var(--_x-translate))}input.end:dir(rtl)::-webkit-slider-thumb{transform:translateX(calc(-1 * var(--_x-translate)))}input.start::-webkit-slider-thumb{--_track-and-knob-padding: calc( (var(--_state-layer-size) - var(--_handle-width)) / 2 );--_x-translate: calc( var(--_track-and-knob-padding) - 2 * var(--_start-fraction) * var(--_track-and-knob-padding) );transform:translateX(var(--_x-translate))}input.start:dir(rtl)::-webkit-slider-thumb{transform:translateX(calc(-1 * var(--_x-translate)))}::-moz-range-thumb{appearance:none;block-size:var(--_state-layer-size);inline-size:var(--_state-layer-size);transform:scaleX(0);opacity:0;z-index:2}.ranged input.start{clip-path:inset(0 calc(100% - (var(--_state-layer-size) / 2 + (100% - var(--_state-layer-size)) * (var(--_start-fraction) + (var(--_end-fraction) - var(--_start-fraction)) / 2))) 0 0)}.ranged input.start:dir(rtl){clip-path:inset(0 0 0 calc(100% - (var(--_state-layer-size) / 2 + (100% - var(--_state-layer-size)) * (var(--_start-fraction) + (var(--_end-fraction) - var(--_start-fraction)) / 2))))}.ranged input.end{clip-path:inset(0 0 0 calc(var(--_state-layer-size) / 2 + (100% - var(--_state-layer-size)) * (var(--_start-fraction) + (var(--_end-fraction) - var(--_start-fraction)) / 2)))}.ranged input.end:dir(rtl){clip-path:inset(0 calc(var(--_state-layer-size) / 2 + (100% - var(--_state-layer-size)) * (var(--_start-fraction) + (var(--_end-fraction) - var(--_start-fraction)) / 2)) 0 0)}.onTop{z-index:1}.handle{--md-ripple-hover-color: var(--_hover-state-layer-color);--md-ripple-hover-opacity: var(--_hover-state-layer-opacity);--md-ripple-pressed-color: var(--_pressed-state-layer-color);--md-ripple-pressed-opacity: var(--_pressed-state-layer-opacity)}md-ripple{border-radius:50%;height:var(--_state-layer-size);width:var(--_state-layer-size)}
`;

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/slider/slider.js
  var MdSlider = class MdSlider2 extends Slider {
  };
  MdSlider.styles = [styles14, styles13];
  MdSlider = __decorate([
    t("md-slider")
  ], MdSlider);

  // node_modules/.pnpm/@material+web@2.3.0/node_modules/@material/web/typography/md-typescale-styles.js
  var styles15 = i`@layer{.md-typescale-display-small,.md-typescale-display-small-prominent{font:var(--md-sys-typescale-display-small-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-display-small-size, 2.25rem)/var(--md-sys-typescale-display-small-line-height, 2.75rem) var(--md-sys-typescale-display-small-font, var(--md-ref-typeface-brand, Roboto))}.md-typescale-display-medium,.md-typescale-display-medium-prominent{font:var(--md-sys-typescale-display-medium-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-display-medium-size, 2.8125rem)/var(--md-sys-typescale-display-medium-line-height, 3.25rem) var(--md-sys-typescale-display-medium-font, var(--md-ref-typeface-brand, Roboto))}.md-typescale-display-large,.md-typescale-display-large-prominent{font:var(--md-sys-typescale-display-large-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-display-large-size, 3.5625rem)/var(--md-sys-typescale-display-large-line-height, 4rem) var(--md-sys-typescale-display-large-font, var(--md-ref-typeface-brand, Roboto))}.md-typescale-headline-small,.md-typescale-headline-small-prominent{font:var(--md-sys-typescale-headline-small-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-headline-small-size, 1.5rem)/var(--md-sys-typescale-headline-small-line-height, 2rem) var(--md-sys-typescale-headline-small-font, var(--md-ref-typeface-brand, Roboto))}.md-typescale-headline-medium,.md-typescale-headline-medium-prominent{font:var(--md-sys-typescale-headline-medium-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-headline-medium-size, 1.75rem)/var(--md-sys-typescale-headline-medium-line-height, 2.25rem) var(--md-sys-typescale-headline-medium-font, var(--md-ref-typeface-brand, Roboto))}.md-typescale-headline-large,.md-typescale-headline-large-prominent{font:var(--md-sys-typescale-headline-large-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-headline-large-size, 2rem)/var(--md-sys-typescale-headline-large-line-height, 2.5rem) var(--md-sys-typescale-headline-large-font, var(--md-ref-typeface-brand, Roboto))}.md-typescale-title-small,.md-typescale-title-small-prominent{font:var(--md-sys-typescale-title-small-weight, var(--md-ref-typeface-weight-medium, 500)) var(--md-sys-typescale-title-small-size, 0.875rem)/var(--md-sys-typescale-title-small-line-height, 1.25rem) var(--md-sys-typescale-title-small-font, var(--md-ref-typeface-plain, Roboto))}.md-typescale-title-medium,.md-typescale-title-medium-prominent{font:var(--md-sys-typescale-title-medium-weight, var(--md-ref-typeface-weight-medium, 500)) var(--md-sys-typescale-title-medium-size, 1rem)/var(--md-sys-typescale-title-medium-line-height, 1.5rem) var(--md-sys-typescale-title-medium-font, var(--md-ref-typeface-plain, Roboto))}.md-typescale-title-large,.md-typescale-title-large-prominent{font:var(--md-sys-typescale-title-large-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-title-large-size, 1.375rem)/var(--md-sys-typescale-title-large-line-height, 1.75rem) var(--md-sys-typescale-title-large-font, var(--md-ref-typeface-brand, Roboto))}.md-typescale-body-small,.md-typescale-body-small-prominent{font:var(--md-sys-typescale-body-small-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-body-small-size, 0.75rem)/var(--md-sys-typescale-body-small-line-height, 1rem) var(--md-sys-typescale-body-small-font, var(--md-ref-typeface-plain, Roboto))}.md-typescale-body-medium,.md-typescale-body-medium-prominent{font:var(--md-sys-typescale-body-medium-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-body-medium-size, 0.875rem)/var(--md-sys-typescale-body-medium-line-height, 1.25rem) var(--md-sys-typescale-body-medium-font, var(--md-ref-typeface-plain, Roboto))}.md-typescale-body-large,.md-typescale-body-large-prominent{font:var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)) var(--md-sys-typescale-body-large-size, 1rem)/var(--md-sys-typescale-body-large-line-height, 1.5rem) var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto))}.md-typescale-label-small,.md-typescale-label-small-prominent{font:var(--md-sys-typescale-label-small-weight, var(--md-ref-typeface-weight-medium, 500)) var(--md-sys-typescale-label-small-size, 0.6875rem)/var(--md-sys-typescale-label-small-line-height, 1rem) var(--md-sys-typescale-label-small-font, var(--md-ref-typeface-plain, Roboto))}.md-typescale-label-medium,.md-typescale-label-medium-prominent{font:var(--md-sys-typescale-label-medium-weight, var(--md-ref-typeface-weight-medium, 500)) var(--md-sys-typescale-label-medium-size, 0.75rem)/var(--md-sys-typescale-label-medium-line-height, 1rem) var(--md-sys-typescale-label-medium-font, var(--md-ref-typeface-plain, Roboto))}.md-typescale-label-medium-prominent{font-weight:var(--md-sys-typescale-label-medium-weight-prominent, var(--md-ref-typeface-weight-bold, 700))}.md-typescale-label-large,.md-typescale-label-large-prominent{font:var(--md-sys-typescale-label-large-weight, var(--md-ref-typeface-weight-medium, 500)) var(--md-sys-typescale-label-large-size, 0.875rem)/var(--md-sys-typescale-label-large-line-height, 1.25rem) var(--md-sys-typescale-label-large-font, var(--md-ref-typeface-plain, Roboto))}.md-typescale-label-large-prominent{font-weight:var(--md-sys-typescale-label-large-weight-prominent, var(--md-ref-typeface-weight-bold, 700))}}
`;

  // script.js
  document.adoptedStyleSheets.push(styles15.styleSheet);
  var background;
  var displayUnits = [];
  var currentUnitIndex = 0;
  var isPlaying = false;
  var displayTimer = null;
  var fullArticle = "";
  var wordTokenRegex = /[\u4e00-\u9fa5\u3105-\u3129\u02CA\u02C7\u02CB\u02D9]|[a-zA-Z0-9]+/g;
  var textInput;
  var playButton;
  var stopButton;
  var speedSlider;
  var statusDiv;
  var currentWordDisplay;
  var splitModeRadios;
  var fontColorPicker;
  var bgColorPicker;
  var difficultyRadios;
  var generateArticleButton;
  var aiSection;
  var questionContainer;
  var answerInput;
  var submitAnswerButton;
  var feedbackP;
  var fullArticleContainer;
  var fullArticleP;
  async function generateArticle() {
    const difficulty = document.querySelector('input[name="difficulty"]:checked').value;
    let articleLength;
    switch (difficulty) {
      case "easy":
        articleLength = 100;
        break;
      case "medium":
        articleLength = 300;
        break;
      case "hard":
        articleLength = 500;
        break;
    }
    statusDiv.textContent = "\u6B63\u5728\u751F\u6210\u6587\u7AE0...";
    generateArticleButton.disabled = true;
    aiSection.classList.add("hidden");
    questionContainer.classList.add("hidden");
    fullArticleContainer.classList.add("hidden");
    feedbackP.textContent = "";
    answerInput.value = "";
    try {
      const response = await fetch("https://6156150.xyz/speedreader/api/deepseek", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          messages: [{ role: "system", content: `\u8ACB\u751F\u6210\u4E00\u7BC7\u9577\u5EA6\u7D04\u70BA ${articleLength} \u5B57\u7684\u4E2D\u6587\u6587\u7AE0\uFF0C\u4E26\u5728\u6587\u7AE0\u6700\u5F8C\u751F\u6210\u4E00\u500B\u8207\u5167\u6587\u76F8\u95DC\u7684\u5C01\u9589\u6027\u554F\u984C\u3002` }],
          model: "deepseek-chat"
        })
      });
      if (!response.ok) {
        let errorText;
        try {
          const errorData = await response.clone().json();
          errorText = errorData.error || JSON.stringify(errorData);
        } catch (e8) {
          errorText = await response.text();
        }
        throw new Error(errorText);
      }
      const completion = await response.json();
      const responseText = completion.choices[0].message.content;
      const lastQuestionMarkIndex = responseText.lastIndexOf("\uFF1F");
      aiSection.classList.remove("hidden");
      questionContainer.classList.remove("hidden");
      if (lastQuestionMarkIndex !== -1) {
        fullArticle = responseText.substring(0, lastQuestionMarkIndex + 1);
      } else {
        fullArticle = responseText;
      }
      textInput.value = "";
      updateDisplayUnits(fullArticle);
    } catch (error) {
      console.error("Error generating article:", error);
      let displayError = error.message;
      if (displayError.trim().startsWith("<!DOCTYPE html>")) {
        displayError = "\u8207\u5F8C\u7AEF\u670D\u52D9\u7684\u9023\u7DDA\u903E\u6642\uFF0C\u8ACB\u7A0D\u5F8C\u518D\u8A66\u3002(Error 522)";
      }
      statusDiv.textContent = `\u751F\u6210\u6587\u7AE0\u5931\u6557: ${displayError}`;
    } finally {
      generateArticleButton.disabled = false;
    }
  }
  async function checkAnswer() {
    const answer = answerInput.value.trim();
    if (!answer) {
      feedbackP.textContent = "\u8ACB\u8F38\u5165\u7B54\u6848\u3002";
      return;
    }
    feedbackP.textContent = "\u6B63\u5728\u6AA2\u67E5\u7B54\u6848...";
    submitAnswerButton.disabled = true;
    try {
      const response = await fetch("https://6156150.xyz/speedreader/api/deepseek", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          messages: [
            { role: "system", content: "You are a helpful assistant." },
            { role: "user", content: `\u9019\u662F\u6587\u7AE0\uFF1A${fullArticle}` },
            { role: "user", content: `\u9019\u662F\u4F7F\u7528\u8005\u7684\u56DE\u7B54\uFF1A${answer}` },
            { role: "user", content: `\u8ACB\u5224\u65B7\u9019\u500B\u56DE\u7B54\u662F\u5426\u6B63\u78BA\uFF0C\u4E26\u7C21\u77ED\u5730\u7528\u4E2D\u6587\u56DE\u7B54\u300C\u6B63\u78BA\u300D\u6216\u300C\u4E0D\u6B63\u78BA\uFF0C\u539F\u56E0\u662F...\u300D\u3002` }
          ],
          model: "deepseek-chat"
        })
      });
      if (!response.ok) {
        let errorText;
        try {
          const errorData = await response.clone().json();
          errorText = errorData.error || JSON.stringify(errorData);
        } catch (e8) {
          errorText = await response.text();
        }
        throw new Error(errorText);
      }
      const completion = await response.json();
      feedbackP.textContent = completion.choices[0].message.content;
      fullArticleP.textContent = fullArticle;
      fullArticleContainer.classList.remove("hidden");
      textInput.value = fullArticle;
      updateDisplayUnits();
    } catch (error) {
      console.error("Error checking answer:", error);
      let displayError = error.message;
      if (displayError.trim().startsWith("<!DOCTYPE html>")) {
        displayError = "\u8207\u5F8C\u7AEF\u670D\u52D9\u7684\u9023\u7DDA\u903E\u6642\uFF0C\u8ACB\u7A0D\u5F8C\u518D\u8A66\u3002(Error 522)";
      }
      feedbackP.textContent = `\u6AA2\u67E5\u7B54\u6848\u5931\u6557: ${displayError}`;
    } finally {
      submitAnswerButton.disabled = false;
    }
  }
  function updateDisplayUnits(sourceText = null) {
    const isAiTab = document.getElementById("radio-1").checked;
    let textToProcess = "";
    if (sourceText !== null) {
      textToProcess = sourceText.trim();
    } else {
      textToProcess = isAiTab ? fullArticle.trim() : textInput.value.trim();
    }
    const currentSplitMode = document.querySelector('input[name="splitMode"]:checked').value;
    if (currentSplitMode === "word") {
      displayUnits = textToProcess.match(wordTokenRegex) || [];
    } else {
      const rawSentences = textToProcess.match(/[^。！？；\n]+[。！？；]?/g) || [];
      displayUnits = [];
      for (const initialSentence of rawSentences) {
        const trimmedInitialSentence = initialSentence.trim();
        if (trimmedInitialSentence.length === 0) {
          continue;
        }
        let currentIndexInSentence = 0;
        while (currentIndexInSentence < trimmedInitialSentence.length) {
          let nextCommaIndex = trimmedInitialSentence.indexOf("\uFF0C", currentIndexInSentence);
          if (nextCommaIndex !== -1) {
            const segment = trimmedInitialSentence.substring(currentIndexInSentence, nextCommaIndex + 1);
            if (segment.trim().length > 0) {
              displayUnits.push(segment.trim());
            }
            currentIndexInSentence = nextCommaIndex + 1;
          } else {
            const segment = trimmedInitialSentence.substring(currentIndexInSentence);
            if (segment.trim().length > 0) {
              displayUnits.push(segment.trim());
            }
            break;
          }
        }
      }
      displayUnits = displayUnits.filter((s4) => s4.length > 0);
    }
    playButton.disabled = displayUnits.length === 0;
    if (displayUnits.length > 0) {
      if (currentSplitMode === "word") {
        statusDiv.textContent = `\u5171\u627E\u5230 ${displayUnits.length} \u500B\u53EF\u986F\u793A\u5B57/\u8A5E (\u5DF2\u5FFD\u7565\u6A19\u9EDE)\u3002`;
      } else {
        statusDiv.textContent = `\u5171\u627E\u5230 ${displayUnits.length} \u500B\u986F\u793A\u6BB5\u843D\u3002`;
      }
    } else {
      if (isAiTab) {
        statusDiv.textContent = "";
      } else {
        if (currentSplitMode === "word") {
          statusDiv.textContent = "\u8ACB\u8F38\u5165\u53EF\u64AD\u653E\u7684\u6587\u5B57 (\u5B57/\u8A5E\u6A21\u5F0F)\u3002";
        } else {
          statusDiv.textContent = "\u8ACB\u8F38\u5165\u53EF\u64AD\u653E\u7684\u6587\u5B57 (\u53E5\u5B50/\u6BB5\u843D\u6A21\u5F0F)\u3002";
        }
      }
    }
    currentUnitIndex = 0;
    if (!isPlaying) {
      currentWordDisplay.textContent = "";
    }
  }
  function playNextUnit() {
    if (!isPlaying || currentUnitIndex >= displayUnits.length) {
      stopPlaying();
      if (currentUnitIndex >= displayUnits.length && displayUnits.length > 0) {
        statusDiv.textContent = "\u64AD\u653E\u5B8C\u7562\u3002";
      }
      return;
    }
    const currentToken = displayUnits[currentUnitIndex];
    currentWordDisplay.textContent = currentToken;
    const baseFontSizeVW = 7;
    if (document.querySelector('input[name="splitMode"]:checked').value === "sentence") {
      let fontSize = baseFontSizeVW;
      if (currentToken.length > 40) {
        fontSize = baseFontSizeVW * 0.6;
      } else if (currentToken.length > 20) {
        fontSize = baseFontSizeVW * 0.8;
      }
      currentWordDisplay.style.fontSize = `${fontSize}vw`;
    } else {
      let wordFontSize = baseFontSizeVW * 1.8;
      if (window.innerWidth <= 768) {
        wordFontSize = baseFontSizeVW * 2.2;
      }
      if (window.innerWidth <= 480) {
        wordFontSize = baseFontSizeVW * 2.5;
      }
      currentWordDisplay.style.fontSize = `${wordFontSize}vw`;
    }
    const tokensPerMinute = parseInt(speedSlider.value) || 120;
    const safeTokensPerMinute = Math.max(1, tokensPerMinute);
    const delay = 60 / safeTokensPerMinute * 1e3;
    console.log(`Displaying: "${currentToken}", Speed: ${tokensPerMinute} TPM, Delay: ${delay.toFixed(2)}ms, Mode: ${document.querySelector('input[name="splitMode"]:checked').value}`);
    currentUnitIndex++;
    displayTimer = setTimeout(playNextUnit, delay);
  }
  function stopPlaying() {
    isPlaying = false;
    if (displayTimer) {
      clearTimeout(displayTimer);
      displayTimer = null;
    }
    textInput.disabled = false;
    speedSlider.disabled = false;
    for (const radio of splitModeRadios) {
      radio.disabled = false;
    }
    fontColorPicker.disabled = false;
    bgColorPicker.disabled = false;
    stopButton.disabled = true;
    playButton.disabled = displayUnits.length === 0;
    if (statusDiv.textContent === "\u64AD\u653E\u5B8C\u7562\u3002" || statusDiv.textContent === "\u6B63\u5728\u64AD\u653E...") {
      updateDisplayUnits();
    } else if (displayUnits.length > 0) {
      statusDiv.textContent = "\u64AD\u653E\u5DF2\u505C\u6B62\u3002";
    } else {
      statusDiv.textContent = "\u8ACB\u8F38\u5165\u6587\u5B57\u3002";
    }
    if (background) {
      background.colors([bgColorPicker.value, bgColorPicker.value, bgColorPicker.value, bgColorPicker.value]);
    }
  }
  function initializeApp() {
    textInput = document.getElementById("textInput");
    playButton = document.getElementById("playButton");
    stopButton = document.getElementById("stopButton");
    speedSlider = document.getElementById("speedSlider");
    statusDiv = document.getElementById("status");
    currentWordDisplay = document.getElementById("currentWordDisplay");
    splitModeRadios = document.getElementsByName("splitMode");
    fontColorPicker = document.getElementById("fontColorPicker");
    bgColorPicker = document.getElementById("bgColorPicker");
    difficultyRadios = document.getElementsByName("difficulty");
    generateArticleButton = document.getElementById("generateArticleButton");
    aiSection = document.getElementById("ai-section");
    questionContainer = document.getElementById("question-container");
    answerInput = document.getElementById("answerInput");
    submitAnswerButton = document.getElementById("submitAnswerButton");
    feedbackP = document.getElementById("feedback");
    fullArticleContainer = document.getElementById("full-article-container");
    fullArticleP = document.getElementById("fullArticle");
    textInput.addEventListener("input", () => {
      updateDisplayUnits();
      if (textInput.value.trim().length > 0) {
        playButton.disabled = false;
      } else {
        playButton.disabled = true;
      }
    });
    answerInput.addEventListener("input", () => {
      if (answerInput.value.trim().length > 0) {
        submitAnswerButton.disabled = false;
      } else {
        submitAnswerButton.disabled = true;
      }
    });
    for (const radio of splitModeRadios) {
      radio.addEventListener("change", () => {
        updateDisplayUnits();
        if (isPlaying) {
          stopPlaying();
          currentWordDisplay.textContent = "";
        }
      });
    }
    fontColorPicker.addEventListener("input", (event) => {
      currentWordDisplay.style.color = event.target.value;
    });
    bgColorPicker.addEventListener("input", (event) => {
      currentWordDisplay.style.backgroundColor = event.target.value;
      if (background) {
        background.colors([event.target.value, event.target.value, event.target.value, event.target.value]);
      }
    });
    playButton.addEventListener("click", () => {
      if (displayUnits.length === 0) {
        updateDisplayUnits();
        if (displayUnits.length === 0) {
          statusDiv.textContent = "\u8ACB\u5148\u8F38\u5165\u6587\u5B57\u4E26\u9078\u64C7\u6A21\u5F0F\u3002";
          return;
        }
      }
      if (isPlaying) return;
      isPlaying = true;
      playButton.disabled = true;
      stopButton.disabled = false;
      textInput.disabled = true;
      speedSlider.disabled = true;
      for (const radio of splitModeRadios) {
        radio.disabled = true;
      }
      fontColorPicker.disabled = true;
      bgColorPicker.disabled = true;
      statusDiv.textContent = "\u6B63\u5728\u64AD\u653E...";
      playNextUnit();
    });
    stopButton.addEventListener("click", () => {
      stopPlaying();
    });
    generateArticleButton.addEventListener("click", generateArticle);
    submitAnswerButton.addEventListener("click", checkAnswer);
    window.addEventListener("beforeunload", () => {
      if (isPlaying) {
        stopPlaying();
      }
    });
    currentWordDisplay.style.color = fontColorPicker.value;
    currentWordDisplay.style.backgroundColor = bgColorPicker.value;
    updateDisplayUnits();
    try {
      background = new Color4Bg.AestheticFluidBg({
        dom: "box",
        colors: ["#C3ECF7", "#D2F7F7", "#F9F9EF", "#FFE3EE", "#F5D5F7", "#C3ECF7"],
        loop: true
      });
    } catch (e8) {
      console.error("Failed to initialize background animation:", e8);
      const boxElement = document.getElementById("box");
      if (boxElement) {
        boxElement.style.display = "none";
      }
    }
    const radio1 = document.getElementById("radio-1");
    const radio2 = document.getElementById("radio-2");
    const aiGenerateTab = document.getElementById("ai-generate");
    const manualInputTab = document.getElementById("manual-input");
    function handleTabSwitch() {
      const isAiTab = radio1.checked;
      aiGenerateTab.classList.toggle("hidden", !isAiTab);
      manualInputTab.classList.toggle("hidden", isAiTab);
      aiSection.classList.toggle("hidden", !isAiTab);
      updateDisplayUnits();
    }
    radio1.addEventListener("change", handleTabSwitch);
    radio2.addEventListener("change", handleTabSwitch);
    handleTabSwitch();
    for (const radio of difficultyRadios) {
      radio.addEventListener("change", () => {
        console.log("Difficulty changed to:", document.querySelector('input[name="difficulty"]:checked').value);
      });
    }
  }
  document.addEventListener("DOMContentLoaded", initializeApp);
})();
/*! Bundled license information:

@lit/reactive-element/decorators/custom-element.js:
@lit/reactive-element/reactive-element.js:
@lit/reactive-element/decorators/property.js:
@lit/reactive-element/decorators/state.js:
@lit/reactive-element/decorators/event-options.js:
@lit/reactive-element/decorators/base.js:
@lit/reactive-element/decorators/query.js:
@lit/reactive-element/decorators/query-all.js:
@lit/reactive-element/decorators/query-async.js:
@lit/reactive-element/decorators/query-assigned-nodes.js:
lit-html/lit-html.js:
lit-element/lit-element.js:
lit-html/directive.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/css-tag.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/decorators/query-assigned-elements.js:
lit-html/directives/when.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/is-server.js:
  (**
   * @license
   * Copyright 2022 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@material/web/elevation/internal/elevation.js:
@material/web/elevation/elevation.js:
@material/web/ripple/internal/ripple.js:
@material/web/ripple/ripple.js:
@material/web/radio/internal/single-selection-controller.js:
@material/web/radio/radio.js:
@material/web/internal/controller/string-converter.js:
  (**
   * @license
   * Copyright 2022 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)

@material/web/elevation/internal/elevation-styles.js:
@material/web/focus/internal/focus-ring-styles.js:
@material/web/ripple/internal/ripple-styles.js:
@material/web/button/internal/elevated-styles.js:
@material/web/button/internal/shared-elevation-styles.js:
@material/web/button/internal/shared-styles.js:
@material/web/radio/internal/radio-styles.js:
@material/web/checkbox/internal/checkbox-styles.js:
@material/web/field/internal/outlined-styles.js:
@material/web/field/internal/shared-styles.js:
@material/web/textfield/internal/outlined-styles.js:
@material/web/textfield/internal/shared-styles.js:
@material/web/slider/internal/forced-colors-styles.js:
@material/web/slider/internal/slider-styles.js:
@material/web/typography/md-typescale-styles.js:
  (**
   * @license
   * Copyright 2024 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)

@material/web/internal/controller/attachable-controller.js:
@material/web/internal/aria/aria.js:
@material/web/internal/aria/delegate.js:
@material/web/labs/behaviors/element-internals.js:
@material/web/internal/controller/form-submitter.js:
@material/web/labs/behaviors/constraint-validation.js:
@material/web/labs/behaviors/focusable.js:
@material/web/labs/behaviors/form-associated.js:
@material/web/labs/behaviors/validators/validator.js:
@material/web/labs/behaviors/validators/radio-validator.js:
@material/web/labs/behaviors/validators/checkbox-validator.js:
@material/web/labs/behaviors/on-report-validity.js:
@material/web/labs/behaviors/validators/text-field-validator.js:
@material/web/slider/internal/slider.js:
@material/web/slider/slider.js:
  (**
   * @license
   * Copyright 2023 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)

@material/web/focus/internal/focus-ring.js:
@material/web/focus/md-focus-ring.js:
@material/web/internal/motion/animation.js:
@material/web/internal/events/form-label-activation.js:
@material/web/button/internal/elevated-button.js:
@material/web/button/elevated-button.js:
@material/web/internal/events/redispatch-event.js:
@material/web/field/internal/field.js:
@material/web/field/internal/outlined-field.js:
@material/web/field/outlined-field.js:
@material/web/textfield/internal/text-field.js:
@material/web/textfield/internal/outlined-text-field.js:
@material/web/textfield/outlined-text-field.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)

lit-html/directives/class-map.js:
lit-html/directives/style-map.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@material/web/button/internal/button.js:
@material/web/checkbox/internal/checkbox.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)

@material/web/radio/internal/radio.js:
@material/web/checkbox/checkbox.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)

lit-html/static.js:
lit-html/directive-helpers.js:
lit-html/directives/live.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
",
    "mimeType": "application/javascript; charset=utf-8"
  },
  "/speedreader/favicon.svg": {
    "content": "PD94bWwgdmVyc2lvbj0iMS4wIiA/PjxzdmcgaGVpZ2h0PSIyNCIgdmlld0JveD0iMCAwIDI0IDI0IiB3aWR0aD0iMjQiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHBhdGggZD0iTTMgNXYxNGMwIDIuMjAxIDEuNzk0IDMgMyAzaDE1di0ySDYuMDEyQzUuNTUgMTkuOTg4IDUgMTkuODA2IDUgMTlzLjU1LS45ODggMS4wMTItMUgyMVY0YzAtMS4xMDMtLjg5Ny0yLTItMkg2Yy0xLjIwNiAwLTMgLjc5OS0zIDN6Ii8+PC9zdmc+",
    "mimeType": "image/svg+xml"
  },
  "/speedreader/index.html": {
    "content": "<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>文字速讀器</title>
    <link rel="icon" href="favicon.svg" type="image/svg+xml">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="output.css">
    <style>
        md-elevated-button {
            --md-elevated-button-container-color: #e9faff;
            --md-elevated-button-label-text-color: #000000;
            --md-elevated-button-pressed-state-layer-color: #78aeff; /* 紫色 */
            --md-elevated-button-hover-label-text-color: rgb(95, 95, 95);
            --md-elevated-button-hover-state-layer-color: #c8dbff; /* 深藍 */
            --md-elevated-button-hover-state-layer-opacity: 1;
            width: 150px;
        }
        md-slider {
            /* 根據圖片調整顏色 */
            --md-slider-handle-color: #1976d2; /* 控制點: 紫色 */
            --md-slider-label-container-color: #1976d2; /* 標籤: 紫色 */
            --md-slider-active-track-color: #1976d2; /* 已啟用軌道: 深藍 */
            --md-slider-inactive-track-color: #BBDEFB; /* 未啟用軌道: 淺藍 */
            --md-slider-hover-handle-color: #BBDEFB; /* 懸停時控制點: 淺藍 */
            --md-slider-focus-handle-color: #BBDEFB; /* 聚焦時控制點: 淺藍 */
            --md-slider-pressed-handle-color: #BBDEFB; /* 按下時控制點: 淺藍 */
        }
    </style>
</head>
<body>

    <h1>文字速讀器</h1>

    <div class="main-layout">
        <div class="container" id="settings-container">
	<div class="tabs main-tabs">
		<input type="radio" id="radio-1" name="tabs" checked="">
		<label class="tab" for="radio-1">AI 生成</label>
		<input type="radio" id="radio-2" name="tabs">
		<label class="tab" for="radio-2">手動輸入</label>
		<span class="glider"></span>
	</div>

        <!-- AI Generate Tab Content -->
        <div id="ai-generate" class="tab-content ">
            <div id="ai-controls">
                <h2>AI 生成文章</h2>
                <md-elevated-button id="generateArticleButton">生成文章</md-elevated-button>
                <div class="control-group">
                    <label>難易度:</label>
                    <div class="tabs">
                        <input type="radio" id="diff-easy" name="difficulty" value="easy" checked>
                        <label class="tab" for="diff-easy">簡單</label>
                        <input type="radio" id="diff-medium" name="difficulty" value="medium">
                        <label class="tab" for="diff-medium">中等</label>
                        <input type="radio" id="diff-hard" name="difficulty" value="hard">
                        <label class="tab" for="diff-hard">困難</label>
                        <span class="glider"></span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Manual Input Tab Content -->
        <div id="manual-input" class="tab-content hidden">
            <h2>手動輸入文章</h2>
            <textarea id="textInput" placeholder="在這裡輸入您想速讀的文字..."></textarea>
        </div>

        <!-- Common Controls -->
        <div class="control-group" style="margin-top: 1rem;">
            <label>切割模式:</label>
            <div class="tabs">
                <input type="radio" id="split-word" name="splitMode" value="word" checked="">
                <label class="tab" for="split-word">一個字/詞</label>
                <input type="radio" id="split-sentence" name="splitMode" value="sentence">
                <label class="tab" for="split-sentence">一句話</label>
                <span class="glider"></span>
            </div>
        </div>
        <div class="control-group" style="margin-top: 1rem;">
            <label for="speedSlider">播放速度 (單位/分鐘):</label>
            <md-slider
                id="speedSlider"
                labeled
                step="100"
                min="100"
                max="1000"
                value="500"
                aria-label="播放速度滑塊"
                style="width: 248px; margin-left: -8px;"></md-slider>
        </div>
        <div id="status"></div>
    </div>

    <!-- Content Display Area -->
    <div class="container" id="display-container">
        <h2>正在顯示的內容:</h2>
        <div id="currentWordDisplay"></div>
        <!-- Play/Stop buttons moved here -->
        <div class="button-container">
            <md-elevated-button id="playButton" disabled>開始播放</md-elevated-button>
            <md-elevated-button id="stopButton" disabled>停止</md-elevated-button>
        </div>
        <!-- Color Pickers moved here -->
        <div class="controls-grid" style="margin-top: 1.5rem;">
            <div class="control-group">
                <label for="fontColorPicker">字體顏色:</label>
                <input type="color" id="fontColorPicker" value="#474747">
            </div>
            <div class="control-group">
                <label for="bgColorPicker">背景顏色:</label>
                <input type="color" id="bgColorPicker" value="#F5F5DC">
            </div>
        </div>
    </div>
</div>

    <!-- AI Question Section moved to the bottom -->
    <div class="container" id="ai-section">
        <div id="question-container">
            <h2>提交答案：</h2>
            <textarea id="answerInput" placeholder="請在此輸入您的答案..."></textarea>
            <md-elevated-button id="submitAnswerButton" disabled>提交答案</md-elevated-button>
            <p id="feedback"></p>
        </div>
        <div id="full-article-container" class="hidden">
            <h2>文章全文：</h2>
            <p id="fullArticle"></p>
        </div>
    </div>

    <div id="box"></div>

    <script src="AestheticFluidBg.min.js"></script>
    <script type="module" src="bundle.js"></script>
</body>
</html>
",
    "mimeType": "text/html; charset=utf-8"
  },
  "/speedreader/output.css": {
    "content": ":root {
    --bg-color: #f0f2f5;
    --container-bg: #ffffff;
    --text-color: #1d1d1f;
    --secondary-text-color: #6e6e73;
    --accent-color: #007aff;
    --accent-color-hover: #0071e3;
    --border-color: #d2d2d7;
    --input-bg: #f5f5f7;
    --shadow-color: rgba(0, 0, 0, 0.1);
}

.hidden {
    display: none !important;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 2rem;
    background-color: var(--bg-color);
    color: var(--text-color);
    min-height: 100vh;
    margin: 0;
    line-height: 1.5;
}

.main-layout {
    display: flex;
    justify-content: center;
    width: 100%;
    max-width: 1600px;
    gap: 20px;
}

#settings-container {
    width: 45%;
}

#display-container {
    width: 45%;
}

#ai-section {
    width: 90%;
    max-width: 800px;
    margin: 0 auto;
}

#question-container {
    display: flex;
    flex-direction: column;
    align-items: center;
}

#question-container h2 {
    width: 100%;
    text-align: left;
}

#feedback {
    margin-top: 1rem;
}

h1, h2 {
    color: var(--text-color);
    font-weight: 600;
}

h1 {
    font-size: 2.5rem;
    margin-bottom: 1.5rem;
}

h2 {
    font-size: 1.5rem;
    margin-top: 0;
    margin-bottom: 1rem;
}

.container {
    background-color: var(--container-bg);
    padding: 2rem;
    border-radius: 18px;
    box-shadow: 0 4px 12px var(--shadow-color);
    margin-bottom: 2rem;
    border: 1px solid var(--border-color);
}

textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 12px;
    font-size: 1rem;
    box-sizing: border-box;
    background-color: var(--input-bg);
    color: var(--text-color);
    transition: border-color 0.2s, box-shadow 0.2s;
}

textarea {
    height: 150px;
    margin-bottom: 1rem;
}

textarea:focus,
.control-group select:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 0 4px rgba(0, 122, 255, 0.3);
}


.button-container {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
    margin-top: 1rem;
    justify-content: center;
}

.controls-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
}

@media (min-width: 768px) {
    .controls-grid {
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
    }
}

.control-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
    align-items: flex-start; /* Align items to the left */
}

.control-group label {
    font-weight: 500;
    color: var(--secondary-text-color);
}

.control-group input[type="color"] {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    width: 100%;
    height: 52px;
    padding: 4px;
    cursor: pointer;
    background-color: transparent;
    border: none; /* 移除瀏覽器預設的邊框 */
    box-sizing: border-box;
}
.control-group input[type="color"]::-webkit-color-swatch {
    border-radius: 99px;
    border: 1px solid;
}
.control-group input[type="color"]::-moz-color-swatch {
    border-radius: 99px;
    border: 1px solid;
}

#status {
    margin-top: 1rem;
    font-style: italic;
    color: var(--secondary-text-color);
    width: 100%;
    text-align: center;
}

#currentWordDisplay {
    flex-grow: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 7vw;
    font-weight: 600;
    min-height: 250px;
    padding: 2rem;
    border: none;
    border-radius: 18px;
    width: 100%;
    box-sizing: border-box;
    text-align: center;
    overflow-wrap: break-word;
    word-break: break-all;
    background-color: #F5F5DC; /* 恢復背景顏色 */
    color: #222222;
    line-height: 1.4;
    transition: background-color 0.3s, color 0.3s;
}

#box {
    position: fixed; /* 讓背景覆蓋整個視窗 */
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: -2; /* 確保背景在所有內容下方 */
}

@media (max-width: 768px) {
    h1 { font-size: 2rem; }
    #currentWordDisplay { font-size: 9vw; min-height: 200px; }
}

@media (max-width: 480px) {
    body { padding: 1rem; }
    h1 { font-size: 1.8rem; }
    .container { padding: 1.5rem; }
    #currentWordDisplay { font-size: 12vw; min-height: 180px; }
    .button-container { flex-direction: column; }
    button { width: 100%; }
}

#ai-controls {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
}

#ai-controls h2 {
    width: 100%;
    text-align: left;
}


/* From Uiverse.io by Pradeepsaranbishnoi */ 
.tabs {
  display: flex;
  position: relative;
  background-color: #fff;
  box-shadow: 0 0 1px 0 rgba(24, 94, 224, 0.15), 0 6px 12px 0 rgba(24, 94, 224, 0.15);
  padding: 0.75rem;
  border-radius: 99px;
  width: -moz-fit-content;
  width: fit-content;
}

.main-tabs {
  margin: 0 auto;
}

.tabs * {
  z-index: 2;
}

.container input[type="radio"] {
  display: none;
}

.tab {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 30px;
  width: 100px;
  font-size: .8rem;
  color: black;
  font-weight: 500;
  border-radius: 99px;
  cursor: pointer;
  transition: color 0.15s ease-in;
}

.notification {
  display: flex;
  align-items: center;
  justify-content: center;
  width: .8rem;
  height: .8rem;
  position: absolute;
  top: 10px;
  left: 30%;
  font-size: 10px;
  margin-left: 0.75rem;
  border-radius: 50%;
  margin: 0px;
  background-color: #e6eef9;
  transition: 0.15s ease-in;
}

.container input[type="radio"]:checked + label {
  color: #185ee0;
}

.container input[type="radio"]:checked + label > .notification {
  background-color: #185ee0;
  color: #fff;
  margin: 0px;
}

.container input[id="radio-1"]:checked ~ .glider {
  transform: translateX(0);
}

.container input[id="radio-2"]:checked ~ .glider {
  transform: translateX(100%);
}

.container input[id="radio-3"]:checked ~ .glider {
  transform: translateX(200%);
}

.difficulty-tabs {
    width: 100%;
    margin: 0;
}

.difficulty-tabs .tab {
    width: 33.33%;
}

.difficulty-tabs .glider {
    width: 33.33%;
}

.container input[id="diff-easy"]:checked ~ .glider {
  transform: translateX(0);
}

.container input[id="diff-medium"]:checked ~ .glider {
  transform: translateX(100%);
}

.container input[id="diff-hard"]:checked ~ .glider {
  transform: translateX(200%);
}

.glider {
  position: absolute;
  display: flex;
  height: 30px;
  width: 100px;
  background-color: #e6eef9;
  z-index: 1;
  border-radius: 99px;
  transition: 0.25s ease-out;
}

@media (max-width: 700px) {
 
  .tabs {
    transform: scale(0.6);
  }
}

/* Styles for the new split mode tabs */
.split-mode-tabs {
    margin: 0;
    width: 100%;
}

.split-mode-tabs .tab {
    width: 50%;
}

.split-mode-tabs .glider {
    width: 50%;
}

.tabs .glider {
    width: 100px; /* Match the tab width */
}

.container input[id="split-word"]:checked ~ .glider {
  transform: translateX(0);
}

.container input[id="split-sentence"]:checked ~ .glider {
  transform: translateX(100%);
}
",
    "mimeType": "text/css; charset=utf-8"
  }
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const url = new URL(request.url);

  // --- API 路由處理 ---
  // 監聽 /speedreader/api/deepseek 路徑
  const API_PATH = '/speedreader/api/deepseek';
  if (url.pathname === API_PATH) {
    // 只允許 POST 方法
    if (request.method !== 'POST') {
      return new Response('Method Not Allowed', { status: 405 });
    }
    // 直接呼叫後端邏輯
    return handleApiRequest(request);
  }

  // --- 靜態網站路由處理 ---
  const { pathname } = url;
  let key = pathname;

  // 處理根路徑和子目錄根路徑
  if (key === '/speedreader/' || key === '/speedreader') {
    key = '/speedreader/index.html';
  } else if (key.startsWith('/speedreader')) {
    // 確保路徑是 /speedreader/file.ext 格式
    key = `/speedreader${pathname.substring('/speedreader'.length)}`;
  } else {
    // 對於不匹配 /speedreader/ 的路徑，也嘗試提供 index.html 作為 SPA 回退
    key = '/speedreader/index.html';
  }

  const asset = staticAssets[key];

  if (asset) {
    // 從 Base64 解碼
    const buffer = Uint8Array.from(atob(asset.content), c => c.charCodeAt(0));
    return new Response(buffer, {
      headers: { 'Content-Type': asset.mimeType }
    });
  }

  // 如果找不到特定資產，則回退到 index.html
  const indexAsset = staticAssets['/speedreader/index.html'];
  if (indexAsset) {
    const buffer = Uint8Array.from(atob(indexAsset.content), c => c.charCodeAt(0));
    return new Response(buffer, {
      headers: { 'Content-Type': indexAsset.mimeType }
    });
  }

  return new Response('Asset not found', { status: 404 });
}

/**
 * 處理對 OpenRouter API 的請求
 * @param {Request} request
 */
async function handleApiRequest(request) {
  // 從 Worker 的環境變數中讀取 API Key
  // **重要**: 您需要在 Worker 的設定中，繫結您在 Pages 中建立的 DEEPSEEK_API_KEY 機密
  const openRouterApiKey = env.DEEPSEEK_API_KEY;

  if (!openRouterApiKey) {
    return new Response(JSON.stringify({ error: 'DEEPSEEK_API_KEY not configured in Worker secrets. Please bind the secret from your Pages project.' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
    });
  }

  try {
    let requestBody = await request.json();
    requestBody.model = 'deepseek/deepseek-chat-v3-0324:free';

    const fetchOptions = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openRouterApiKey}`,
        'HTTP-Referer': request.headers.get('Referer') || '', // 動態獲取 Referer
        'X-Title': 'Speed Reader',
      },
      body: JSON.stringify(requestBody),
    };

    const openRouterUrl = 'https://openrouter.ai/api/v1/chat/completions';
    const apiResponse = await fetch(openRouterUrl, fetchOptions);

    // 設定 CORS header，允許前端接收回應
    const responseHeaders = new Headers(apiResponse.headers);
    responseHeaders.set('Access-Control-Allow-Origin', '*');

    return new Response(apiResponse.body, {
      status: apiResponse.status,
      headers: responseHeaders,
    });

  } catch (error) {
    return new Response(JSON.stringify({ error: 'Internal Server Error in Worker.', message: error.message }), {
      status: 500,
      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
    });
  }
}
